// <auto-generated />
using Budget.DATA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Budget.DATA.Migrations
{
    [DbContext(typeof(BudgetContext))]
    [Migration("20180314104841_addTable")]
    partial class addTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Budget.MODEL.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("AddressBank")
                        .HasColumnName("ADDRESS_BANK")
                        .HasMaxLength(50);

                    b.Property<string>("AdviserFirstName")
                        .HasColumnName("ADVISER_FIRST_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("AdviserFixedPhone")
                        .HasColumnName("ADVISER_FIXED_PHONE")
                        .HasMaxLength(30);

                    b.Property<string>("AdviserLastName")
                        .HasColumnName("ADVISER_LAST_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("AdviserMail")
                        .HasColumnName("ADVISER_MAIL")
                        .HasMaxLength(50);

                    b.Property<string>("AdviserMobilePhone")
                        .HasColumnName("ADVISER_MOBILE_PHONE")
                        .HasMaxLength(30);

                    b.Property<string>("FolderFileSave")
                        .HasColumnName("FOLDER_FILE_SAVE");

                    b.Property<string>("LabelBankLong")
                        .HasColumnName("LABEL_BANK_LONG")
                        .HasMaxLength(50);

                    b.Property<string>("LabelBankShort")
                        .HasColumnName("LABEL_BANK_SHORT")
                        .HasMaxLength(50);

                    b.Property<string>("LogoClassName")
                        .HasColumnName("LOGO_CLASS_NAME")
                        .HasMaxLength(30);

                    b.Property<int>("PostalCodeBank")
                        .HasColumnName("POSTAL_CODE_BANK");

                    b.HasKey("Id");

                    b.ToTable("BANK");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<double>("AlertThreshold")
                        .HasColumnName("ALERT_THRESHOLD");

                    b.Property<int>("IdAccountType")
                        .HasColumnName("ID_ACCOUNT_TYPE");

                    b.Property<int>("IdBank")
                        .HasColumnName("ID_BANK");

                    b.Property<string>("Label")
                        .HasColumnName("LABEL")
                        .HasMaxLength(50);

                    b.Property<string>("Number")
                        .HasColumnName("NUMBER")
                        .HasMaxLength(50);

                    b.Property<double>("StartAmount")
                        .HasColumnName("START_AMOUNT");

                    b.HasKey("Id");

                    b.HasIndex("IdAccountType");

                    b.HasIndex("IdBank");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasName("IX_AccountNumber")
                        .HasFilter("[NUMBER] IS NOT NULL");

                    b.ToTable("ACCOUNT");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .HasColumnName("LABEL")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ACCOUNT_TYPE");
                });

            modelBuilder.Entity("Budget.MODEL.Shortcut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Icon")
                        .HasColumnName("ICON");

                    b.Property<int>("IdUser")
                        .HasColumnName("ID_USER");

                    b.Property<string>("Title")
                        .HasColumnName("TITLE");

                    b.Property<string>("Type")
                        .HasColumnName("TYPE");

                    b.Property<string>("Url")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("SHORTCUT");
                });

            modelBuilder.Entity("Budget.MODEL.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("AvatarUrl")
                        .HasColumnName("AVATAR_URL");

                    b.Property<string>("City")
                        .HasColumnName("CITY");

                    b.Property<string>("Country")
                        .HasColumnName("COUNTRY");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("CREATION_DATE");

                    b.Property<DateTime>("DateLastActive")
                        .HasColumnName("LAST_ACTIVE_DATE");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnName("BIRTH_DATE");

                    b.Property<string>("FirstName")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("Gender")
                        .HasColumnName("GENDER");

                    b.Property<string>("IdAvatarCloud")
                        .HasColumnName("ID_AVATAR_CLOUD");

                    b.Property<string>("LastName")
                        .HasColumnName("LAST_NAME");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnName("PASSWORD_HASH");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnName("PASSWORD_SALT");

                    b.Property<int>("PostalCode")
                        .HasColumnName("POSTAL_CODE");

                    b.Property<string>("UserName")
                        .HasColumnName("USER_NAME");

                    b.HasKey("Id");

                    b.ToTable("USER");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Account", b =>
                {
                    b.HasOne("Budget.MODEL.Database.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("IdAccountType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("IdBank")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Budget.MODEL.Shortcut", b =>
                {
                    b.HasOne("Budget.MODEL.User", "User")
                        .WithMany("Shortcuts")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
