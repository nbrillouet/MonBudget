// <auto-generated />
using Budget.DATA;
using Budget.MODEL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Budget.DATA.Migrations
{
    [DbContext(typeof(BudgetContext))]
    [Migration("20180914142145_alterOperation")]
    partial class alterOperation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Budget.MODEL.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("AddressBank")
                        .HasColumnName("ADDRESS_BANK")
                        .HasMaxLength(50);

                    b.Property<string>("AdviserFirstName")
                        .HasColumnName("ADVISER_FIRST_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("AdviserFixedPhone")
                        .HasColumnName("ADVISER_FIXED_PHONE")
                        .HasMaxLength(30);

                    b.Property<string>("AdviserLastName")
                        .HasColumnName("ADVISER_LAST_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("AdviserMail")
                        .HasColumnName("ADVISER_MAIL")
                        .HasMaxLength(50);

                    b.Property<string>("AdviserMobilePhone")
                        .HasColumnName("ADVISER_MOBILE_PHONE")
                        .HasMaxLength(30);

                    b.Property<string>("FolderFileSave")
                        .HasColumnName("FOLDER_FILE_SAVE");

                    b.Property<string>("LabelBankLong")
                        .HasColumnName("LABEL_BANK_LONG")
                        .HasMaxLength(50);

                    b.Property<string>("LabelBankShort")
                        .HasColumnName("LABEL_BANK_SHORT")
                        .HasMaxLength(50);

                    b.Property<string>("LogoClassName")
                        .HasColumnName("LOGO_CLASS_NAME")
                        .HasMaxLength(30);

                    b.Property<int>("PostalCodeBank")
                        .HasColumnName("POSTAL_CODE_BANK");

                    b.HasKey("Id");

                    b.ToTable("BANK");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<double>("AlertThreshold")
                        .HasColumnName("ALERT_THRESHOLD");

                    b.Property<int>("IdAccountType")
                        .HasColumnName("ID_ACCOUNT_TYPE");

                    b.Property<int>("IdBank")
                        .HasColumnName("ID_BANK");

                    b.Property<string>("Label")
                        .HasColumnName("LABEL")
                        .HasMaxLength(50);

                    b.Property<string>("Number")
                        .HasColumnName("NUMBER")
                        .HasMaxLength(50);

                    b.Property<double>("StartAmount")
                        .HasColumnName("START_AMOUNT");

                    b.HasKey("Id");

                    b.HasIndex("IdAccountType");

                    b.HasIndex("IdBank");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasName("IX_AccountNumber")
                        .HasFilter("[NUMBER] IS NOT NULL");

                    b.ToTable("ACCOUNT");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<double>("AmountOperation")
                        .HasColumnName("AMOUNT_OPERATION");

                    b.Property<DateTime>("DateImport")
                        .HasColumnName("DATE_IMPORT");

                    b.Property<DateTime?>("DateIntegration")
                        .HasColumnName("DATE_INTEGRATION");

                    b.Property<DateTime?>("DateOperation")
                        .HasColumnName("DATE_OPERATION");

                    b.Property<int>("IdAccount")
                        .HasColumnName("ID_ACCOUNT");

                    b.Property<int>("IdImport")
                        .HasColumnName("ID_IMPORT");

                    b.Property<int>("IdMovement")
                        .HasColumnName("ID_MOVEMENT");

                    b.Property<int>("IdOperation")
                        .HasColumnName("ID_OPERATION");

                    b.Property<int>("IdOperationDetail")
                        .HasColumnName("ID_OPERATION_DETAIL");

                    b.Property<int>("IdOperationMethod")
                        .HasColumnName("ID_OPERATION_METHOD");

                    b.Property<int>("IdOperationType")
                        .HasColumnName("ID_OPERATION_TYPE");

                    b.Property<int>("IdOperationTypeFamily")
                        .HasColumnName("ID_OPERATION_TYPE_FAMILY");

                    b.Property<string>("LabelOperation")
                        .HasColumnName("LABEL_OPERATION")
                        .HasMaxLength(500);

                    b.Property<string>("Reference")
                        .HasColumnName("REFERENCE")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdImport");

                    b.HasIndex("IdOperation");

                    b.HasIndex("IdOperationDetail");

                    b.HasIndex("IdOperationMethod");

                    b.HasIndex("IdOperationType");

                    b.ToTable("ACCOUNT_STATEMENT");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatementImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<DateTime>("DateImport")
                        .HasColumnName("DATE_IMPORT");

                    b.Property<string>("FileImport")
                        .HasColumnName("FILE_IMPORT");

                    b.Property<int>("IdBank")
                        .HasColumnName("ID_BANK");

                    b.Property<int>("IdUser")
                        .HasColumnName("ID_USER");

                    b.HasKey("Id");

                    b.HasIndex("IdBank");

                    b.HasIndex("IdUser");

                    b.ToTable("ACCOUNT_STATEMENT_IMPORT");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatementImportFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<double>("AmountOperation")
                        .HasColumnName("AMOUNT_OPERATION");

                    b.Property<DateTime>("DateImport")
                        .HasColumnName("DATE_IMPORT");

                    b.Property<DateTime?>("DateIntegration")
                        .HasColumnName("DATE_INTEGRATION");

                    b.Property<DateTime?>("DateOperation")
                        .HasColumnName("DATE_OPERATION");

                    b.Property<int>("EnumAsifState")
                        .HasColumnName("STATE");

                    b.Property<int?>("IdAccount")
                        .HasColumnName("ID_ACCOUNT");

                    b.Property<int>("IdImport")
                        .HasColumnName("ID_IMPORT");

                    b.Property<int>("IdMovement")
                        .HasColumnName("ID_MOVEMENT");

                    b.Property<int?>("IdOperation")
                        .HasColumnName("ID_OPERATION");

                    b.Property<int?>("IdOperationDetail")
                        .HasColumnName("ID_OPERATION_DETAIL");

                    b.Property<int?>("IdOperationMethod")
                        .HasColumnName("ID_OPERATION_METHOD");

                    b.Property<int?>("IdOperationType")
                        .HasColumnName("ID_OPERATION_TYPE");

                    b.Property<int?>("IdOperationTypeFamily")
                        .HasColumnName("ID_OPERATION_TYPE_FAMILY");

                    b.Property<bool>("IsDuplicated")
                        .HasColumnName("IS_DUPLICATED");

                    b.Property<string>("LabelOperation")
                        .HasColumnName("LABEL_OPERATION")
                        .HasMaxLength(500);

                    b.Property<string>("LabelOperationWork")
                        .HasColumnName("LABEL_OPERATION_WORK")
                        .HasMaxLength(500);

                    b.Property<string>("OperationKeywordTemp")
                        .HasColumnName("OPERATION_KEYWORD_TEMP");

                    b.Property<string>("OperationLabelTemp")
                        .HasColumnName("OPERATION_LABEL_TEMP");

                    b.Property<string>("OperationReferenceTemp")
                        .HasColumnName("OPERATION_REFERENCE_TEMP");

                    b.Property<string>("PlaceKeywordTemp")
                        .HasColumnName("PLACE_KEYWORD_TEMP")
                        .HasMaxLength(500);

                    b.Property<string>("PlaceLabelTemp")
                        .HasColumnName("PLACE_LABEL_TEMP")
                        .HasMaxLength(500);

                    b.Property<string>("Reference")
                        .HasColumnName("REFERENCE")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdImport");

                    b.HasIndex("IdOperation");

                    b.HasIndex("IdOperationDetail");

                    b.HasIndex("IdOperationMethod");

                    b.HasIndex("IdOperationType");

                    b.HasIndex("IdOperationTypeFamily");

                    b.ToTable("ACCOUNT_STATEMENT_IMPORT_FILE");
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .HasColumnName("LABEL")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ACCOUNT_TYPE");
                });

            modelBuilder.Entity("Budget.MODEL.Database.BankFileDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("IdBank")
                        .HasColumnName("ID_BANK");

                    b.Property<string>("LabelField")
                        .HasColumnName("LABEL_FIELD")
                        .HasMaxLength(50);

                    b.Property<int>("LabelOrder")
                        .HasColumnName("LABEL_ORDER");

                    b.HasKey("Id");

                    b.HasIndex("IdBank");

                    b.ToTable("BANK_FILE_DEFINITION");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("FormattedAddress")
                        .IsRequired()
                        .HasColumnName("FORMATTED_ADDRESS");

                    b.Property<double>("Lat")
                        .HasColumnName("LAT");

                    b.Property<double>("Lng")
                        .HasColumnName("LNG");

                    b.Property<int>("idGMapAdministrativeAreaLevel1")
                        .HasColumnName("ID_GMAP_ADMINISTRATIVE_AREA_LEVEL_1");

                    b.Property<int>("idGMapAdministrativeAreaLevel2")
                        .HasColumnName("ID_GMAP_ADMINISTRATIVE_AREA_LEVEL_2");

                    b.Property<int>("idGMapCountry")
                        .HasColumnName("ID_GMAP_COUNTRY");

                    b.Property<int>("idGMapLocality")
                        .HasColumnName("ID_GMAP_LOCALITY");

                    b.Property<int>("idGMapNeighborhood")
                        .HasColumnName("ID_GMAP_NEIGHBORHOOD");

                    b.Property<int>("idGMapPostalCode")
                        .HasColumnName("ID_GMAP_POSTAL_CODE");

                    b.Property<int>("idGMapRoute")
                        .HasColumnName("ID_GMAP_ROUTE");

                    b.Property<int>("idGMapStreetNumber")
                        .HasColumnName("ID_GMAP_STREET_NUMBER");

                    b.Property<int>("idGMapSublocalityLevel1")
                        .HasColumnName("ID_GMAP_SUBLOCALITY_LEVEL_1");

                    b.Property<int>("idGMapSublocalityLevel2")
                        .HasColumnName("ID_GMAP_SUBLOCALITY_LEVEL_2");

                    b.HasKey("Id");

                    b.HasIndex("idGMapAdministrativeAreaLevel1");

                    b.HasIndex("idGMapAdministrativeAreaLevel2");

                    b.HasIndex("idGMapCountry");

                    b.HasIndex("idGMapLocality");

                    b.HasIndex("idGMapNeighborhood");

                    b.HasIndex("idGMapPostalCode");

                    b.HasIndex("idGMapRoute");

                    b.HasIndex("idGMapStreetNumber");

                    b.HasIndex("idGMapSublocalityLevel1");

                    b.HasIndex("idGMapSublocalityLevel2");

                    b.ToTable("GMAP_ADDRESS");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapAddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("IdGMapAddress")
                        .HasColumnName("ID_GMAP_ADDRESS");

                    b.Property<int>("IdGMapType")
                        .HasColumnName("ID_GMAP_TYPE");

                    b.HasKey("Id");

                    b.HasIndex("IdGMapAddress");

                    b.HasIndex("IdGMapType");

                    b.ToTable("GMAP_ADDRESS_TYPE");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapAdministrativeAreaLevel1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_ADMINISTRATIVE_AREA_LEVEL_1");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapAdministrativeAreaLevel2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_ADMINISTRATIVE_AREA_LEVEL_2");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_COUNTRY");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapLocality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_LOCALITY");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapNeighborhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_NEIGHBORHOOD");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapPostalCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_POSTAL_CODE");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_ROUTE");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapStreetNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_STREET_NUMBER");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapSublocalityLevel1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_SUBLOCALITY_LEVEL_1");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapSublocalityLevel2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_SUBLOCALITY_LEVEL_2");
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("LABEL");

                    b.HasKey("Id");

                    b.ToTable("GMAP_TYPE");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("IdOperationMethod")
                        .HasColumnName("ID_OPERATION_METHOD");

                    b.Property<int>("IdOperationType")
                        .HasColumnName("ID_OPERATION_TYPE");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("LABEL")
                        .HasMaxLength(255);

                    b.Property<string>("Reference")
                        .HasColumnName("REFERENCE")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("IdOperationMethod");

                    b.HasIndex("IdOperationType");

                    b.HasIndex("Label", "IdOperationMethod", "IdOperationType")
                        .IsUnique()
                        .HasName("IX_OperationKey");

                    b.ToTable("OPERATION");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("IdGMapAddress")
                        .HasColumnName("ID_GMAP_ADDRESS");

                    b.Property<int>("IdOperation")
                        .HasColumnName("ID_OPERATION");

                    b.Property<string>("KeywordOperation")
                        .HasColumnName("KEYWORD_OPERATION");

                    b.Property<string>("KeywordPlace")
                        .HasColumnName("KEYWORD_PLACE");

                    b.HasKey("Id");

                    b.HasIndex("IdGMapAddress");

                    b.HasIndex("IdOperation");

                    b.ToTable("OPERATION_DETAIL");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Label")
                        .HasColumnName("LABEL")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("OPERATION_METHOD");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationMethodLexical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("IdBank")
                        .HasColumnName("ID_BANK");

                    b.Property<int>("IdOperationMethod")
                        .HasColumnName("ID_OPERATION_METHOD");

                    b.Property<string>("Keyword")
                        .HasColumnName("KEYWORD")
                        .HasMaxLength(50);

                    b.Property<int>("OrderId")
                        .HasColumnName("ORDER_ID");

                    b.HasKey("Id");

                    b.HasIndex("IdBank");

                    b.HasIndex("IdOperationMethod");

                    b.ToTable("OPERATION_METHOD_LEXICAL");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("IdOperationTypeFamily")
                        .HasColumnName("ID_OPERATION_TYPE_FAMILY");

                    b.Property<string>("Label")
                        .HasColumnName("LABEL")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdOperationTypeFamily");

                    b.ToTable("OPERATION_TYPE");
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationTypeFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("IdMovement")
                        .HasColumnName("ID_MOVEMENT");

                    b.Property<string>("Label")
                        .HasColumnName("LABEL")
                        .HasMaxLength(50);

                    b.Property<string>("LogoClassName")
                        .HasColumnName("LOGO_CLASS_NAME")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("Id", "IdMovement")
                        .IsUnique()
                        .HasName("IX_OTF_Id_IdMovement");

                    b.ToTable("OPERATION_TYPE_FAMILY");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("IdUser")
                        .HasColumnName("ID_USER");

                    b.Property<string>("ImportFileDir")
                        .HasColumnName("IMPORT_FILE_DIR")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("PARAMETER");
                });

            modelBuilder.Entity("Budget.MODEL.Database.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("IdAccount")
                        .HasColumnName("ID_ACCOUNT");

                    b.Property<int>("IdUser")
                        .HasColumnName("ID_USER");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdUser");

                    b.ToTable("USER_ACCOUNT");
                });

            modelBuilder.Entity("Budget.MODEL.Shortcut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Icon")
                        .HasColumnName("ICON");

                    b.Property<int>("IdUser")
                        .HasColumnName("ID_USER");

                    b.Property<string>("Title")
                        .HasColumnName("TITLE");

                    b.Property<string>("Type")
                        .HasColumnName("TYPE");

                    b.Property<string>("Url")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("SHORTCUT");
                });

            modelBuilder.Entity("Budget.MODEL.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("AvatarUrl")
                        .HasColumnName("AVATAR_URL");

                    b.Property<string>("City")
                        .HasColumnName("CITY");

                    b.Property<string>("Country")
                        .HasColumnName("COUNTRY");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("CREATION_DATE");

                    b.Property<DateTime>("DateLastActive")
                        .HasColumnName("LAST_ACTIVE_DATE");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnName("BIRTH_DATE");

                    b.Property<string>("FirstName")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("Gender")
                        .HasColumnName("GENDER");

                    b.Property<string>("IdAvatarCloud")
                        .HasColumnName("ID_AVATAR_CLOUD");

                    b.Property<string>("LastName")
                        .HasColumnName("LAST_NAME");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnName("PASSWORD_HASH");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnName("PASSWORD_SALT");

                    b.Property<int>("PostalCode")
                        .HasColumnName("POSTAL_CODE");

                    b.Property<string>("UserName")
                        .HasColumnName("USER_NAME");

                    b.HasKey("Id");

                    b.ToTable("USER");
                });

            modelBuilder.Entity("Budget.MODEL.Database.Account", b =>
                {
                    b.HasOne("Budget.MODEL.Database.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("IdAccountType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("IdBank")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatement", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Account", "Account")
                        .WithMany()
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.AccountStatementImport", "AccountStatementImport")
                        .WithMany()
                        .HasForeignKey("IdImport")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("IdOperation")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.OperationDetail", "OperationDetail")
                        .WithMany()
                        .HasForeignKey("IdOperationDetail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.OperationMethod", "OperationMethod")
                        .WithMany()
                        .HasForeignKey("IdOperationMethod")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("IdOperationType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatementImport", b =>
                {
                    b.HasOne("Budget.MODEL.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("IdBank")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Budget.MODEL.Database.AccountStatementImportFile", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Account", "Account")
                        .WithMany()
                        .HasForeignKey("IdAccount");

                    b.HasOne("Budget.MODEL.Database.AccountStatementImport", "AccountStatementImport")
                        .WithMany()
                        .HasForeignKey("IdImport")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("IdOperation");

                    b.HasOne("Budget.MODEL.Database.OperationDetail", "OperationDetail")
                        .WithMany()
                        .HasForeignKey("IdOperationDetail");

                    b.HasOne("Budget.MODEL.Database.OperationMethod", "OperationMethod")
                        .WithMany()
                        .HasForeignKey("IdOperationMethod");

                    b.HasOne("Budget.MODEL.Database.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("IdOperationType");

                    b.HasOne("Budget.MODEL.Database.OperationTypeFamily", "OperationTypeFamily")
                        .WithMany()
                        .HasForeignKey("IdOperationTypeFamily");
                });

            modelBuilder.Entity("Budget.MODEL.Database.BankFileDefinition", b =>
                {
                    b.HasOne("Budget.MODEL.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("IdBank")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapAddress", b =>
                {
                    b.HasOne("Budget.MODEL.Database.GMapAdministrativeAreaLevel1", "gMapAdministrativeAreaLevel1")
                        .WithMany()
                        .HasForeignKey("idGMapAdministrativeAreaLevel1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.GMapAdministrativeAreaLevel2", "gMapAdministrativeAreaLevel2")
                        .WithMany()
                        .HasForeignKey("idGMapAdministrativeAreaLevel2")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.GMapCountry", "gMapCountry")
                        .WithMany()
                        .HasForeignKey("idGMapCountry")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.GMapLocality", "gMapLocality")
                        .WithMany()
                        .HasForeignKey("idGMapLocality")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.GMapNeighborhood", "gMapNeighborhood")
                        .WithMany()
                        .HasForeignKey("idGMapNeighborhood")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.GMapPostalCode", "gMapPostalCode")
                        .WithMany()
                        .HasForeignKey("idGMapPostalCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.GMapRoute", "gMapRoute")
                        .WithMany()
                        .HasForeignKey("idGMapRoute")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.GMapStreetNumber", "gMapStreetNumber")
                        .WithMany()
                        .HasForeignKey("idGMapStreetNumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.GMapSublocalityLevel1", "gMapSublocalityLevel1")
                        .WithMany()
                        .HasForeignKey("idGMapSublocalityLevel1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.GMapSublocalityLevel2", "gMapSublocalityLevel2")
                        .WithMany()
                        .HasForeignKey("idGMapSublocalityLevel2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Budget.MODEL.Database.GMapAddressType", b =>
                {
                    b.HasOne("Budget.MODEL.Database.GMapAddress", "GMapAddress")
                        .WithMany()
                        .HasForeignKey("IdGMapAddress")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.GMapType", "GMapType")
                        .WithMany()
                        .HasForeignKey("IdGMapType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Budget.MODEL.Database.Operation", b =>
                {
                    b.HasOne("Budget.MODEL.Database.OperationMethod", "OperationMethod")
                        .WithMany()
                        .HasForeignKey("IdOperationMethod")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("IdOperationType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationDetail", b =>
                {
                    b.HasOne("Budget.MODEL.Database.GMapAddress", "GMapAddress")
                        .WithMany()
                        .HasForeignKey("IdGMapAddress")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("IdOperation")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationMethodLexical", b =>
                {
                    b.HasOne("Budget.MODEL.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("IdBank")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.Database.OperationMethod", "OperationMethod")
                        .WithMany()
                        .HasForeignKey("IdOperationMethod")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Budget.MODEL.Database.OperationType", b =>
                {
                    b.HasOne("Budget.MODEL.Database.OperationTypeFamily", "OperationTypeFamily")
                        .WithMany()
                        .HasForeignKey("IdOperationTypeFamily")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Budget.MODEL.Database.Parameter", b =>
                {
                    b.HasOne("Budget.MODEL.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Budget.MODEL.Database.UserAccount", b =>
                {
                    b.HasOne("Budget.MODEL.Database.Account", "Account")
                        .WithMany("UserAccounts")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Budget.MODEL.User", "User")
                        .WithMany("UserAccounts")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Budget.MODEL.Shortcut", b =>
                {
                    b.HasOne("Budget.MODEL.User", "User")
                        .WithMany("Shortcuts")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
