{"version":3,"sources":["./src/app/main/_models/filters/operation-type-family.filter.ts","./src/app/main/_models/filters/operation-type.filter.ts","./src/app/main/_models/filters/operation.filter.ts","./src/app/main/_models/filters/shared/filterDetail.filter.ts","./src/app/main/_ngxs/referential/operation-type-family/otf-detail/otf-detail.action.ts","./src/app/main/_ngxs/referential/operation-type-family/otf-detail/otf-detail.state.ts","./src/app/main/_ngxs/referential/operation-type-family/otf-table/otf-table-filter-selected/otf-table-filter-selected.action.ts","./src/app/main/_ngxs/referential/operation-type-family/otf-table/otf-table-filter-selected/otf-table-filter-selected.state.ts","./src/app/main/_ngxs/referential/operation-type-family/otf-table/otf-table-filter-selection/otf-table-filter-selection.action.ts","./src/app/main/_ngxs/referential/operation-type-family/otf-table/otf-table-filter-selection/otf-table-filter-selection.state.ts","./src/app/main/_ngxs/referential/operation-type-family/otf-table/otf-table.action.ts","./src/app/main/_ngxs/referential/operation-type-family/otf-table/otf-table.state.ts","./src/app/main/_ngxs/referential/operation-type/ot-detail/ot-detail.action.ts","./src/app/main/_ngxs/referential/operation-type/ot-detail/ot-detail.state.ts","./src/app/main/_ngxs/referential/operation-type/ot-table/ot-table-filter-selected/ot-table-filter-selected.action.ts","./src/app/main/_ngxs/referential/operation-type/ot-table/ot-table-filter-selected/ot-table-filter-selected.state.ts","./src/app/main/_ngxs/referential/operation-type/ot-table/ot-table-filter-selection/ot-table-filter-selection.action.ts","./src/app/main/_ngxs/referential/operation-type/ot-table/ot-table-filter-selection/ot-table-filter-selection.state.ts","./src/app/main/_ngxs/referential/operation-type/ot-table/ot-table.action.ts","./src/app/main/_ngxs/referential/operation-type/ot-table/ot-table.state.ts","./src/app/main/_ngxs/referential/operation/operation-detail/operation-detail-filter/operation-detail-filter.action.ts","./src/app/main/_ngxs/referential/operation/operation-detail/operation-detail-filter/operation-detail-filter.state.ts","./src/app/main/_ngxs/referential/operation/operation-detail/operation-detail.action.ts","./src/app/main/_ngxs/referential/operation/operation-detail/operation-detail.state.ts","./src/app/main/_ngxs/referential/operation/operation-table/operation-table-filter-selected/operation-table-filter-selected.action.ts","./src/app/main/_ngxs/referential/operation/operation-table/operation-table-filter-selected/operation-table-filter-selected.state.ts","./src/app/main/_ngxs/referential/operation/operation-table/operation-table-filter-selection/operation-table-filter-selection.state.ts","./src/app/main/_ngxs/referential/operation/operation-table/operation-table-filter-selection/operation-table-filter-slection.action.ts","./src/app/main/_ngxs/referential/operation/operation-table/operation-table.action.ts","./src/app/main/_ngxs/referential/operation/operation-table/operation-table.state.ts","./src/app/main/_services/Referential/operation.service.ts","./src/app/main/apps/referential/operations/operation-type-family/operation-type-family-detail/operation-type-family-detail.component.ts","./src/app/main/apps/referential/operations/operation-type-family/operation-type-family-detail/operation-type-family-detail.component.html","./src/app/main/apps/referential/operations/operation-type-family/operation-type-family-table/operation-type-family-table.component.ts","./src/app/main/apps/referential/operations/operation-type-family/operation-type-family-table/operation-type-family-table.component.html","./src/app/main/apps/referential/operations/operation-type-family/operation-type-family.service.ts","./src/app/main/apps/referential/operations/operation-type/operation-type-detail/operation-type-detail.component.ts","./src/app/main/apps/referential/operations/operation-type/operation-type-detail/operation-type-detail.component.html","./src/app/main/apps/referential/operations/operation-type/operation-type-table/operation-type-table.component.ts","./src/app/main/apps/referential/operations/operation-type/operation-type-table/operation-type-table.component.html","./src/app/main/apps/referential/operations/operation-type/operation-type.service.ts","./src/app/main/apps/referential/operations/operation/operation-detail/operation-detail.component.ts","./src/app/main/apps/referential/operations/operation/operation-detail/operation-detail.component.html","./src/app/main/apps/referential/operations/operation/operation-table/operation-table.component.ts","./src/app/main/apps/referential/operations/operation/operation-table/operation-table.component.html","./src/app/main/apps/referential/operations/operations-main-tab/operations-main-tab.component.ts","./src/app/main/apps/referential/operations/operations-main-tab/operations-main-tab.component.html","./src/app/main/apps/referential/operations/operations-main/operations-main.component.ts","./src/app/main/apps/referential/operations/operations-main/operations-main.component.html","./src/app/main/apps/referential/operations/operations.module.ts"],"names":[],"mappings":"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","file":"referential-operations-operations-module.js","sourcesContent":["import { Pagination } from \"../pagination.model\";\r\nimport { ISelect } from \"../generics/select.model\";\r\nimport { IUserForGroup } from \"../user.model\";\r\n\r\nexport class FilterOtfTableSelected {\r\n    user: IUserForGroup = null;\r\n    label: string = null;\r\n    movement: ISelect = null;\r\n\r\n    pagination: Pagination = new Pagination();\r\n}\r\n\r\nexport class FilterOtfTableSelection {\r\n    movement: ISelect[];\r\n\r\n    // selected : FilterOtfTableSelected;\r\n\r\n    constructor () {\r\n        // this.selected = new FilterOtfTableSelected();\r\n    }\r\n}","import { IUserForGroup } from \"../user.model\";\r\nimport { Pagination } from \"../pagination.model\";\r\nimport { ISelect } from \"../generics/select.model\";\r\n\r\nexport class FilterOtTableSelected {\r\n    user: IUserForGroup = null;\r\n    label: string = null;\r\n    operationTypeFamily: ISelect = null;\r\n    pagination: Pagination = new Pagination();\r\n}\r\n\r\nexport class FilterOtTableSelection {\r\n    operationTypeFamily: ISelect[];\r\n    // selected : FilterOtTableSelected;\r\n\r\n    constructor () {\r\n        // this.selected = new FilterOtTableSelected();\r\n    }\r\n}","import { ISelect, ISelectGroup } from \"../generics/select.model\";\r\nimport { IUserForGroup } from \"../user.model\";\r\nimport { Pagination } from \"../pagination.model\";\r\n\r\nexport class FilterOperationDetail {\r\n    operationMethod: ISelect[];\r\n    operationType: ISelect[];\r\n}\r\n\r\nexport class FilterOperationTableSelected {\r\n    user: IUserForGroup = null;\r\n    label: string = null;\r\n    operationMethod: ISelect[] = null;\r\n    operationType: ISelect[] = null;\r\n    pagination: Pagination = new Pagination();\r\n}\r\n\r\nexport class FilterOperationTableSelection {\r\n    operationType: ISelectGroup[];\r\n    operationMethod: ISelect[];\r\n\r\n    constructor () {\r\n\r\n    }\r\n}\r\n\r\nexport class FilterOperation {\r\n    operationMethod: ISelect;\r\n    operationType: ISelect;\r\n}","export class FilterDetail {\r\n    id: number = null;\r\n\r\n    constructor() {\r\n    }\r\n}","\r\nexport const OTF_DETAIL_LOAD = 'otf-detail-load';\r\nexport const OTF_DETAIL_CLEAR = 'otf-detail-clear';\r\n\r\nexport class LoadOtfDetail {\r\n    static readonly type = OTF_DETAIL_LOAD;\r\n \r\n    constructor(public payload: number) { }\r\n}\r\n\r\n\r\nexport class ClearOtfDetail {\r\n    static readonly type = OTF_DETAIL_CLEAR;\r\n}\r\n\r\n","import { OtfDetail } from \"app/main/_models/referential/operation-type-family.model\";\r\nimport { State, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { OtfService } from \"app/main/apps/referential/operations/operation-type-family/operation-type-family.service\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { Datas } from \"app/main/_models/generics/detail-info.model\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { LoadOtfDetail, ClearOtfDetail } from \"./otf-detail.action\";\r\n\r\nexport class OtfDetailStateModel extends Datas<OtfDetail> {\r\n    constructor () {\r\n        super();\r\n    }\r\n}\r\n\r\nlet otfDetailStateModel = new OtfDetailStateModel();\r\n\r\n@State<OtfDetailStateModel>({\r\n    name: 'OtfDetail',\r\n    defaults : otfDetailStateModel\r\n})\r\n\r\n@Injectable()\r\nexport class OtfDetailState extends LoaderState {\r\n\r\n    constructor(\r\n        private _otfService: OtfService\r\n        ) {\r\n            super();\r\n    }\r\n\r\n    @Selector()\r\n    static get(state: OtfDetailStateModel) {\r\n    \r\n        return state;\r\n    }\r\n\r\n    @Action(LoadOtfDetail)\r\n    loadOtfDetail(context: StateContext<OtfDetailStateModel>, action: LoadOtfDetail) {\r\n        this.loading(context,'datas');\r\n        \r\n        const state = context.getState();\r\n        state.datas = null;\r\n        context.patchState(state);\r\n\r\n        this._otfService.getOtfDetail(action.payload)\r\n            .subscribe(result=> {\r\n                let state = context.getState();\r\n                state.datas = result;\r\n                context.patchState(state);\r\n\r\n                this.loaded(context,'datas');\r\n            });\r\n    }\r\n\r\n    @Action(ClearOtfDetail)\r\n    clear(context: StateContext<OtfDetailStateModel>) {\r\n        return context.setState(new OtfDetailStateModel());\r\n    }\r\n\r\n}","import { Pagination } from \"app/main/_models/pagination.model\";\r\nimport { FilterOtfTableSelected } from \"app/main/_models/filters/operation-type-family.filter\";\r\n\r\nexport const OTF_TABLE_FILTER_SELECTED_UPDATE_PAGINATION = 'otf-table-filter-selected-update-pagination';\r\nexport const OTF_TABLE_FILTER_SELECTED_SYNCHRONIZATION = 'otf-table-filter-selected-synchronization';\r\n\r\nexport class UpdatePaginationOtfTableFilterSelected {\r\n    static readonly type = OTF_TABLE_FILTER_SELECTED_UPDATE_PAGINATION;\r\n \r\n    constructor(public payload: Pagination) { }\r\n}\r\n\r\nexport class SynchronizeOtfTableFilterSelected {\r\n    static readonly type = OTF_TABLE_FILTER_SELECTED_SYNCHRONIZATION;\r\n \r\n    constructor(public payload: FilterOtfTableSelected) { }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// import { FilterOtfTable, FilterOtfTableSelected } from \"app/main/_models/filters/operation-type-family.filter\";\r\n// import { Pagination } from \"app/main/_models/pagination.model\";\r\n\r\n// export const OTF_TABLE_FILTER_LOAD = 'otf-table-filter-load';\r\n// export const OTF_TABLE_FILTER_CHANGE = 'otf-table-filter-change';\r\n// export const OTF_TABLE_FILTER_UPDATE_PAGINATION = 'otf-table-filter-update-pagination';\r\n\r\n// export class LoadOtfTableFilter {\r\n//     static readonly type = OTF_TABLE_FILTER_LOAD;\r\n \r\n//     constructor(public payload: FilterOtfTable) { }\r\n// }\r\n\r\n// export class ChangeOtfTableFilter {\r\n//     static readonly type = OTF_TABLE_FILTER_CHANGE;\r\n \r\n//     constructor(public payload: FilterOtfTableSelected) { }\r\n// }\r\n\r\n// export class UpdatePaginationOtfTableFilter {\r\n//     static readonly type = OTF_TABLE_FILTER_UPDATE_PAGINATION;\r\n \r\n//     constructor(public payload: Pagination) { }\r\n// }","import { FilterOtfTableSelected } from \"app/main/_models/filters/operation-type-family.filter\";\r\nimport { FilterSelected } from \"app/main/_models/generics/filter.info.model\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { UpdatePaginationOtfTableFilterSelected, SynchronizeOtfTableFilterSelected } from \"./otf-table-filter-selected.action\";\r\nimport { LoadOtfTable } from \"../otf-table.action\";\r\n\r\n\r\nexport class OtfTableFilterSelectedStateModel extends FilterSelected<FilterOtfTableSelected> {\r\n    constructor () {\r\n        super(FilterOtfTableSelected);\r\n    }\r\n}\r\n\r\nlet otfTableFilterSelectedStateModel = new OtfTableFilterSelectedStateModel();\r\n\r\n@State<OtfTableFilterSelectedStateModel>({\r\n    name: 'OtfTableFilterSelected',\r\n    defaults : otfTableFilterSelectedStateModel\r\n})\r\n\r\n@Injectable()\r\nexport class OtfTableFilterSelectedState extends LoaderState {\r\n    constructor(\r\n        private _store: Store\r\n        ) {\r\n            super();\r\n    }\r\n\r\n    // async delay(ms: number) {\r\n    //     await new Promise(resolve => setTimeout(()=>resolve(), ms)).then(()=>console.log(\"fired\"));\r\n    //   }\r\n\r\n    @Selector()\r\n    static get(state: OtfTableFilterSelectedStateModel) {\r\n        return state;\r\n    }\r\n       \r\n\r\n    @Action(UpdatePaginationOtfTableFilterSelected)\r\n    UpdatePaginationOtfTableFilterSelected(context: StateContext<OtfTableFilterSelectedStateModel>, action: UpdatePaginationOtfTableFilterSelected) {\r\n        let state = context.getState();\r\n        state.selected.pagination = action.payload;\r\n        context.patchState(state);\r\n    }\r\n\r\n    @Action(SynchronizeOtfTableFilterSelected)\r\n    SynchronizeOtfTableFilterSelected(context: StateContext<OtfTableFilterSelectedStateModel>, action: SynchronizeOtfTableFilterSelected) {\r\n        this.loading(context,'filter-selected');\r\n        \r\n        let state = context.getState();\r\n        state.selected = action.payload;\r\n        context.patchState(state);\r\n\r\n        this.loaded(context,'filter-selected');\r\n\r\n        this._store.dispatch(new LoadOtfTable(action.payload));\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n// import { FilterOtfTable, FilterOtfTableSelected } from \"app/main/_models/filters/operation-type-family.filter\";\r\n// import { FilterInfo } from \"app/main/_models/generics/filter.info.model\";\r\n// import { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\n// import { LoadOtfTableFilter, ChangeOtfTableFilter, UpdatePaginationOtfTableFilter } from \"./operation-type-family-list-filter.action\";\r\n// import { LoadOtfTableDatas } from \"../operation-type-family-list/operation-type-family-list.action\";\r\n// import { OtfService } from \"app/main/apps/referential/operations/operation-type-family/operation-type-family.service\";\r\n// import { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\n// import { Injectable } from \"@angular/core\";\r\n\r\n\r\n// export class OtfTableFilterStateModel extends FilterInfo<FilterOtfTable> {\r\n//     constructor () {\r\n//         super(FilterOtfTable);\r\n//     }\r\n// }\r\n\r\n// let otfTableFilterStateModel = new OtfTableFilterStateModel();\r\n\r\n// @State<OtfTableFilterStateModel>({\r\n//     name: 'OtfTableFilter',\r\n//     defaults : otfTableFilterStateModel\r\n// })\r\n\r\n// @Injectable()\r\n// export class OtfTableFilterState extends LoaderState {\r\n\r\n//     constructor(\r\n//         private _otfService: OtfService,\r\n//         private _store: Store\r\n//         ) {\r\n//             super();\r\n//     }\r\n\r\n//     // async delay(ms: number) {\r\n//     //     await new Promise(resolve => setTimeout(()=>resolve(), ms)).then(()=>console.log(\"fired\"));\r\n//     //   }\r\n\r\n//     @Selector()\r\n//     static get(state: OtfTableFilterStateModel) {\r\n \r\n//         return state;\r\n//     }\r\n\r\n//     // @Selector()\r\n//     // static getFilter(state: PlanTableComboFilterStateModel) {\r\n//     //     return state.filter;\r\n//     // }\r\n\r\n//     @Action(LoadOtfTableFilter)\r\n//     loadOtfTableFilter(context: StateContext<OtfTableFilterStateModel>, action: LoadOtfTableFilter) {\r\n//         this.loading(context,'filters');\r\n        \r\n//         const state = context.getState();\r\n//         state.filters = null;\r\n//         context.patchState(state);\r\n\r\n//         this._otfService.getOtfTableFilter(action.payload.selected)\r\n//             .subscribe(result=> {\r\n          \r\n//                 //conserver le payload\r\n//                 let payload = JSON.parse(JSON.stringify(action.payload.selected));\r\n//                 let state = context.getState();\r\n//                 state.filters = action.payload;\r\n//                 context.patchState(state);\r\n                \r\n//                 //TODO a controler\r\n//                 context.dispatch(new ChangeOtfTableFilter(payload));\r\n\r\n//                 this.loaded(context,'filters');\r\n//             });\r\n\r\n//     }\r\n\r\n//     // @Action(LoadOtfTableFilterSuccess)\r\n//     // loadSuccess(context: StateContext<OtfTableFilterStateModel>, action: LoadOtfTableFilterSuccess) {\r\n        \r\n//     //     //conserver le payload\r\n//     //     let payload = JSON.parse(JSON.stringify(action.payload.selected));\r\n\r\n//     //     let state = context.getState();\r\n//     //     state.filters = action.payload;\r\n\r\n//     //     context.patchState(state);\r\n        \r\n//     //     context.dispatch(new ChangeOtfTableFilter(payload));\r\n        \r\n//     // }\r\n//         // this.delay(3000).then(any=>{\r\n//     @Action(ChangeOtfTableFilter)\r\n//     changeFilter(context: StateContext<OtfTableFilterStateModel>, action: ChangeOtfTableFilter) {\r\n        \r\n//         this._store.dispatch(new LoadOtfTableDatas(action.payload));\r\n\r\n//      }\r\n\r\n//     @Action(UpdatePaginationOtfTableFilter)\r\n//     UpdatePaginationOtfTableFilter(context: StateContext<OtfTableFilterStateModel>, action: UpdatePaginationOtfTableFilter) {\r\n//         const state = context.getState();\r\n        \r\n//         state.filters.selected.pagination = action.payload;\r\n//         // this.delay(3000).then(any=>{\r\n//             context.patchState(state);\r\n//         // });\r\n//     }\r\n\r\n//     // HasChangedState( state: FilterOtfTableSelected, payload : FilterOtfTableSelected ) {\r\n\r\n//     //     return false;\r\n//     //     // if(payload.account == null || payload.otfState == null ) {\r\n//     //     //     return false;\r\n//     //     // }\r\n//     //     if( state.movement==null && payload.movement!=null) {\r\n//     //         return true;\r\n//     //     };\r\n//     //     if(state.label!=payload.label) {\r\n//     //         return true;\r\n//     //     }\r\n\r\n//     //     if(state.pagination != payload.pagination) {\r\n//     //         return true;\r\n//     //     }\r\n//     //     return false;\r\n        \r\n//     // }\r\n\r\n//     // ReloadFilters(state: FilterOtfTable, payload:FilterOtfTable ) {\r\n        \r\n//     //     if(state.selected.idImport==null) {\r\n            \r\n//     //         return true;\r\n//     //     }\r\n        \r\n//     //     if(state.selected.idImport != payload.selected.idImport) {\r\n            \r\n//     //         return true;\r\n//     //     }\r\n\r\n//     //     if(state.selected.account && payload.selected.account && state.selected.account.id != payload.selected.account.id) {\r\n\r\n//     //         return true;\r\n//     //     }\r\n\r\n//     //     return false;\r\n//     // }\r\n// }","import { FilterOtfTableSelected } from \"app/main/_models/filters/operation-type-family.filter\";\r\n\r\nexport const OTF_TABLE_FILTER_SELECTION_LOAD = 'otf-table-filter-selection-load';\r\n\r\nexport class LoadOtfTableFilterSelection {\r\n    static readonly type = OTF_TABLE_FILTER_SELECTION_LOAD;\r\n \r\n    constructor(public payload: FilterOtfTableSelected) { }\r\n}","import { FilterSelection } from \"app/main/_models/generics/filter.info.model\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { State, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { LoadOtfTableFilterSelection } from \"./otf-table-filter-selection.action\";\r\nimport { OtfService } from \"app/main/apps/referential/operations/operation-type-family/operation-type-family.service\";\r\nimport { FilterOtfTableSelection } from \"app/main/_models/filters/operation-type-family.filter\";\r\n\r\nexport class OtfTableFilterSelectionStateModel extends FilterSelection<FilterOtfTableSelection> {\r\n    constructor () {\r\n        super(FilterOtfTableSelection);\r\n    }\r\n}\r\n\r\nlet otfTableFilterSelectionStateModel = new OtfTableFilterSelectionStateModel();\r\n\r\n@State<OtfTableFilterSelectionStateModel>({\r\n    name: 'OtfTableFilterSelection',\r\n    defaults : otfTableFilterSelectionStateModel\r\n})\r\n\r\n@Injectable()\r\nexport class OtfTableFilterSelectionState extends LoaderState {\r\n\r\n    constructor(\r\n        private _otfService: OtfService\r\n        ) {\r\n            super();\r\n    }\r\n\r\n    // async delay(ms: number) {\r\n    //     await new Promise(resolve => setTimeout(()=>resolve(), ms)).then(()=>console.log(\"fired\"));\r\n    // }\r\n\r\n    @Selector()\r\n    static get(state: OtfTableFilterSelectionStateModel) {\r\n        return state;\r\n    }\r\n\r\n    @Action(LoadOtfTableFilterSelection)\r\n    LoadOtfTableFilterSelection(context: StateContext<OtfTableFilterSelectionStateModel>, action: LoadOtfTableFilterSelection) {\r\n        this.loading(context,'filter-selection');\r\n        \r\n        const state = context.getState();\r\n        state.selection = null;\r\n        context.patchState(state);\r\n\r\n        this._otfService.getOtfTableFilter(action.payload)\r\n            .subscribe(result=> {\r\n                let state = context.getState();\r\n                state.selection = result;\r\n                context.patchState(state);\r\n\r\n                this.loaded(context,'filter-selection');\r\n            });\r\n\r\n    }\r\n\r\n}","export const OTF_TABLE_LOAD = 'otf-table-load';\r\nexport const OTF_TABLE_CLEAR = 'otf-table-clear';\r\n\r\nexport class LoadOtfTable {\r\n    static readonly type = OTF_TABLE_LOAD;\r\n \r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class ClearOtfTable {\r\n    static readonly type = OTF_TABLE_CLEAR;\r\n}\r\n\r\n\r\n// export const OTF_TABLE_LOAD = 'otf-table-load';\r\n// // export const OTF_TABLE_LOAD_SUCCESS = 'otf-table-load-success';\r\n// export const OTF_TABLE_FILTER_CHANGE = 'otf-table-filter-change';\r\n// export const OTF_TABLE_CLEAR = 'otf-table-clear';\r\n\r\n// export class LoadOtfTableDatas {\r\n//     static readonly type = OTF_TABLE_LOAD;\r\n \r\n//     constructor(public payload: any) { }\r\n// }\r\n\r\n// // export class LoadOtfTableDatasSuccess {\r\n// //     static readonly type = OTF_TABLE_LOAD_SUCCESS;\r\n \r\n// //     constructor(public payload: any) { }\r\n// // }\r\n\r\n// // export class ChangeAsifTableFilter {\r\n// //     static readonly type = ASIF_TABLE_FILTER_CHANGE;\r\n \r\n// //     constructor(public payload: FilterAsifTableSelected) { }\r\n// // }\r\n\r\n// export class ClearOtfTableDatas {\r\n//     static readonly type = OTF_TABLE_CLEAR;\r\n//     // constructor(public payload: any) { }\r\n// }","import { Datas } from \"app/main/_models/generics/detail-info.model\";\r\nimport { OtfTable } from \"app/main/_models/referential/operation-type-family.model\";\r\nimport { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { OtfService } from \"app/main/apps/referential/operations/operation-type-family/operation-type-family.service\";\r\nimport { LoadOtfTable, ClearOtfTable } from \"./otf-table.action\";\r\nimport { UpdatePaginationOtfTableFilterSelected } from \"./otf-table-filter-selected/otf-table-filter-selected.action\";\r\n\r\nexport class OtfTableStateModel extends Datas<OtfTable[]> {\r\n    constructor () {\r\n        super();\r\n    }\r\n}\r\n\r\nlet tableInfo = new OtfTableStateModel();\r\n@State<OtfTableStateModel>({\r\n    name: 'OtfTable',\r\n    defaults : tableInfo\r\n})\r\n\r\n@Injectable()\r\nexport class OtfTableState extends LoaderState {\r\n    constructor(\r\n        private _otfService: OtfService,\r\n        private _store: Store) {\r\n            super();\r\n    }\r\n\r\n    @Selector()\r\n    static get(state: OtfTableStateModel) {\r\n        return state;\r\n    }\r\n\r\n    @Action(LoadOtfTable)\r\n    LoadOtfTable(context: StateContext<OtfTableStateModel>, action: LoadOtfTable) {\r\n        this.loading(context,'datas');\r\n        \r\n        const state = context.getState();\r\n        state.datas = null;\r\n        context.patchState(state);\r\n\r\n        this._otfService.getOtfTable(action.payload)\r\n            .subscribe(result=> {\r\n                let state = context.getState();\r\n                state.datas = result.datas;\r\n                context.patchState(state);\r\n\r\n                this._store.dispatch(new UpdatePaginationOtfTableFilterSelected(result.pagination));\r\n\r\n                this.loaded(context,'datas');\r\n            });\r\n    }\r\n\r\n    @Action(ClearOtfTable)\r\n    ClearOtfTable(context: StateContext<OtfTableStateModel>) {\r\n        return context.setState(new OtfTableStateModel());\r\n    }\r\n}\r\n\r\n\r\n// import { OtfTable } from \"app/main/_models/referential/operation-type-family.model\";\r\n// import { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\n// import { LoadOtfTableDatas, ClearOtfTableDatas } from \"./operation-type-family-list.action\";\r\n// import { UpdatePaginationOtfTableFilter } from \"../operation-type-family-list-filter/operation-type-family-list-filter.action\";\r\n// import { OtfService } from \"app/main/apps/referential/operations/operation-type-family/operation-type-family.service\";\r\n// import { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\n// import { Datas } from \"app/main/_models/generics/detail-info.model\";\r\n// import { Injectable } from \"@angular/core\";\r\n\r\n// export class OtfTableStateModel extends Datas<OtfTable[]> {\r\n//     constructor () {\r\n//         super();\r\n//     }\r\n// }\r\n\r\n// let tableInfo = new OtfTableStateModel();\r\n// @State<OtfTableStateModel>({\r\n//     name: 'OtfTable',\r\n//     defaults : tableInfo\r\n// })\r\n\r\n// @Injectable()\r\n// export class OtfTableState extends LoaderState {\r\n//     constructor(\r\n//         private _otfService: OtfService,\r\n//         private _store: Store\r\n//         ) {\r\n//             super();\r\n//     }\r\n\r\n//     @Selector()\r\n//     static get(state: OtfTableStateModel) {\r\n//         return state;\r\n//     }\r\n\r\n\r\n//     // async delay(ms: number) {\r\n//     //     await new Promise(resolve => setTimeout(()=>resolve(), ms)).then(()=>console.log(\"fired\"));\r\n//     //   }\r\n\r\n//     @Action(LoadOtfTableDatas)\r\n//     loadGrid(context: StateContext<OtfTableStateModel>, action: LoadOtfTableDatas) {\r\n//         this.loading(context,'datas');\r\n        \r\n//         const state = context.getState();\r\n//         state.datas = null;\r\n//         context.patchState(state);\r\n        \r\n//         this._otfService.getOtfTable(action.payload)\r\n//             .subscribe(result=> {\r\n//                 let state = context.getState();\r\n//                 state.datas = action.payload.datas;\r\n//                 context.patchState(state);\r\n//                 //TODO: a controler\r\n//                 this._store.dispatch(new UpdatePaginationOtfTableFilter(action.payload.pagination));\r\n\r\n//                 this.loaded(context,'datas');\r\n//             });\r\n\r\n//     }\r\n\r\n//     // @Action(LoadOtfTableDatasSuccess)\r\n//     // loadSuccess(context: StateContext<OtfTableStateModel>, action: LoadOtfTableDatasSuccess) {\r\n//     //     let state = context.getState();\r\n//     //     state.datas = action.payload.datas;\r\n//     //     // state.pagination = action.payload.pagination;\r\n\r\n//     //     context.patchState(state);\r\n\r\n\r\n//     //     this._store.dispatch(new UpdatePaginationOtfTableFilter(action.payload.pagination));\r\n//     // }\r\n\r\n//     @Action(ClearOtfTableDatas)\r\n//     clear(context: StateContext<OtfTableStateModel>) {\r\n//         return context.setState(new OtfTableStateModel());\r\n//     }\r\n\r\n\r\n\r\n// }","import { OtDetail } from \"app/main/_models/referential/operation-type.model\";\r\n\r\nexport const OT_DETAIL_LOAD = 'ot-detail-load';\r\nexport const OT_DETAIL_CLEAR = 'ot-detail-clear';\r\n\r\nexport class LoadOtDetail {\r\n    static readonly type = OT_DETAIL_LOAD;\r\n \r\n    constructor(public payload: number) { }\r\n}\r\n\r\nexport class ClearOtDetail {\r\n    static readonly type = OT_DETAIL_CLEAR;\r\n}","import { OtDetail } from \"app/main/_models/referential/operation-type.model\";\r\nimport { State, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { OtService } from \"app/main/apps/referential/operations/operation-type/operation-type.service\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { Datas } from \"app/main/_models/generics/detail-info.model\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { LoadOtDetail, ClearOtDetail } from \"./ot-detail.action\";\r\n\r\nexport class OtDetailStateModel extends Datas<OtDetail> {\r\n    constructor () {\r\n        super();\r\n    }\r\n}\r\n\r\nlet otDetailStateModel = new OtDetailStateModel();\r\n\r\n@State<OtDetailStateModel>({\r\n    name: 'OtDetail',\r\n    defaults : otDetailStateModel\r\n})\r\n\r\n@Injectable()\r\nexport class OtDetailState extends LoaderState {\r\n\r\n    constructor(\r\n        private _otService: OtService\r\n        ) {\r\n            super();\r\n    }\r\n\r\n    @Selector()\r\n    static get(state: OtDetailStateModel) {\r\n        return state;\r\n    }\r\n\r\n    @Action(LoadOtDetail)\r\n    loadOtDetail(context: StateContext<OtDetailStateModel>, action: LoadOtDetail) {\r\n        this.loading(context,'datas');\r\n        \r\n        const state = context.getState();\r\n        state.datas = null;\r\n        context.patchState(state);\r\n\r\n        this._otService.getOtDetail(action.payload)\r\n            .subscribe(result=> {\r\n                let state = context.getState();\r\n                state.datas = result;\r\n                context.patchState(state);\r\n\r\n                this.loaded(context,'datas');\r\n            });\r\n    }\r\n\r\n    @Action(ClearOtDetail)\r\n    clear(context: StateContext<OtDetailStateModel>) {\r\n        return context.setState(new OtDetailStateModel());\r\n    }\r\n\r\n    \r\n    \r\n}","import { Pagination } from \"app/main/_models/pagination.model\";\r\nimport { FilterOtTableSelected } from \"app/main/_models/filters/operation-type.filter\";\r\n\r\nexport const OT_TABLE_FILTER_SELECTED_UPDATE_PAGINATION = 'ot-table-filter-selected-update-pagination';\r\nexport const OT_TABLE_FILTER_SELECTED_CHANGE = 'ot-table-filter-selected-change';\r\n\r\nexport class UpdatePaginationOtTableFilterSelected {\r\n    static readonly type = OT_TABLE_FILTER_SELECTED_UPDATE_PAGINATION;\r\n \r\n    constructor(public payload: Pagination) { }\r\n}\r\n\r\nexport class SynchronizeOtTableFilterSelected {\r\n    static readonly type = OT_TABLE_FILTER_SELECTED_CHANGE;\r\n \r\n    constructor(public payload: FilterOtTableSelected) { }\r\n}\r\n\r\n\r\n\r\n\r\n// import { FilterOtTable, FilterOtTableSelected } from \"app/main/_models/filters/operation-type.filter\";\r\n// import { Pagination } from \"app/main/_models/pagination.model\";\r\n\r\n// export const OT_TABLE_FILTER_LOAD = 'ot-table-filter-load';\r\n// // export const OT_TABLE_FILTER_LOAD_SUCCESS = 'ot-table-filter-load-success';\r\n// export const OT_TABLE_FILTER_CHANGE = 'ot-table-filter-change';\r\n// export const OT_TABLE_FILTER_UPDATE_PAGINATION = 'ot-table-filter-update-pagination';\r\n\r\n// export class LoadOtTableFilter {\r\n//     static readonly type = OT_TABLE_FILTER_LOAD;\r\n \r\n//     constructor(public payload: FilterOtTable) { }\r\n// }\r\n\r\n// // export class LoadOtTableFilterSuccess {\r\n// //     static readonly type = OT_TABLE_FILTER_LOAD_SUCCESS;\r\n \r\n// //     constructor(public payload: FilterOtTable) { }\r\n// // }\r\n\r\n// export class ChangeOtTableFilter {\r\n//     static readonly type = OT_TABLE_FILTER_CHANGE;\r\n \r\n//     constructor(public payload: FilterOtTableSelected) { }\r\n// }\r\n\r\n// export class UpdatePaginationOtTableFilter {\r\n//     static readonly type = OT_TABLE_FILTER_UPDATE_PAGINATION;\r\n \r\n//     constructor(public payload: Pagination) { }\r\n// }","import { FilterSelected } from \"app/main/_models/generics/filter.info.model\";\r\nimport { FilterOtTableSelected } from \"app/main/_models/filters/operation-type.filter\";\r\nimport { State, Selector, Action, StateContext, Store } from \"@ngxs/store\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { LoadOtTable } from \"../ot-table.action\";\r\nimport { UpdatePaginationOtTableFilterSelected, SynchronizeOtTableFilterSelected } from \"./ot-table-filter-selected.action\";\r\n\r\n\r\nexport class OtTableFilterSelectedStateModel extends FilterSelected<FilterOtTableSelected> {\r\n    constructor () {\r\n        super(FilterOtTableSelected);\r\n    }\r\n}\r\n\r\nlet otTableFilterSelectedStateModel = new OtTableFilterSelectedStateModel();\r\n\r\n@State<OtTableFilterSelectedStateModel>({\r\n    name: 'OtTableFilterSelected',\r\n    defaults : otTableFilterSelectedStateModel\r\n})\r\n\r\n@Injectable()\r\nexport class OtTableFilterSelectedState extends LoaderState {\r\n    constructor(\r\n        private _store: Store\r\n        ) {\r\n            super();\r\n    }\r\n\r\n    // async delay(ms: number) {\r\n    //     await new Promise(resolve => setTimeout(()=>resolve(), ms)).then(()=>console.log(\"fired\"));\r\n    //   }\r\n\r\n    @Selector()\r\n    static get(state: OtTableFilterSelectedStateModel) {\r\n        return state;\r\n    }\r\n       \r\n\r\n    @Action(UpdatePaginationOtTableFilterSelected)\r\n    UpdatePaginationOtTableFilterSelected(context: StateContext<OtTableFilterSelectedStateModel>, action: UpdatePaginationOtTableFilterSelected) {\r\n        let state = context.getState();\r\n        state.selected.pagination = action.payload;\r\n        context.patchState(state);\r\n    }\r\n\r\n    @Action(SynchronizeOtTableFilterSelected)\r\n    SynchronizeOtTableFilterSelected(context: StateContext<OtTableFilterSelectedStateModel>, action: SynchronizeOtTableFilterSelected) {\r\n        this.loading(context,'filter-selected');\r\n        let state = context.getState();\r\n        state.selected = action.payload;\r\n        context.patchState(state);\r\n        this.loaded(context,'filter-selected');\r\n\r\n        this._store.dispatch(new LoadOtTable(action.payload));\r\n    }\r\n\r\n}\r\n\r\n\r\n// import { FilterInfo } from \"app/main/_models/generics/filter.info.model\";\r\n// import { FilterOtTable } from \"app/main/_models/filters/operation-type.filter\";\r\n// import { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\n// import { LoadOtTableFilter, ChangeOtTableFilter, UpdatePaginationOtTableFilter } from \"./operation-type-list-filter.action\";\r\n// import { LoadOtTableDatas } from \"../operation-type-list/operation-type-list.action\";\r\n// import { OtService } from \"app/main/apps/referential/operations/operation-type/operation-type.service\";\r\n// import { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\n// import { Injectable } from \"@angular/core\";\r\n\r\n// export class OtTableFilterStateModel extends FilterInfo<FilterOtTable> {\r\n//     constructor () {\r\n//         super(FilterOtTable);\r\n//     }\r\n// }\r\n\r\n// let otTableFilterStateModel = new OtTableFilterStateModel();\r\n\r\n// @State<OtTableFilterStateModel>({\r\n//     name: 'OtTableFilter',\r\n//     defaults : otTableFilterStateModel\r\n// })\r\n\r\n// @Injectable()\r\n// export class OtTableFilterState extends LoaderState {\r\n\r\n//     constructor(\r\n//         private _otService: OtService,\r\n//         private _store: Store\r\n//         ) {\r\n//             super();\r\n//     }\r\n\r\n//     @Selector()\r\n//     static get(state: OtTableFilterStateModel) {\r\n \r\n//         return state;\r\n//     }\r\n\r\n//     @Action(LoadOtTableFilter)\r\n//     loadOtfTableFilter(context: StateContext<OtTableFilterStateModel>, action: LoadOtTableFilter) {\r\n//         this.loading(context,'filters');\r\n        \r\n//         const state = context.getState();\r\n//         state.filters = null;\r\n//         context.patchState(state);\r\n\r\n//         this._otService.getOtTableFilter(action.payload.selected)\r\n//             .subscribe(result=> {\r\n//                 //conserver le payload\r\n//                 let payload = JSON.parse(JSON.stringify(action.payload.selected));\r\n//                 let state = context.getState();\r\n//                 state.filters = result;\r\n//                 context.patchState(state);\r\n                \r\n//                 //TODO: a controler\r\n//                 context.dispatch(new ChangeOtTableFilter(payload));\r\n\r\n//                 this.loaded(context,'filters');\r\n//             });\r\n\r\n//     }\r\n\r\n//     // @Action(LoadOtTableFilterSuccess)\r\n//     // loadSuccess(context: StateContext<OtTableFilterStateModel>, action: LoadOtTableFilterSuccess) {\r\n        \r\n//     //     //conserver le payload\r\n//     //     let payload = JSON.parse(JSON.stringify(action.payload.selected));\r\n\r\n//     //     let state = context.getState();\r\n//     //     state.filters = action.payload;\r\n\r\n//     //     context.patchState(state);\r\n        \r\n//     //     context.dispatch(new ChangeOtTableFilter(payload));\r\n        \r\n//     // }\r\n\r\n//     @Action(ChangeOtTableFilter)\r\n//     changeFilter(context: StateContext<OtTableFilterStateModel>, action: ChangeOtTableFilter) {\r\n        \r\n//         this._store.dispatch(new LoadOtTableDatas(action.payload));\r\n\r\n//      }\r\n\r\n//     @Action(UpdatePaginationOtTableFilter)\r\n//     UpdatePaginationOtTableFilter(context: StateContext<OtTableFilterStateModel>, action: UpdatePaginationOtTableFilter) {\r\n//         const state = context.getState();\r\n        \r\n//         state.filters.selected.pagination = action.payload;\r\n\r\n//         context.patchState(state);\r\n\r\n//     }\r\n\r\n// }","import { FilterOtTableSelected } from \"app/main/_models/filters/operation-type.filter\";\r\n\r\nexport const OT_TABLE_FILTER_SELECTION_LOAD = 'ot-table-filter-selection-load';\r\n\r\nexport class LoadOtTableFilterSelection {\r\n    static readonly type = OT_TABLE_FILTER_SELECTION_LOAD;\r\n \r\n    constructor(public payload: FilterOtTableSelected) { }\r\n}","import { OtService } from \"app/main/apps/referential/operations/operation-type/operation-type.service\";\r\nimport { FilterSelection } from \"app/main/_models/generics/filter.info.model\";\r\nimport { FilterOtTableSelection } from \"app/main/_models/filters/operation-type.filter\";\r\nimport { State, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { LoadOtTableFilterSelection } from \"./ot-table-filter-selection.action\";\r\n\r\nexport class OtTableFilterSelectionStateModel extends FilterSelection<FilterOtTableSelection> {\r\n    constructor () {\r\n        super(FilterOtTableSelection);\r\n    }\r\n}\r\n\r\nlet otTableFilterSelectionStateModel = new OtTableFilterSelectionStateModel();\r\n\r\n@State<OtTableFilterSelectionStateModel>({\r\n    name: 'OtTableFilterSelection',\r\n    defaults : otTableFilterSelectionStateModel\r\n})\r\n\r\n@Injectable()\r\nexport class OtTableFilterSelectionState extends LoaderState {\r\n\r\n    constructor(\r\n        private _otService: OtService\r\n        ) {\r\n            super();\r\n    }\r\n\r\n    // async delay(ms: number) {\r\n    //     await new Promise(resolve => setTimeout(()=>resolve(), ms)).then(()=>console.log(\"fired\"));\r\n    // }\r\n\r\n    @Selector()\r\n    static get(state: OtTableFilterSelectionStateModel) {\r\n        return state;\r\n    }\r\n\r\n    @Action(LoadOtTableFilterSelection)\r\n    LoadOtTableFilterSelection(context: StateContext<OtTableFilterSelectionStateModel>, action: LoadOtTableFilterSelection) {\r\n        this.loading(context,'filter-selection');\r\n        \r\n        const state = context.getState();\r\n        state.selection = null;\r\n        context.patchState(state);\r\n\r\n        this._otService.getOtTableFilter(action.payload)\r\n            .subscribe(result=> {\r\n                let state = context.getState();\r\n                state.selection = result;\r\n                context.patchState(state);\r\n\r\n                this.loaded(context,'filter-selection');\r\n            });\r\n\r\n    }\r\n\r\n}","\r\nexport const OT_TABLE_LOAD = 'ot-table-load';\r\nexport const OT_TABLE_CLEAR = 'ot-table-clear';\r\n\r\nexport class LoadOtTable {\r\n    static readonly type = OT_TABLE_LOAD;\r\n \r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class ClearOtTable {\r\n    static readonly type = OT_TABLE_CLEAR;\r\n}\r\n\r\n// export const OT_TABLE_LOAD = 'ot-table-load';\r\n// // export const OT_TABLE_LOAD_SUCCESS = 'ot-table-load-success';\r\n// export const OT_TABLE_FILTER_CHANGE = 'ot-table-filter-change';\r\n// export const OT_TABLE_CLEAR = 'ot-table-clear';\r\n\r\n// export class LoadOtTableDatas {\r\n//     static readonly type = OT_TABLE_LOAD;\r\n \r\n//     constructor(public payload: any) { }\r\n// }\r\n\r\n// // export class LoadOtTableDatasSuccess {\r\n// //     static readonly type = OT_TABLE_LOAD_SUCCESS;\r\n \r\n// //     constructor(public payload: any) { }\r\n// // }\r\n\r\n// export class ClearOtTableDatas {\r\n//     static readonly type = OT_TABLE_CLEAR;\r\n// }","import { Datas } from \"app/main/_models/generics/detail-info.model\";\r\nimport { OtTable } from \"app/main/_models/referential/operation-type.model\";\r\nimport { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { OtService } from \"app/main/apps/referential/operations/operation-type/operation-type.service\";\r\nimport { LoadOtTable, ClearOtTable } from \"./ot-table.action\";\r\nimport { UpdatePaginationOtTableFilterSelected } from \"./ot-table-filter-selected/ot-table-filter-selected.action\";\r\n\r\nexport class OtTableStateModel extends Datas<OtTable[]> {\r\n    constructor () {\r\n        super();\r\n    }\r\n}\r\n\r\nlet tableInfo = new OtTableStateModel();\r\n@State<OtTableStateModel>({\r\n    name: 'OtTable',\r\n    defaults : tableInfo\r\n})\r\n\r\n@Injectable()\r\nexport class OtTableState extends LoaderState {\r\n    constructor(\r\n        private _otService: OtService,\r\n        private _store: Store) {\r\n            super();\r\n    }\r\n\r\n    @Selector()\r\n    static get(state: OtTableStateModel) {\r\n        return state;\r\n    }\r\n\r\n    @Action(LoadOtTable)\r\n    loadGrid(context: StateContext<OtTableStateModel>, action: LoadOtTable) {\r\n        this.loading(context,'datas');\r\n        \r\n        const state = context.getState();\r\n        state.datas = null;\r\n        context.patchState(state);\r\n\r\n        this._otService.getOtTable(action.payload)\r\n            .subscribe(result=> {\r\n                let state = context.getState();\r\n                state.datas = result.datas;\r\n                context.patchState(state);\r\n                //TODO a controler\r\n                this._store.dispatch(new UpdatePaginationOtTableFilterSelected(result.pagination));\r\n\r\n                this.loaded(context,'datas');\r\n            });\r\n    }\r\n\r\n    @Action(ClearOtTable)\r\n    clear(context: StateContext<OtTableStateModel>) {\r\n        return context.setState(new OtTableStateModel());\r\n    }\r\n}\r\n\r\n// import { OtTable } from \"app/main/_models/referential/operation-type.model\";\r\n// import { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\n// import { LoadOtTableDatas, ClearOtTableDatas } from \"./operation-type-list.action\";\r\n// import { UpdatePaginationOtTableFilter } from \"../operation-type-list-filter/operation-type-list-filter.action\";\r\n// import { OtService } from \"app/main/apps/referential/operations/operation-type/operation-type.service\";\r\n// import { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\n// import { Datas } from \"app/main/_models/generics/detail-info.model\";\r\n// import { Injectable } from \"@angular/core\";\r\n\r\n// export class OtTableStateModel extends Datas<OtTable[]> {\r\n//     constructor () {\r\n//         super();\r\n//     }\r\n// }\r\n\r\n// let tableInfo = new OtTableStateModel();\r\n// @State<OtTableStateModel>({\r\n//     name: 'OtTable',\r\n//     defaults : tableInfo\r\n// })\r\n\r\n// @Injectable()\r\n// export class OtTableState extends LoaderState {\r\n//     constructor(\r\n//         private _otService: OtService,\r\n//         private _store: Store\r\n//         ) {\r\n//             super();\r\n//     }\r\n\r\n//     @Selector()\r\n//     static get(state: OtTableStateModel) {\r\n//         return state;\r\n//     }\r\n\r\n//     @Action(LoadOtTableDatas)\r\n//     loadGrid(context: StateContext<OtTableStateModel>, action: LoadOtTableDatas) {\r\n//         this.loading(context,'datas');\r\n        \r\n//         const state = context.getState();\r\n//         state.datas = null;\r\n//         context.patchState(state);\r\n        \r\n//         this._otService.getOtTable(action.payload)\r\n//             .subscribe(result=> {\r\n//                 let state = context.getState();\r\n//                 state.datas = result;\r\n//                 context.patchState(state);\r\n//                 //TODO: a controler\r\n//                 this._store.dispatch(new UpdatePaginationOtTableFilter(action.payload.pagination));\r\n            \r\n//                 this.loaded(context,'datas');\r\n//             });\r\n//     }\r\n\r\n//     // @Action(LoadOtTableDatasSuccess)\r\n//     // loadSuccess(context: StateContext<OtTableStateModel>, action: LoadOtTableDatasSuccess) {\r\n//     //     let state = context.getState();\r\n//     //     state.datas = action.payload.datas;\r\n\r\n//     //     context.patchState(state);\r\n\r\n\r\n//     //     this._store.dispatch(new UpdatePaginationOtTableFilter(action.payload.pagination));\r\n//     // }\r\n\r\n//     @Action(ClearOtTableDatas)\r\n//     clear(context: StateContext<OtTableStateModel>) {\r\n//         return context.setState(new OtTableStateModel());\r\n//     }\r\n\r\n\r\n\r\n// }","import { OperationForDetail } from \"app/main/_models/referential/operation.model\";\r\n\r\nexport const OPERATION_DETAIL_FILTER_LOAD = 'operation-detail--filter-load';\r\nexport const OPERATION_DETAIL_FILTER_CLEAR = 'operation-detail-filter-clear';\r\n\r\nexport class LoadOperationDetailFilter {\r\n    static readonly type = OPERATION_DETAIL_FILTER_LOAD;\r\n \r\n    constructor(public payload: OperationForDetail) { }\r\n}\r\n\r\nexport class ClearOperationDetailFilter {\r\n    static readonly type = OPERATION_DETAIL_FILTER_CLEAR;\r\n}","import { DataInfo } from \"app/main/_models/generics/detail-info.model\";\r\nimport { FilterOperationDetail } from \"app/main/_models/filters/operation.filter\";\r\nimport { State, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { ReferentialService } from \"app/main/_services/Referential/referential.service\";\r\nimport { LoadOperationDetailFilter, ClearOperationDetailFilter } from \"./operation-detail-filter.action\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { OperationService } from \"app/main/_services/Referential/operation.service\";\r\n\r\nexport class OperationDetailFilterStateModel extends DataInfo<FilterOperationDetail> {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nlet operationDetailFilterStateModel = new OperationDetailFilterStateModel();\r\n@State<OperationDetailFilterStateModel>({\r\n    name: 'OperationDetailFilter',\r\n    defaults: operationDetailFilterStateModel\r\n})\r\n@Injectable()\r\nexport class OperationDetailFilterState extends LoaderState {\r\n    constructor(\r\n        private _operationService: OperationService\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    @Selector()\r\n    static get(state: OperationDetailFilterStateModel) {\r\n        return state;\r\n    }\r\n\r\n    async delay(ms: number) {\r\n        await new Promise(resolve => setTimeout(() => resolve(), ms)).then(() => console.log(\"fired\"));\r\n    }\r\n\r\n    @Action(LoadOperationDetailFilter)\r\n    LoadOperationDetailFilter(context: StateContext<OperationDetailFilterStateModel>, action: LoadOperationDetailFilter) {\r\n        this.loading(context,'datas');\r\n        \r\n        const state = context.getState();\r\n        state.datas = null;\r\n        context.patchState(state);\r\n        \r\n        this._operationService.getDetailFilter(action.payload)\r\n            .subscribe(result => {\r\n                let state = context.getState();\r\n                state.datas = result;\r\n                context.patchState(state);\r\n                \r\n                this.loaded(context,'datas');\r\n            });\r\n    }\r\n\r\n    @Action(ClearOperationDetailFilter)\r\n    ClearOperationDetailFilter(context: StateContext<OperationDetailFilterStateModel>) {\r\n        return context.setState(new OperationDetailFilterStateModel());\r\n    }\r\n}","import { OperationForDetail } from \"app/main/_models/referential/operation.model\";\r\nimport { FilterDetail } from \"app/main/_models/filters/shared/filterDetail.filter\";\r\n\r\nexport const OPERATION_DETAIL_LOAD = 'operation-detail-load';\r\nexport const OPERATION_DETAIL_SYNCHRONIZE = 'operation-detail-synchronize';\r\nexport const OPERATION_DETAIL_CLEAR = 'operation-detail-clear';\r\n\r\nexport class LoadOperationDetail {\r\n    static readonly type = OPERATION_DETAIL_LOAD;\r\n    \r\n    constructor(public payload: FilterDetail) { }\r\n}\r\n\r\nexport class SynchronizeOperationDetail {\r\n    static readonly type = OPERATION_DETAIL_SYNCHRONIZE;\r\n\r\n    constructor(public payload: OperationForDetail) { }\r\n}\r\n\r\nexport class ClearOperationDetail {\r\n    static readonly type = OPERATION_DETAIL_CLEAR;\r\n}\r\n\r\n// export const OPERATION_DETAIL_LOAD = 'operation-detail-load';\r\n// export const OPERATION_DETAIL_CLEAR = 'operation-detail-clear';\r\n\r\n// export class LoadOperationDetail {\r\n//     static readonly type = OPERATION_DETAIL_LOAD;\r\n \r\n//     constructor(public payload: number) { }\r\n// }\r\n\r\n// export class ClearOperationDetail {\r\n//     static readonly type = OPERATION_DETAIL_CLEAR;\r\n// }","import { DetailInfo } from \"app/main/_models/generics/detail-info.model\";\r\nimport { OperationForDetail } from \"app/main/_models/referential/operation.model\";\r\nimport { FilterDetail } from \"app/main/_models/filters/shared/filterDetail.filter\";\r\nimport { State, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { ReferentialService } from \"app/main/_services/Referential/referential.service\";\r\nimport { LoadOperationDetail, SynchronizeOperationDetail, ClearOperationDetail } from \"./operation-detail.action\";\r\nimport { LoadOperationDetailFilter } from \"./operation-detail-filter/operation-detail-filter.action\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { OperationService } from \"app/main/_services/Referential/operation.service\";\r\n\r\nexport class OperationDetailStateModel extends DetailInfo<OperationForDetail, FilterDetail> {\r\n    constructor () {\r\n        super();\r\n        this.filter = new FilterDetail();\r\n    }\r\n}\r\n\r\nlet detailInfo = new OperationDetailStateModel();\r\n@State<OperationDetailStateModel>({\r\n    name: 'OperationDetail',\r\n    defaults : detailInfo\r\n})\r\n@Injectable()\r\nexport class OperationDetailState extends LoaderState {\r\n    constructor(\r\n        private _operationService: OperationService\r\n    ) \r\n    {\r\n        super();\r\n        \r\n    }\r\n\r\n    //fonction delay (test asynchro)\r\n    async delay(ms: number) {\r\n        await new Promise(resolve => setTimeout(()=>resolve(), ms)).then(()=>console.log(\"fired\"));\r\n    }\r\n\r\n    @Selector() static get(state: OperationDetailStateModel) { return state;  }\r\n    @Selector() static getFilter(state: OperationDetailStateModel) { return state.filter; }\r\n\r\n    @Action(LoadOperationDetail)\r\n    load(context: StateContext<OperationDetailStateModel>, action: LoadOperationDetail) {\r\n        \r\n        this.loading(context,'datas');\r\n        const state = context.getState();\r\n\r\n        state.filter = action.payload;\r\n        state.datas = null;\r\n\r\n        context.patchState(state);\r\n        \r\n        this._operationService.getForDetail(action.payload)\r\n            .subscribe(result=> {\r\n                let state = context.getState();\r\n                state.datas = result;\r\n                context.patchState(state);\r\n\r\n                this.loaded(context,'datas');\r\n\r\n                //chargement des filtres associés\r\n                context.dispatch(new LoadOperationDetailFilter(state.datas));\r\n            });\r\n    }\r\n\r\n    @Action(SynchronizeOperationDetail)\r\n    synchronize(context: StateContext<OperationDetailStateModel>, action: SynchronizeOperationDetail) {\r\n        let state = context.getState();\r\n        context.patchState(state);\r\n    }\r\n\r\n    @Action(ClearOperationDetail)\r\n    clear(context: StateContext<OperationDetailStateModel>) {\r\n        return context.setState(new OperationDetailStateModel());\r\n    }\r\n}\r\n\r\n// import { OperationForDetail } from \"app/main/_models/referential/operation.model\";\r\n// import { State, Action, Selector, StateContext } from \"@ngxs/store\";\r\n// import { OperationService } from \"app/main/_services/Referential/operation.service\";\r\n// import { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\n// import { Datas } from \"app/main/_models/generics/detail-info.model\";\r\n// import { Injectable } from \"@angular/core\";\r\n// import { ClearOperationDetail, LoadOperationDetail } from \"./operation-detail.action\";\r\n\r\n// export class OperationDetailStateModel extends Datas<OperationForDetail> {\r\n//     constructor () {\r\n//         super();\r\n//     }\r\n// }\r\n\r\n// let operationDetailStateModel = new OperationDetailStateModel();\r\n\r\n// @State<OperationDetailStateModel>({\r\n//     name: 'OperationDetail',\r\n//     defaults : operationDetailStateModel\r\n// })\r\n\r\n// @Injectable()\r\n// export class OperationDetailState extends LoaderState {\r\n\r\n//     constructor(\r\n//         private _OperationService: OperationService\r\n//         ) {\r\n//             super();\r\n//     }\r\n\r\n//     @Selector()\r\n//     static get(state: OperationDetailStateModel) {\r\n//         return state;\r\n//     }\r\n\r\n//     @Action(LoadOperationDetail)\r\n//     LoadOperationDetail(context: StateContext<OperationDetailStateModel>, action: LoadOperationDetail) {\r\n//         this.loading(context,'datas');\r\n        \r\n//         const state = context.getState();\r\n//         state.datas = null;\r\n//         context.patchState(state);\r\n\r\n//         this._OperationService.getDetail(action.payload)\r\n//             .subscribe(result=> {\r\n//                 let state = context.getState();\r\n//                 state.datas = result;\r\n//                 context.patchState(state);\r\n\r\n//                 this.loaded(context,'datas');\r\n//             });\r\n\r\n//     }\r\n\r\n//     @Action(ClearOperationDetail)\r\n//     ClearOperationDetail(context: StateContext<OperationDetailStateModel>) {\r\n//         return context.setState(new OperationDetailStateModel());\r\n//     }\r\n\r\n    \r\n    \r\n// }","import { Pagination } from \"app/main/_models/pagination.model\";\r\nimport { FilterOperationTableSelected } from \"app/main/_models/filters/operation.filter\";\r\n\r\nexport const OPERATION_TABLE_FILTER_SELECTED_UPDATE_PAGINATION = 'operation-table-filter-selected-update-pagination';\r\nexport const OPERATION_TABLE_FILTER_SELECTED_CHANGE = 'operation-table-filter-selected-change';\r\n\r\nexport class UpdatePaginationOperationTableFilterSelected {\r\n    static readonly type = OPERATION_TABLE_FILTER_SELECTED_UPDATE_PAGINATION;\r\n \r\n    constructor(public payload: Pagination) { }\r\n}\r\n\r\nexport class SynchronizeOperationTableFilterSelected {\r\n    static readonly type = OPERATION_TABLE_FILTER_SELECTED_CHANGE;\r\n \r\n    constructor(public payload: FilterOperationTableSelected) { }\r\n}\r\n\r\n// import { Pagination } from \"app/main/_models/pagination.model\";\r\n// import { FilterOperationTable, FilterOperationTableSelected } from \"app/main/_models/filters/operation.filter\";\r\n\r\n// export const OPERATION_TABLE_FILTER_LOAD = 'operation-table-filter-load';\r\n// // export const OPERATION_TABLE_FILTER_LOAD_SUCCESS = 'operation-table-filter-load-success';\r\n// export const OPERATION_TABLE_FILTER_CHANGE = 'operation-table-filter-change';\r\n// export const OPERATION_TABLE_FILTER_UPDATE_PAGINATION = 'operation-table-filter-update-pagination';\r\n\r\n// export class LoadOperationTableFilter {\r\n//     static readonly type = OPERATION_TABLE_FILTER_LOAD;\r\n \r\n//     constructor(public payload: FilterOperationTable) { }\r\n// }\r\n\r\n// // export class LoadOperationTableFilterSuccess {\r\n// //     static readonly type = OPERATION_TABLE_FILTER_LOAD_SUCCESS;\r\n \r\n// //     constructor(public payload: FilterOperationTable) { }\r\n// // }\r\n\r\n// export class ChangeOperationTableFilter {\r\n//     static readonly type = OPERATION_TABLE_FILTER_CHANGE;\r\n \r\n//     constructor(public payload: FilterOperationTableSelected) { }\r\n// }\r\n\r\n// export class UpdatePaginationOperationTableFilter {\r\n//     static readonly type = OPERATION_TABLE_FILTER_UPDATE_PAGINATION;\r\n \r\n//     constructor(public payload: Pagination) { }\r\n// }","import { FilterSelected } from \"app/main/_models/generics/filter.info.model\";\r\nimport { FilterOperationTableSelected } from \"app/main/_models/filters/operation.filter\";\r\nimport { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { UpdatePaginationOperationTableFilterSelected, SynchronizeOperationTableFilterSelected } from \"./operation-table-filter-selected.action\";\r\nimport { LoadOperationTable } from \"../operation-table.action\";\r\n\r\nexport class OperationTableFilterSelectedStateModel extends FilterSelected<FilterOperationTableSelected> {\r\n    constructor () {\r\n        super(FilterOperationTableSelected);\r\n    }\r\n}\r\n\r\nlet operationTableFilterSelectedStateModel = new OperationTableFilterSelectedStateModel();\r\n\r\n@State<OperationTableFilterSelectedStateModel>({\r\n    name: 'OperationTableFilterSelected',\r\n    defaults : operationTableFilterSelectedStateModel\r\n})\r\n\r\n@Injectable()\r\nexport class OperationTableFilterSelectedState extends LoaderState {\r\n    constructor(\r\n        private _store: Store\r\n        ) {\r\n            super();\r\n    }\r\n\r\n    // async delay(ms: number) {\r\n    //     await new Promise(resolve => setTimeout(()=>resolve(), ms)).then(()=>console.log(\"fired\"));\r\n    //   }\r\n\r\n    @Selector()\r\n    static get(state: OperationTableFilterSelectedStateModel) {\r\n        return state;\r\n    }\r\n       \r\n\r\n    @Action(UpdatePaginationOperationTableFilterSelected)\r\n    UpdatePaginationOperationTableFilterSelected(context: StateContext<OperationTableFilterSelectedStateModel>, action: UpdatePaginationOperationTableFilterSelected) {\r\n        this.loading(context,'filter-selected');\r\n\r\n        let state = context.getState();\r\n        state.selected.pagination = action.payload;\r\n        context.patchState(state);\r\n\r\n        this.loaded(context,'filter-selected');\r\n    }\r\n\r\n    @Action(SynchronizeOperationTableFilterSelected)\r\n    SynchronizeOperationTableFilterSelected(context: StateContext<OperationTableFilterSelectedStateModel>, action: SynchronizeOperationTableFilterSelected) {\r\n        this.loading(context,'filter-selected');\r\n        \r\n        let state = context.getState();\r\n        state.selected = action.payload;\r\n        context.patchState(state);\r\n\r\n        this.loaded(context,'filter-selected');\r\n\r\n        this._store.dispatch(new LoadOperationTable(action.payload));\r\n    }\r\n\r\n}\r\n\r\n\r\n// import { FilterInfo } from \"app/main/_models/generics/filter.info.model\";\r\n// import { FilterOperationTable } from \"app/main/_models/filters/operation.filter\";\r\n// import { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\n// import { OperationService } from \"app/main/_services/Referential/operation.service\";\r\n// import { LoadOperationTableFilter, ChangeOperationTableFilter, UpdatePaginationOperationTableFilter } from \"./operation-list-filter.action\";\r\n// import { LoadOperationTableDatas } from \"../operation-list/operation-list.action\";\r\n// import { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\n// import { Injectable } from \"@angular/core\";\r\n\r\n// export class OperationTableFilterStateModel extends FilterInfo<FilterOperationTable> {\r\n//     constructor () {\r\n//         super(FilterOperationTable);\r\n//     }\r\n// }\r\n\r\n// let operationTableFilterStateModel = new OperationTableFilterStateModel();\r\n\r\n// @State<OperationTableFilterStateModel>({\r\n//     name: 'OperationTableFilter',\r\n//     defaults : operationTableFilterStateModel\r\n// })\r\n\r\n// @Injectable()\r\n// export class OperationTableFilterState extends LoaderState {\r\n\r\n//     constructor(\r\n//         private _operationService: OperationService,\r\n//         private _store: Store\r\n//         ) {\r\n//             super();\r\n//     }\r\n\r\n//     @Selector()\r\n//     static get(state: OperationTableFilterStateModel) {\r\n \r\n//         return state;\r\n//     }\r\n\r\n//     @Action(LoadOperationTableFilter)\r\n//     loadOperationfTableFilter(context: StateContext<OperationTableFilterStateModel>, action: LoadOperationTableFilter) {\r\n//         this.loading(context,'filters');\r\n        \r\n//         const state = context.getState();\r\n//         state.filters = null;\r\n//         context.patchState(state);\r\n\r\n//         this._operationService.getTableFilter(action.payload.selected)\r\n//             .subscribe(result=> {\r\n//                 //conserver le payload\r\n//                 let payload = JSON.parse(JSON.stringify(action.payload.selected));\r\n//                 let state = context.getState();\r\n//                 state.filters = result;\r\n//                 context.patchState(state);\r\n//                 //TODO: a controler\r\n//                 context.dispatch(new ChangeOperationTableFilter(payload));\r\n\r\n//                 this.loaded(context,'filters');\r\n//             });\r\n//     }\r\n\r\n//     // @Action(LoadOperationTableFilterSuccess)\r\n//     // loadSuccess(context: StateContext<OperationTableFilterStateModel>, action: LoadOperationTableFilterSuccess) {\r\n        \r\n//     //     //conserver le payload\r\n//     //     let payload = JSON.parse(JSON.stringify(action.payload.selected));\r\n\r\n//     //     let state = context.getState();\r\n//     //     state.filters = action.payload;\r\n\r\n//     //     context.patchState(state);\r\n        \r\n//     //     context.dispatch(new ChangeOperationTableFilter(payload));\r\n        \r\n//     // }\r\n\r\n//     @Action(ChangeOperationTableFilter)\r\n//     changeFilter(context: StateContext<OperationTableFilterStateModel>, action: ChangeOperationTableFilter) {\r\n        \r\n//         this._store.dispatch(new LoadOperationTableDatas(action.payload));\r\n\r\n//      }\r\n\r\n//     @Action(UpdatePaginationOperationTableFilter)\r\n//     UpdatePaginationOperationTableFilter(context: StateContext<OperationTableFilterStateModel>, action: UpdatePaginationOperationTableFilter) {\r\n//         const state = context.getState();\r\n        \r\n//         state.filters.selected.pagination = action.payload;\r\n\r\n//         context.patchState(state);\r\n\r\n//     }\r\n// }","import { FilterOperationTableSelected } from \"app/main/_models/filters/operation.filter\";\r\n\r\nexport const OPERATION_TABLE_FILTER_SELECTION_LOAD = 'operation-table-filter-selection-load';\r\n\r\nexport class LoadOperationTableFilterSelection {\r\n    static readonly type = OPERATION_TABLE_FILTER_SELECTION_LOAD;\r\n \r\n    constructor(public payload: FilterOperationTableSelected) { }\r\n}","import { FilterSelection } from \"app/main/_models/generics/filter.info.model\";\r\nimport { FilterOperationTableSelection } from \"app/main/_models/filters/operation.filter\";\r\nimport { State, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { LoadOperationTableFilterSelection } from \"./operation-table-filter-selection.state\";\r\nimport { OperationService } from \"app/main/_services/Referential/operation.service\";\r\n\r\nexport class OperationTableFilterSelectionStateModel extends FilterSelection<FilterOperationTableSelection> {\r\n    constructor () {\r\n        super(FilterOperationTableSelection);\r\n    }\r\n}\r\n\r\nlet operationTableFilterSelectionStateModel = new OperationTableFilterSelectionStateModel();\r\n\r\n@State<OperationTableFilterSelectionStateModel>({\r\n    name: 'OperationTableFilterSelection',\r\n    defaults : operationTableFilterSelectionStateModel\r\n})\r\n\r\n@Injectable()\r\nexport class OperationTableFilterSelectionState extends LoaderState {\r\n\r\n    constructor(\r\n        private _operationService: OperationService\r\n        ) {\r\n            super();\r\n    }\r\n\r\n    // async delay(ms: number) {\r\n    //     await new Promise(resolve => setTimeout(()=>resolve(), ms)).then(()=>console.log(\"fired\"));\r\n    // }\r\n\r\n    @Selector()\r\n    static get(state: OperationTableFilterSelectionStateModel) {\r\n        return state;\r\n    }\r\n\r\n    @Action(LoadOperationTableFilterSelection)\r\n    LoadOperationTableFilterSelection(context: StateContext<OperationTableFilterSelectionStateModel>, action: LoadOperationTableFilterSelection) {\r\n        this.loading(context,'filter-selection');\r\n        \r\n        const state = context.getState();\r\n        state.selection = null;\r\n        context.patchState(state);\r\n\r\n        this._operationService.getOperationTableFilter(action.payload)\r\n            .subscribe(result=> {\r\n                let state = context.getState();\r\n                state.selection = result;\r\n                context.patchState(state);\r\n\r\n                this.loaded(context,'filter-selection');\r\n            });\r\n\r\n    }\r\n\r\n}","\r\nexport const OPERATION_TABLE_LOAD = 'operation-table-load';\r\nexport const OPERATION_TABLE_CLEAR = 'operation-table-clear';\r\n\r\nexport class LoadOperationTable {\r\n    static readonly type = OPERATION_TABLE_LOAD;\r\n \r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class ClearOperationTable {\r\n    static readonly type = OPERATION_TABLE_CLEAR;\r\n}\r\n\r\n\r\n// export const OPERATION_TABLE_LOAD = 'operation-table-load';\r\n// // export const OPERATION_TABLE_LOAD_SUCCESS = 'operation-table-load-success';\r\n// export const OPERATION_TABLE_FILTER_CHANGE = 'operation-table-filter-change';\r\n// export const OPERATION_TABLE_CLEAR = 'operation-table-clear';\r\n\r\n// export class LoadOperationTableDatas {\r\n//     static readonly type = OPERATION_TABLE_LOAD;\r\n \r\n//     constructor(public payload: any) { }\r\n// }\r\n\r\n// // export class LoadOperationTableDatasSuccess {\r\n// //     static readonly type = OPERATION_TABLE_LOAD_SUCCESS;\r\n \r\n// //     constructor(public payload: any) { }\r\n// // }\r\n\r\n// export class ClearOperationTableDatas {\r\n//     static readonly type = OPERATION_TABLE_CLEAR;\r\n// }","import { Datas } from \"app/main/_models/generics/detail-info.model\";\r\nimport { OperationTable } from \"app/main/_models/referential/operation.model\";\r\nimport { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { OperationService } from \"app/main/_services/Referential/operation.service\";\r\nimport { LoadOperationTable, ClearOperationTable } from \"./operation-table.action\";\r\nimport { UpdatePaginationOperationTableFilterSelected } from \"./operation-table-filter-selected/operation-table-filter-selected.action\";\r\n\r\nexport class OperationTableStateModel extends Datas<OperationTable[]> {\r\n    constructor () {\r\n        super();\r\n    }\r\n}\r\n\r\nlet tableInfo = new OperationTableStateModel();\r\n@State<OperationTableStateModel>({\r\n    name: 'OperationTable',\r\n    defaults : tableInfo\r\n})\r\n\r\n@Injectable()\r\nexport class OperationTableState extends LoaderState {\r\n    constructor(\r\n        private _operationService: OperationService,\r\n        private _store: Store) {\r\n            super();\r\n    }\r\n\r\n    @Selector()\r\n    static get(state: OperationTableStateModel) {\r\n        return state;\r\n    }\r\n\r\n    @Action(LoadOperationTable)\r\n    LoadOperationTable(context: StateContext<OperationTableStateModel>, action: LoadOperationTable) {\r\n        this.loading(context,'datas');\r\n        \r\n        const state = context.getState();\r\n        state.datas = null;\r\n        context.patchState(state);\r\n\r\n        this._operationService.getOperationTable(action.payload)\r\n            .subscribe(result=> {\r\n                let state = context.getState();\r\n                state.datas = result.datas;\r\n                context.patchState(state);\r\n\r\n                this._store.dispatch(new UpdatePaginationOperationTableFilterSelected(result.pagination));\r\n\r\n                this.loaded(context,'datas');\r\n            });\r\n    }\r\n\r\n    @Action(ClearOperationTable)\r\n    clear(context: StateContext<OperationTableStateModel>) {\r\n        return context.setState(new OperationTableStateModel());\r\n    }\r\n}\r\n\r\n\r\n// import { OperationTable } from \"app/main/_models/referential/operation.model\";\r\n// import { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\n// import { OperationService } from \"app/main/_services/Referential/operation.service\";\r\n// import { LoadOperationTableDatas, ClearOperationTableDatas } from \"./operation-list.action\";\r\n// import { UpdatePaginationOperationTableFilter } from \"../operation-list-filter/operation-list-filter.action\";\r\n// import { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\n// import { Datas } from \"app/main/_models/generics/detail-info.model\";\r\n// import { Injectable } from \"@angular/core\";\r\n\r\n// export class OperationTableStateModel extends Datas<OperationTable[]> {\r\n//     constructor () {\r\n//         super();\r\n//     }\r\n// }\r\n\r\n// let tableInfo = new OperationTableStateModel();\r\n// @State<OperationTableStateModel>({\r\n//     name: 'OperationTable',\r\n//     defaults : tableInfo\r\n// })\r\n\r\n// @Injectable()\r\n// export class OperationTableState extends LoaderState {\r\n//     constructor(\r\n//         private _operationService: OperationService,\r\n//         private _store: Store\r\n//         ) {\r\n//             super();\r\n//     }\r\n\r\n//     @Selector()\r\n//     static get(state: OperationTableStateModel) {\r\n//         return state;\r\n//     }\r\n\r\n//     @Action(LoadOperationTableDatas)\r\n//     loadGrid(context: StateContext<OperationTableStateModel>, action: LoadOperationTableDatas) {\r\n//         this.loading(context,'datas');\r\n        \r\n//         const state = context.getState();\r\n//         state.datas = null;\r\n//         context.patchState(state);\r\n        \r\n//         this._operationService.getTable(action.payload)\r\n//             .subscribe(result=> {\r\n//                 let state = context.getState();\r\n//                 state.datas = result;\r\n//                 context.patchState(state);\r\n//                 //TODO: a controler\r\n//                 this._store.dispatch(new UpdatePaginationOperationTableFilter(action.payload.pagination));\r\n\r\n//                 this.loaded(context,'datas');\r\n//             });\r\n//     }\r\n\r\n//     // @Action(LoadOperationTableDatasSuccess)\r\n//     // loadSuccess(context: StateContext<OperationTableStateModel>, action: LoadOperationTableDatasSuccess) {\r\n\r\n//     // }\r\n\r\n//     @Action(ClearOperationTableDatas)\r\n//     clear(context: StateContext<OperationTableStateModel>) {\r\n//         return context.setState(new OperationTableStateModel());\r\n//     }\r\n// }","import { Injectable } from \"@angular/core\";\r\nimport { environment } from \"environments/environment\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { IOperation, OperationForDetail } from \"app/main/_models/referential/operation.model\";\r\nimport { ISelect, EnumSelectType } from \"app/main/_models/generics/select.model\";\r\nimport { IUserForGroup } from \"app/main/_models/user.model\";\r\nimport { FilterOperationTableSelected, FilterOperationTableSelection, FilterOperationDetail } from \"app/main/_models/filters/operation.filter\";\r\nimport { FilterDetail } from \"app/main/_models/filters/shared/filterDetail.filter\";\r\n\r\n\r\n@Injectable()\r\nexport class OperationService {\r\nbaseUrl = environment.apiUrl;\r\nuser = JSON.parse(localStorage.getItem('currentUser'));\r\nuserForGroup = this.user!=null ? <IUserForGroup> {id:this.user.id,idUserGroup:this.user.idUserGroup} : null;\r\n    \r\nconstructor(\r\n        private _httpClient: HttpClient\r\n    ) { }\r\n\r\n    GetSelectList(idOperationMethod: number,idOperationType: number, enumSelectType: EnumSelectType) {\r\n        return this._httpClient\r\n            .get(`${this.baseUrl}referential/operations/user-groups/${this.user.idUserGroup}/operation-methods/${idOperationMethod}/operation-types/${idOperationType}/select-type/${enumSelectType}/operations`)\r\n            .map(response => <ISelect[]>response);\r\n    }\r\n\r\n    GetSelectListByOperationMethods(operationMethods: ISelect[]) {\r\n        return this._httpClient\r\n            .post(`${this.baseUrl}referential/operations/user-groups/${this.user.idUserGroup}/select-list`,operationMethods)\r\n            .map(res=><ISelect[]>res);\r\n    }\r\n\r\n    Create(operation: IOperation) {\r\n        operation.idUserGroup = this.user.idUserGroup;\r\n        return this._httpClient\r\n            .post(`${this.baseUrl}referential/operations/create`,operation)\r\n            .map(res=><IOperation>res);\r\n    }\r\n\r\n\r\n    /*---------------------------------------------------------------*/\r\n  \r\n    getOperationTable (filter: FilterOperationTableSelected) {\r\n        filter.user =  this.userForGroup;\r\n        \r\n        return this._httpClient\r\n            .post(`${this.baseUrl}referential/operations/filter`,filter)\r\n            .map((response: any) => {\r\n                return response;\r\n            });\r\n    }\r\n\r\n    getOperationTableFilter(filter: FilterOperationTableSelected) {\r\n        filter.user =  this.userForGroup;\r\n            \r\n        return this._httpClient\r\n            .post(`${this.baseUrl}referential/operations/table-filter`,filter)\r\n            .map((response: FilterOperationTableSelection) => {\r\n                return response;\r\n            });\r\n    }\r\n\r\n    getDetailFilter(filter: OperationForDetail) {\r\n        return this._httpClient\r\n            .post<FilterOperationDetail>(`${this.baseUrl}referential/operations/operation-detail-filter`,filter)\r\n    }\r\n\r\n    getForDetail(filter: FilterDetail) {\r\n        return this._httpClient\r\n            .get(`${this.baseUrl}referential/operations/${filter.id}/users/${this.userForGroup.id}/operation-detail`)\r\n            .map(response => <OperationForDetail>response)\r\n    }\r\n\r\n    saveDetail(operationDetail: OperationForDetail) {\r\n        operationDetail.user =  this.userForGroup;\r\n        \r\n        return this._httpClient\r\n            .post(`${this.baseUrl}referential/operations/save`,operationDetail)\r\n            .map((response: OperationForDetail) => {\r\n                return response;\r\n            });\r\n    }\r\n\r\n    deleteOperationDetail(idOperation: number) {\r\n  \r\n    return this._httpClient\r\n            .delete(`${this.baseUrl}referential/operations/${idOperation}/delete`)\r\n            .map((response: boolean) => {\r\n                return response;\r\n            });\r\n    }\r\n\r\n    deleteOperations(idOperationList: number[]) {\r\n        return this._httpClient\r\n            .post(`${this.baseUrl}referential/operations/user-groups/${this.userForGroup.idUserGroup}/delete-operations`,idOperationList)\r\n            .map((response: boolean) => {\r\n                return response;\r\n            });\r\n    }\r\n}","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store, Select } from '@ngxs/store';\nimport { fuseAnimations } from '@fuse/animations';\nimport { Observable } from 'rxjs';\nimport { OtfDetail } from 'app/main/_models/referential/operation-type-family.model';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { NotificationsService } from 'angular2-notifications';\nimport { OtfService } from '../operation-type-family.service';\nimport { FilterSelected } from 'app/main/_models/generics/filter.info.model';\nimport { Datas } from 'app/main/_models/generics/detail-info.model';\nimport { OtfDetailState } from 'app/main/_ngxs/referential/operation-type-family/otf-detail/otf-detail.state';\nimport { FilterOtfTableSelected } from 'app/main/_models/filters/operation-type-family.filter';\nimport { OtfTableFilterSelectedState } from 'app/main/_ngxs/referential/operation-type-family/otf-table/otf-table-filter-selected/otf-table-filter-selected.state';\nimport { LoadOtfDetail, ClearOtfDetail } from 'app/main/_ngxs/referential/operation-type-family/otf-detail/otf-detail.action';\nimport { SynchronizeOtfTableFilterSelected } from 'app/main/_ngxs/referential/operation-type-family/otf-table/otf-table-filter-selected/otf-table-filter-selected.action';\n\n@Component({\n  selector: 'operation-type-family-detail',\n  templateUrl: './operation-type-family-detail.component.html',\n  styleUrls: ['./operation-type-family-detail.component.scss'],\n  animations   : fuseAnimations\n})\nexport class OperationTypeFamilyDetailComponent implements OnInit, OnDestroy {\n@Select(OtfDetailState.get) otfDetail$: Observable<Datas<OtfDetail>>;\n@Select(OtfTableFilterSelectedState.get) otfTableFilterSelected$: Observable<FilterSelected<FilterOtfTableSelected>>;\n\nidOperationTypeFamily: number;\nfilterOtfSelected: FilterOtfTableSelected;\notfDetail: OtfDetail;\nfirstLoad: boolean=true;\nformLoaded: boolean;\n\notfDetailForm: FormGroup;\n\n  constructor(\n    private _activatedRoute: ActivatedRoute,\n    private _store: Store,\n    private _formBuilder: FormBuilder,\n    private _notificationService: NotificationsService,\n    private _otfService: OtfService\n  ) { \n\n    this.otfTableFilterSelected$.subscribe(selected=>{\n      this.filterOtfSelected = selected.selected; // JSON.parse(JSON.stringify(otfTableFilter.filters));\n    });\n\n\n    this.otfDetail$.subscribe(otfDetail=>{\n   \n      if(otfDetail?.loader['datas']?.loaded) {\n\n        this.otfDetail = JSON.parse(JSON.stringify(otfDetail.datas));\n \n        if(this.firstLoad) {\n          //creation du formulaire\n          this.createForms();\n          this.firstLoad=false;\n        }\n\n        this.formLoaded=true;\n      }\n    });\n\n  }\n\n  ngOnInit() {\n    this._activatedRoute.params.subscribe(routeParams => {\n      this.idOperationTypeFamily = routeParams['idOperationTypeFamily']=='new' ? -1 : routeParams['idOperationTypeFamily'];\n      this._store.dispatch(new LoadOtfDetail(this.idOperationTypeFamily));\n    });\n  }\n\n  ngOnDestroy() {\n    this._store.dispatch(new ClearOtfDetail());\n  }\n\n  createForms() {\n    \n    this.otfDetailForm = this._formBuilder.group({\n        label: [this.otfDetail.label, [Validators.required]],\n        logoClassName: [this.otfDetail.logoClassName.selected, [Validators.required]],\n        movement: [this.otfDetail.movement.selected, [Validators.required]],\n      });\n     \n    this.otfDetailForm.valueChanges.subscribe(val=>{\n        this.otfDetail.label = val.label;\n        this.otfDetail.logoClassName.selected = val.logoClassName;\n        this.otfDetail.movement.selected = val.movement;\n        //TODO synchronize\n        // this._store.dispatch(new LoadOtfDetailSuccess(this.otfDetail));\n      });\n \n  }  \n\n  \n  saveOtf() {\n    this._otfService.saveOtfDetail(this.otfDetail)\n      .subscribe(resp=> {\n        if(resp)\n        {\n          this._notificationService.success('Enregistrement effectué', `La catégorie d'opération est enregistrée`);\n          this._store.dispatch(new SynchronizeOtfTableFilterSelected(this.filterOtfSelected));\n        }\n        else {\n          this._notificationService.error('Echec de l\\'enregistrement');\n        }\n      });\n  }\n\n  compareObjects(o1: any, o2: any) {\n    if(o1.label == o2.label && o1.id == o2.id )\n    return true;\n    else return false;\n  }\n\n}\n","<div id=\"product\" class=\"page-layout carded fullwidth\" fusePerfectScrollbar>\n\n    <!-- TOP BACKGROUND -->\n    <div class=\"top-bg accent\"></div>\n    <!-- / TOP BACKGROUND -->\n\n    <!-- CENTER -->\n    <div class=\"center\">\n\n        <!-- HEADER -->\n        <div class=\"header accent\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n            <!-- APP TITLE -->\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                <!-- (click)=\"movePrevious()\" -->\n                <button class=\"mr-0 mr-sm-16\" mat-icon-button \n                    [routerLink]=\"['/apps/referential/operations/operation-type-families']\">\n                    <mat-icon>arrow_back</mat-icon>\n                </button>\n\n                <div class=\"product-image mr-8 mr-sm-16\" *fuseIfOnDom [@animate]=\"{value:'*',params:{delay:'50ms',scale:'0.2'}}\">\n                    <img *ngIf=\"formLoaded && otfDetail\" [src]=\"'assets/images/Otf/'+otfDetail.logoClassName.selected.label+'_128.png'\">\n                </div>\n\n                <div fxLayout=\"column\" fxLayoutAlign=\"start start\"\n                     *fuseIfOnDom [@animate]=\"{value:'*',params:{delay:'100ms',x:'-25px'}}\">\n                    <div class=\"h2\" *ngIf=\"formLoaded && otfDetail && idOperationTypeFamily!=-1\" >\n                        {{otfDetail.label}}\n                    </div>\n                    <div class=\"h2\" *ngIf=\"formLoaded && otfDetail && idOperationTypeFamily==-1\" >\n                            Nouvelle catégorie d'opération\n                    </div>\n                    <div class=\"subtitle secondary-text\">\n                        <span>Détail de la catégorie d'opérations</span>\n                    </div>\n                </div>\n            </div>\n            <!-- / APP TITLE -->\n            <button mat-raised-button *ngIf=\"formLoaded && otfDetail\"\n                class=\"save-product-button mat-white-bg mt-16 mt-sm-0\"\n                [disabled]= \"otfDetailForm.invalid || otfDetailForm.pristine\"\n                (click)=\"saveOtf()\"\n            >\n                <span>ENREGISTRER</span>\n            </button>\n        </div>\n        <!-- / HEADER -->\n\n        <!-- CONTENT CARD -->\n        <div class=\"content-card white\">\n\n            <form *ngIf=\"formLoaded && otfDetail\" \n                name=\"otfDetailForm\" \n                [formGroup]=\"otfDetailForm\" \n                class=\"product w-100-p\" \n                fxLayout=\"column\" fxFlex\n            >\n                <div class=\"example-container tab-content p-24\" >\n\n                    <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100-p\">\n                        <mat-label>Libellé catégorie opération</mat-label>\n                        <input matInput\n                            name=\"label\"\n                            formControlName=\"label\"\n                            placeholder=\"Libellé catégorie opération\">\n                    </mat-form-field>\n\n                    <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100-p\" >\n                        <mat-label>Mouvement</mat-label>\n                        <mat-select formControlName=\"movement\" placeholder=\"Mouvement\" [compareWith]=\"compareObjects\" >\n                            <mat-option *ngFor=\"let item of otfDetail.movement.list\" [value]=\"item\">\n                                {{ item.label }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n\n                    <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100-p\" >\n                        <mat-label>Icône</mat-label>\n                        <mat-select formControlName=\"logoClassName\" placeholder=\"Icône\" [compareWith]=\"compareObjects\" >\n                            <mat-option *ngFor=\"let item of otfDetail.logoClassName.list\" [value]=\"item\">\n                                <img [src]=\"'assets/images/Otf/'+item.label+'_32.png'\">\n                                {{ item.label }}\n                            </mat-option>\n                        </mat-select>\n                        \n                        \n                        <!-- <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                            <input matInput>\n                            <img *ngFor=\"let item of otfDetail.logoClassName.list\" [src]=\"'assets/images/Otf/'+item.label+'_32.png'\">\n                            \n                        </div> -->\n                    </mat-form-field>\n                </div>\n\n                </form> \n\n        </div>\n        <!-- / CONTENT CARD -->\n\n    </div>\n    <!-- / CENTER -->\n</div>\n\n\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { OtfTable } from 'app/main/_models/referential/operation-type-family.model';\nimport { FilterOtfTableSelection, FilterOtfTableSelected } from 'app/main/_models/filters/operation-type-family.filter';\nimport { Router } from '@angular/router';\nimport { Store, Select } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { FilterSelected, FilterSelection } from 'app/main/_models/generics/filter.info.model';\nimport { fuseAnimations } from '@fuse/animations';\nimport { Datas } from 'app/main/_models/generics/detail-info.model';\nimport { OtfTableFilterSelectedState } from 'app/main/_ngxs/referential/operation-type-family/otf-table/otf-table-filter-selected/otf-table-filter-selected.state';\nimport { OtfTableFilterSelectionState } from 'app/main/_ngxs/referential/operation-type-family/otf-table/otf-table-filter-selection/otf-table-filter-selection.state';\nimport { OtfTableState } from 'app/main/_ngxs/referential/operation-type-family/otf-table/otf-table.state';\nimport { SynchronizeOtfTableFilterSelected } from 'app/main/_ngxs/referential/operation-type-family/otf-table/otf-table-filter-selected/otf-table-filter-selected.action';\nimport { LoadOtfTableFilterSelection } from 'app/main/_ngxs/referential/operation-type-family/otf-table/otf-table-filter-selection/otf-table-filter-selection.action';\nimport { MatDialogRef, MatDialog } from '@angular/material/dialog';\nimport { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\nimport { OtfService } from '../operation-type-family.service';\nimport { NotificationsService } from 'angular2-notifications';\nimport { OTF_COLUMNS } from 'app/main/_constants/mat-table-filter-column.const';\nimport { MatTableFilter } from 'app/main/apps/web-component/mat-table-filter/model/mat-table-filter.model';\n\n@Component({\n  selector: 'operation-type-family-table',\n  templateUrl: './operation-type-family-table.component.html',\n  styleUrls: ['./operation-type-family-table.component.scss'],\n  animations : fuseAnimations,\n  encapsulation: ViewEncapsulation.None\n})\nexport class OperationTypeFamilyTableComponent implements OnInit {\n  \n  @Select(OtfTableFilterSelectedState.get) otfTableFilterSelected$: Observable<FilterSelected<FilterOtfTableSelected>>;\n  @Select(OtfTableFilterSelectionState.get) otfTableFilterSelection$: Observable<FilterSelection<FilterOtfTableSelection>>;\n  @Select(OtfTableState.get) otfTable$: Observable<Datas<OtfTable[]>>;\n\n  filterOtfSelected: FilterOtfTableSelected;\n  matTableFilter: MatTableFilter = {\n    columns: OTF_COLUMNS,\n    filterSelection$: this.otfTableFilterSelection$,\n    filterSelected$: this.otfTableFilterSelected$,\n    table$: this.otfTable$,\n    toolbar: null\n  };\n\n  // columns = OTF_COLUMNS;\n  // : Column[]=\n  //   [ \n  //     {index:0, field: 'id',label:'id',isSortable:true,width:{isFixed:true,value:70},filter: {type:EnumFilterType.none, datas: null, isEmpty: true}, pipe: false,style:{type:EnumStyleType.label,datas:null }},\n  //     {index:1, field: 'logoClassName',label:'',isSortable:false,width:{isFixed:true,value:70},filter: {type:EnumFilterType.none, datas: null, isEmpty: true}, pipe: false,style:{type:EnumStyleType.image,datas:null}},\n  //     {index:2, field: 'label',label:'libellé',isSortable:true,width:{isFixed:false,value:-1},filter: {type:EnumFilterType.label, datas: null, isEmpty: true},pipe:false,style:{type:EnumStyleType.label,datas:null}},\n  //     {index:3, field: 'movement-label',label:'sens',isSortable:true,width:{isFixed:false,value:-1},filter: {type:EnumFilterType.comboMultiple, datas: null, isEmpty: true},pipe:false,style:{type:EnumStyleType.label,datas:null}},\n  //     {index:4, field: 'none',label:'',isSortable:false,width:{isFixed:true,value:70},filter: {type:EnumFilterType.none, datas: null, isEmpty: true},pipe:false,style:{type:EnumStyleType.buttonIcon,datas:{icon: 'delete_forever',tooltip: 'supprimer enregistrement'}}}\n      \n  //   ];\n  \n  confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\n  \n  constructor(\n    private _router: Router,\n    private _store: Store,\n    private _dialog: MatDialog,\n    private _otfService: OtfService,\n    private _notificationService: NotificationsService\n    ) {\n      this.filterOtfSelected = new FilterOtfTableSelected();\n      this._store.dispatch(new LoadOtfTableFilterSelection(this.filterOtfSelected));\n      this._store.dispatch(new SynchronizeOtfTableFilterSelected(this.filterOtfSelected));\n            \n      this.otfTableFilterSelected$.subscribe(selected=>{\n        if(selected?.loader['filter-selected']?.loaded) {\n          this.filterOtfSelected = selected.selected;\n        }\n      });\n\n  }\n\n  ngOnInit(): void {\n\n    \n  }\n\n  onRowClick($event) {\n    this._router.navigate(\n      [`/apps/referential/operations/operation-type-families/${$event.id}`]);\n\n    // this._router.navigate(\n    //   [`apps/account-statement-imports/${this.filterAsifSelected.idImport}/account-statement-import-files/${$event.id}/detail`]);\n  }\n\n  applyFilterSelected(selected: FilterOtfTableSelected) {\n    this._store.dispatch(new SynchronizeOtfTableFilterSelected(selected)); //ChangeAsifTableFilter(selected));\n  }\n\n  applyFilterSelection(selected: FilterOtfTableSelected) {\n    this._store.dispatch(new LoadOtfTableFilterSelection(selected));\n  }\n\n  delete($event) {\n    this.confirmDialogRef = this._dialog.open(FuseConfirmDialogComponent, {\n          disableClose: false\n        });\n    \n        this.confirmDialogRef.componentInstance.confirmMessage = 'Etes vous sûr de supprimer cette catégorie d\\'opération? Tous les types d\\'opérations associés et les opérations seront supprimés';\n    \n        this.confirmDialogRef.afterClosed().subscribe(result => {\n          if (result)\n            {\n                this._otfService.deleteOtfDetail($event.id)\n                .subscribe(resp => {\n                  this._store.dispatch(new SynchronizeOtfTableFilterSelected(this.filterOtfSelected));\n                  this._notificationService.success('Suppression réussi', 'La catégorie d\\'opération est supprimé');\n                }, error => {\n                  this._notificationService.error('Echec suppression', error);\n                })\n            }\n            this.confirmDialogRef = null;\n        });\n  }\n\n\n\n  // @Select(OtfTableFilterState.get) otfTableFilter$: Observable<FilterInfo<FilterOtfTable>>;\n  // @Select(OtfTableState.get) otfTable$: Observable<Datas<OtfTable[]>>;\n  \n  // @ViewChild(MatPaginator) paginator: MatPaginator;\n  // @ViewChild(MatSort) sort: MatSort;\n\n  // dataSource = new MatTableDataSource<OtfTable>();\n  // filterOtf: FilterOtfTable;\n  // idAccountStatement: number;\n  // selectedIndex: number = 0;\n  // displayedColumns = ['id','logoClassName','label','movement','buttonDelete'];\n  // templateFor:string;\n  // confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\n  // filterMovement: ComboSimple<ISelect>;\n  \n  // constructor(\n  //   private _store: Store,\n  //   private _dialog: MatDialog,\n  //   private _router: Router,\n  //   private _otfService: OtfService,\n  //   private _notificationService: NotificationsService\n  // ) {\n\n  //     this.filterOtf = new FilterOtfTable();\n  //     this._store.dispatch(new LoadOtfTableFilter(this.filterOtf));\n\n  //     this.otfTable$.subscribe(asifTable=>{\n  //       this.dataSource.data = asifTable.datas; \n  //     });\n\n      \n\n  //  }\n\n  // ngOnInit() {\n  //   this.otfTableFilter$.subscribe(otfTableFilter=>{\n  //     if(otfTableFilter.loader['filters'].loaded) {\n  //       this.filterOtf = otfTableFilter.filters;\n  //       this.filterMovement= {list : otfTableFilter.filters.movements,selected: otfTableFilter.filters.selected.movement};\n  //     }\n  //   });\n  \n  // }\n\n  // // ngOnChanges(changes: SimpleChanges) {\n\n  // //   this.headerPanelIsVisible = changes.headerPanelIsVisible.currentValue;\n  // // }\n  \n  // onPageChangeEvent(event) {\n  //   this.filterOtf.selected.pagination.currentPage = this.paginator.pageIndex;\n  //   this.loadPage();\n  // }\n  \n  // onSortChangeEvent(event): void {\n  //   this.filterOtf.selected.pagination.currentPage=0;\n  //   this.loadPage();\n  // }\n\n  // loadPage() {\n\n  //   this.filterOtf.selected.pagination.nbItemsPerPage = this.paginator.pageSize;\n  //   this.filterOtf.selected.pagination.sortColumn = this.sort.active;\n  //   this.filterOtf.selected.pagination.sortDirection = this.sort.direction;\n\n  //   this._store.dispatch(new ChangeOtfTableFilter(this.filterOtf.selected));\n  // }\n\n  // hasFilterData(filter:string) {\n  //   if(!this.filterOtf)\n  //     return false;\n  //   if(filter=='label')\n  //     return this.filterOtf.selected!=null && this.filterOtf.selected.label!=null && this.filterOtf.selected.label!='';\n  //   if(filter=='movement')\n  //   {\n  //     return this.filterOtf.selected!=null && this.filterOtf.selected.movement!=null;\n  //   }\n  // }\n\n  // delete(data) {\n  //   this.confirmDialogRef = this._dialog.open(FuseConfirmDialogComponent, {\n  //     disableClose: false\n  //   });\n\n  //   this.confirmDialogRef.componentInstance.confirmMessage = 'Etes vous sûr de supprimer cette catégorie d\\'opération? Tous les types d\\'opérations associés et les opérations seront supprimés';\n\n  //   this.confirmDialogRef.afterClosed().subscribe(result => {\n  //     if (result)\n  //       {\n  //           this._otfService.deleteOtfDetail(data.id)\n  //           .subscribe(resp => {\n  //             this._store.dispatch(new LoadOtfTable(this.filterOtf.selected));\n  //             this._notificationService.success('Suppression réussi', 'La catégorie d\\'opération est supprimé');\n  //           }, error => {\n  //             this._notificationService.error('Echec suppression', error);\n  //           })\n  //       }\n  //       this.confirmDialogRef = null;\n  //   });\n  // }\n\n\n  // detail(data) {\n  //   this._router.navigate(\n  //         [`/apps/referential/operations/operation-type-families/${data.id}`]);\n  //   // [routerLink]=\"['/apps/referential/operations/operation-type-families', data.id]\"\n  // }\n\n  // applyFilterLabel(data) {\n  \n  //   // this.filterOtf.selected.pagination.currentPage=0;\n  //   this.filterOtf.selected.label = data;\n  //   // this._store.dispatch(new LoadOtfTableFilter(this.filterOtf));\n  //   this.applyFilter();\n  // }\n\n  // applyFilterMovement(data) {\n\n    \n  //   this.filterOtf.selected.movement = data;\n  //   this.applyFilter();\n  // }\n\n  // applyFilter() {\n  //   this.filterOtf.selected.pagination.currentPage=0;\n  //   this._store.dispatch(new LoadOtfTableFilter(this.filterOtf));\n  // }\n\n}\n","<mat-table-filter \n    [matTableFilter]=\"matTableFilter\"\n    (onRowClick) = \"onRowClick($event)\"\n    (changeFilterSelected)=\"applyFilterSelected($event)\"\n    (changeFilterSelection)=\"applyFilterSelection($event)\"\n    (clickButtonIcon)=\"delete($event)\">\n</mat-table-filter>\n\n\n<!-- <div class=\"example-container\">\n    \n    <mat-table class=\"mat-table\"\n        #table [dataSource]=\"dataSource\"\n        [@animateStagger]=\"{value:'50'}\"\n        matSort matSortActive=\"id\" matSortDirection=\"asc\" matSortDisableClear \n        (matSortChange)=\"onSortChangeEvent($event)\"\n    >\n\n        <ng-container matColumnDef=\"id\">\n            <mat-header-cell style=\"flex:0 0 70px;\" *matHeaderCellDef mat-sort-header>Id</mat-header-cell>\n            <mat-cell style=\"flex:0 0 70px;\" *matCellDef=\"let data\">\n                <p class=\"text-truncate\">{{data.id}}</p>\n            </mat-cell>\n        </ng-container>\n\n        <ng-container cdkColumnDef=\"logoClassName\" >\n            <mat-header-cell *cdkHeaderCellDef mat-sort-header style=\"flex:0 0 70px;\">icône</mat-header-cell>\n            <mat-cell *cdkCellDef=\"let data\" style=\"flex:0 0 70px;\">\n                <img class=\"logo\" *ngIf=\"data.logoClassName\" [src]=\"'assets/images/Otf/'+data.logoClassName+'_32.png'\">\n            </mat-cell>\n        </ng-container>\n        \n        <ng-container matColumnDef=\"label\" >\n            <mat-header-cell style=\"flex: 0 0 40%;\"  *matHeaderCellDef >\n                <div mat-sort-header >Libellé</div>\n                \n                <div (click)=\"templateFor='col2'\" [matMenuTriggerFor]=\"menuLabel\" \n                    style=\"cursor: pointer;\" fxFlex fxLayoutAlign=\"end start\"   >\n                    <mat-icon color=\"warn\" *ngIf=\"hasFilterData('label')\">filter_list</mat-icon>\n                    <mat-icon color=\"primary\" *ngIf=\"!hasFilterData('label')\">filter_list</mat-icon>\n                </div>\n                <mat-menu #menuLabel=\"matMenu\" [overlapTrigger]=\"false\">\n                    <filter-label *ngIf=\"templateFor==='col2' && (otfTableFilter$ | async).loader['filters'].loaded\"\n                        [label]=\"(otfTableFilter$ | async).filters.selected.label\"\n                        (applyLabelFilter)=\"applyFilterLabel($event)\"\n                    ></filter-label>\n                </mat-menu>\n            </mat-header-cell >\n            <mat-cell style=\"flex: 0 0 40%;\" *matCellDef=\"let data\">\n                <p class=\"text-truncate\">{{data.label}}</p>\n            </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"movement\" >\n            <mat-header-cell style=\"flex: 0 0 15%;\" *matHeaderCellDef >\n                <div mat-sort-header >Sens</div>\n        \n                <div (click)=\"templateFor='col3'\" [matMenuTriggerFor]=\"menuMovement\"\n                    fxFlex fxLayoutAlign=\"end start\" style=\"cursor: pointer;\">\n                    <mat-icon color=\"warn\" *ngIf=\"hasFilterData('movement')\">filter_list</mat-icon>\n                    <mat-icon color=\"primary\" *ngIf=\"!hasFilterData('movement')\">filter_list</mat-icon>\n                </div>\n        \n                <mat-menu #menuMovement=\"matMenu\" [overlapTrigger]=\"false\">\n                <filter-movement *ngIf=\"templateFor==='col3' && filterMovement\"\n                    [movement]=\"filterMovement\"\n                    (applyFilterMovement)=\"applyFilterMovement($event)\"\n                >\n                </filter-movement>\n                </mat-menu>\n            </mat-header-cell>\n            <mat-cell style=\"flex: 0 0 15%;\" *matCellDef=\"let data\">\n                <p class=\"text-truncate\">{{data.movement.label}}</p>\n            </mat-cell>\n        </ng-container>\n        \n        <ng-container matColumnDef=\"buttonDelete\" >\n            <mat-header-cell style=\"flex:0 0 30%;\"  *matHeaderCellDef ></mat-header-cell>\n            <mat-cell style=\"flex:0 0 30%;justify-content: flex-end\"  *matCellDef=\"let data\">\n                <button *ngIf=\"!data.isMandatory\" matTooltip=\"Supprimer\" mat-icon-button (click)=\"delete(data)\">\n                    <mat-icon>delete</mat-icon>\n                </button>\n                <button *ngIf=\"!data.isMandatory\" matTooltip=\"Détail\" mat-icon-button (click)=\"detail(data)\">\n                        <mat-icon>more_horiz</mat-icon>\n                    </button>\n            </mat-cell>\n        </ng-container> \n\n        <mat-header-row *matHeaderRowDef=\"displayedColumns; sticky:true\"></mat-header-row>\n        \n        <mat-row \n            *cdkRowDef=\"let data; columns: displayedColumns;\"\n            matRipple\n            [@animate]=\"{value:'*',params:{y:'100%'}}\"\n            class=\"element-row\" \n        >\n\n        </mat-row>\n\n    </mat-table>\n\n    <div *ngIf=\"(otfTable$ | async).loader['datas'].loading\"\n        class=\"h-96 w-100-p\"\n        fxLayout=\"column\"\n        fxLayoutAlign=\"center center\">\n        <mat-spinner diameter=\"40\" color=\"accent\" fxLayout=\"row\"></mat-spinner>\n        <div style=\"color:#4285F3\" fxLayout=\"row\">chargement...</div>\n    </div> \n\n    \n    <p class=\"empty-result\" \n        *ngIf=\"(otfTable$ | async).loader['datas'].loaded \n            && (otfTable$ | async).datas.length==0\"\n    >\n        Aucun résultat\n    </p>\n</div>\n\n<mat-paginator *ngIf=\"(otfTableFilter$ | async).loader['filters'].loaded\"\n    (page)=\"onPageChangeEvent($event)\"\n    [length]=\"(otfTableFilter$ | async).filters.selected.pagination.totalItems\" \n    [pageSize]=\"(otfTableFilter$ | async).filters.selected.pagination.nbItemsPerPage\"\n    [pageSizeOptions]=\"[15, 100, 200]\">\n</mat-paginator> -->\n","import { Injectable } from '@angular/core';\nimport { OtfTable, OtfDetail } from 'app/main/_models/referential/operation-type-family.model';\nimport { environment } from 'environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { FilterOtfTableSelected, FilterOtfTableSelection } from 'app/main/_models/filters/operation-type-family.filter';\nimport { IUserForGroup } from 'app/main/_models/user.model';\n\n@Injectable()\nexport class OtfService {\n\n  baseUrl = environment.apiUrl;\n  user = JSON.parse(localStorage.getItem('currentUser'));\n  userForGroup = this.user!=null ? <IUserForGroup> {id:this.user.id,idUserGroup:this.user.idUserGroup} : null;\n\n      constructor(\n          private http: HttpClient\n      ) { }\n  \n      getOtfTable (filter: FilterOtfTableSelected) {\n        filter.user =  this.userForGroup;\n        return this.http\n          .post(`${this.baseUrl}referential/operation-type-families/filter`,filter)\n          .map((response: any) => {\n              return response;\n          });\n      }\n  \n      getOtfTableFilter(filter: FilterOtfTableSelected) {\n        filter.user =  this.userForGroup;\n        \n        return this.http\n              .post(`${this.baseUrl}referential/operation-type-families/table-filter`,filter)\n              .map((response: FilterOtfTableSelection) => {\n                  return response;\n              });\n      }\n\n      getOtfDetail(idOperationTypeFamily: number) {\n\n        return this.http\n            .get(`${this.baseUrl}referential/operation-type-families/${idOperationTypeFamily}/detail`)\n            .map(response => <OtfDetail>response)\n      }\n\n      saveOtfDetail(otfDetail: OtfDetail) {\n        otfDetail.user =  this.userForGroup;\n          \n        return this.http\n              .post(`${this.baseUrl}referential/operation-type-families/save`,otfDetail)\n              .map((response: OtfDetail) => {\n                  return response;\n              });\n      }\n\n      deleteOtfDetail(idOtf: number) {\n          \n        return this.http\n              .delete(`${this.baseUrl}referential/operation-type-families/${idOtf}/delete`)\n              .map((response: boolean) => {\n                  return response;\n              });\n      }\n\n}\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { fuseAnimations } from '@fuse/animations';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { OtDetail } from 'app/main/_models/referential/operation-type.model';\nimport { FilterSelected } from 'app/main/_models/generics/filter.info.model';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { NotificationsService } from 'angular2-notifications';\nimport { OtService } from '../operation-type.service';\nimport { Datas } from 'app/main/_models/generics/detail-info.model';\nimport { OtDetailState } from 'app/main/_ngxs/referential/operation-type/ot-detail/ot-detail.state';\nimport { OtTableFilterSelectedState } from 'app/main/_ngxs/referential/operation-type/ot-table/ot-table-filter-selected/ot-table-filter-selected.state';\nimport { FilterOtTableSelected } from 'app/main/_models/filters/operation-type.filter';\nimport { LoadOtDetail, ClearOtDetail } from 'app/main/_ngxs/referential/operation-type/ot-detail/ot-detail.action';\nimport { SynchronizeOtTableFilterSelected } from 'app/main/_ngxs/referential/operation-type/ot-table/ot-table-filter-selected/ot-table-filter-selected.action';\n\n@Component({\n  selector: 'operation-type-detail',\n  templateUrl: './operation-type-detail.component.html',\n  styleUrls: ['./operation-type-detail.component.scss'],\n  animations   : fuseAnimations\n})\nexport class OperationTypeDetailComponent implements OnInit, OnDestroy {\n@Select(OtTableFilterSelectedState.get) otTableFilterSelected$: Observable<FilterSelected<FilterOtTableSelected>>;\n@Select(OtDetailState.get) otDetail$: Observable<Datas<OtDetail>>;\n\nidOperationType: number;\nfilterOtSelected: FilterOtTableSelected;\notDetail: OtDetail;\nfirstLoad: boolean=true;\nformLoaded: boolean;\n\notDetailForm: FormGroup;\n\n  constructor(\n    private _activatedRoute: ActivatedRoute,\n    private _store: Store,\n    private _formBuilder: FormBuilder,\n    private _notificationService: NotificationsService,\n    private _otService: OtService\n  ) { \n\n    this.otTableFilterSelected$.subscribe(otTableFilter=>{\n      if(otTableFilter?.loader['filter-selected']?.loaded) {\n        this.filterOtSelected = otTableFilter.selected;\n      }\n    });\n\n\n    this.otDetail$.subscribe(otDetail=>{\n      if(otDetail?.loader['datas']?.loaded) {\n        this.otDetail = JSON.parse(JSON.stringify(otDetail.datas));\n        if(this.firstLoad) {\n          //creation du formulaire\n          this.createForms();\n          this.firstLoad=false;\n        }\n\n        this.formLoaded=true;\n      }\n    });\n\n  }\n\n  ngOnInit() {\n    this._activatedRoute.params.subscribe(routeParams => {\n      this.idOperationType = routeParams['idOperationType']=='new' ? 0 : routeParams['idOperationType'];\n      this._store.dispatch(new LoadOtDetail(this.idOperationType));\n    });\n  }\n\n  ngOnDestroy() {\n    this._store.dispatch(new ClearOtDetail());\n  }\n\n  createForms() {\n    \n    this.otDetailForm = this._formBuilder.group({\n        label: [this.otDetail.label, [Validators.required]],\n        operationTypeFamily: [this.otDetail.operationTypeFamily.selected, [Validators.required]],\n      });\n     \n    this.otDetailForm.valueChanges.subscribe(val=>{\n        this.otDetail.label = val.label;\n        this.otDetail.operationTypeFamily.selected = val.operationTypeFamily;\n        //TODO synchronize\n        // this._store.dispatch(new LoadOtDetailSuccess(this.otDetail));\n      });\n \n  }  \n\n  \n  saveOt() {\n    this._otService.saveOtDetail(this.otDetail)\n      .subscribe(resp=> {\n        if(resp)\n        {\n          this._notificationService.success('Enregistrement effectué', `Le type d'opération est enregistré`);\n          this._store.dispatch(new SynchronizeOtTableFilterSelected(this.filterOtSelected));\n        }\n        else {\n          this._notificationService.error('Echec de l\\'enregistrement');\n        }\n      });\n  }\n\n  compareObjects(o1: any, o2: any) {\n    if(o1.label == o2.label && o1.id == o2.id )\n    return true;\n    else return false;\n  }\n\n}\n","<div id=\"product\" class=\"page-layout carded fullwidth\" fusePerfectScrollbar>\n\n    <!-- TOP BACKGROUND -->\n    <div class=\"top-bg accent\"></div>\n    <!-- / TOP BACKGROUND -->\n\n    <!-- CENTER -->\n    <div class=\"center\">\n\n        <!-- HEADER -->\n        <div class=\"header accent\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n            <!-- APP TITLE -->\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                <!-- (click)=\"movePrevious()\" -->\n                <button class=\"mr-0 mr-sm-16\" mat-icon-button \n                    [routerLink]=\"['/apps/referential/operations/operation-types']\">\n                    <mat-icon>arrow_back</mat-icon>\n                </button>\n\n                <div fxLayout=\"column\" fxLayoutAlign=\"start start\"\n                     *fuseIfOnDom [@animate]=\"{value:'*',params:{delay:'100ms',x:'-25px'}}\">\n                    <div class=\"h2\" *ngIf=\"formLoaded && otDetail && idOperationType!=-1\" >\n                        {{otDetail.label}}\n                    </div>\n                    <div class=\"h2\" *ngIf=\"formLoaded && otDetail && idOperationType==-1\" >\n                            Nouveau type d'opération\n                    </div>\n                    <div class=\"subtitle secondary-text\">\n                        <span>Détail du type d'opérations</span>\n                    </div>\n                </div>\n            </div>\n            <!-- / APP TITLE -->\n            <button mat-raised-button *ngIf=\"formLoaded && otDetail\"\n                class=\"save-product-button mat-white-bg mt-16 mt-sm-0\"\n                [disabled]= \"otDetailForm.invalid || otDetailForm.pristine\"\n                (click)=\"saveOt()\"\n            >\n                <span>ENREGISTRER</span>\n            </button>\n        </div>\n        <!-- / HEADER -->\n\n        <!-- CONTENT CARD -->\n        <div class=\"content-card white\">\n\n            <form *ngIf=\"formLoaded && otDetail\" \n                name=\"otDetailForm\" \n                [formGroup]=\"otDetailForm\" \n                class=\"product w-100-p\" \n                fxLayout=\"column\" fxFlex\n            >\n                <div class=\"example-container tab-content p-24\" >\n\n                    <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100-p\">\n                        <mat-label>Libellé type opération</mat-label>\n                        <input matInput\n                            name=\"label\"\n                            formControlName=\"label\"\n                            placeholder=\"Libellé type opération\">\n                    </mat-form-field>\n\n                    <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100-p\" >\n                        <mat-label>catégorie d'opérations</mat-label>\n                        <mat-select formControlName=\"operationTypeFamily\" placeholder=\"catégorie d'opérations\" [compareWith]=\"compareObjects\" >\n                            <mat-option *ngFor=\"let item of otDetail.operationTypeFamily.list\" [value]=\"item\">\n                                {{ item.label }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n\n                </div>\n\n                </form> \n\n        </div>\n        <!-- / CONTENT CARD -->\n\n    </div>\n    <!-- / CENTER -->\n</div>\n","import { Component, OnInit, ViewEncapsulation, ViewChild, SimpleChanges, Input, OnChanges } from '@angular/core';\nimport { fuseAnimations } from '@fuse/animations';\nimport { Select, Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { OtTable } from 'app/main/_models/referential/operation-type.model';\nimport { MatDialogRef, MatDialog } from '@angular/material/dialog';\nimport { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\nimport { Router } from '@angular/router';\nimport { OtService } from '../operation-type.service';\nimport { NotificationsService } from 'angular2-notifications';\nimport { Datas } from 'app/main/_models/generics/detail-info.model';\nimport { OtTableFilterSelectedState } from 'app/main/_ngxs/referential/operation-type/ot-table/ot-table-filter-selected/ot-table-filter-selected.state';\nimport { OtTableState } from 'app/main/_ngxs/referential/operation-type/ot-table/ot-table.state';\nimport { OtTableFilterSelectionState } from 'app/main/_ngxs/referential/operation-type/ot-table/ot-table-filter-selection/ot-table-filter-selection.state';\nimport { FilterSelected, FilterSelection } from 'app/main/_models/generics/filter.info.model';\nimport { FilterOtTableSelected, FilterOtTableSelection } from 'app/main/_models/filters/operation-type.filter';\nimport { LoadOtTableFilterSelection } from 'app/main/_ngxs/referential/operation-type/ot-table/ot-table-filter-selection/ot-table-filter-selection.action';\nimport { SynchronizeOtTableFilterSelected } from 'app/main/_ngxs/referential/operation-type/ot-table/ot-table-filter-selected/ot-table-filter-selected.action';\nimport { OT_COLUMNS } from 'app/main/_constants/mat-table-filter-column.const';\nimport { MatTableFilter } from 'app/main/apps/web-component/mat-table-filter/model/mat-table-filter.model';\n\n@Component({\n  selector: 'operation-type-table',\n  templateUrl: './operation-type-table.component.html',\n  styleUrls: ['./operation-type-table.component.scss'],\n  animations : fuseAnimations,\n  encapsulation: ViewEncapsulation.None\n})\nexport class OperationTypeTableComponent implements OnInit {\n  @Select(OtTableFilterSelectedState.get) otTableFilterSelected$: Observable<FilterSelected<FilterOtTableSelected>>;\n  @Select(OtTableFilterSelectionState.get) otTableFilterSelection$: Observable<FilterSelection<FilterOtTableSelection>>;\n  @Select(OtTableState.get) otTable$: Observable<Datas<OtTable[]>>;\n\n  filterOtSelected: FilterOtTableSelected;\n  matTableFilter: MatTableFilter = {\n    columns: OT_COLUMNS,\n    filterSelection$: this.otTableFilterSelection$,\n    filterSelected$: this.otTableFilterSelected$,\n    table$: this.otTable$,\n    toolbar: null\n  };\n\n  // columns = OT_COLUMNS;\n  // : Column[]=\n  //   [ \n  //     {index:0, field: 'id',label:'id',isSortable:true,width:{isFixed:true,value:70},filter: {type:EnumFilterType.none, datas: null, isEmpty: true}, pipe: false,style:{type:EnumStyleType.label,datas:null }},\n  //     {index:1, field: 'operationTypeFamily-label',label:'Catégorie opération',isSortable:true,width:{isFixed:false,value:-1},filter: {type:EnumFilterType.comboMultiple, datas: null, isEmpty: true}, pipe: false,style:{type:EnumStyleType.label,datas:null}},\n  //     {index:3, field: 'label',label:'libellé',isSortable:true,width:{isFixed:false,value:-1},filter: {type:EnumFilterType.label, datas: null, isEmpty: true},pipe:false,style:{type:EnumStyleType.label,datas:null}},\n  //     {index:4, field: 'none',label:'',isSortable:false,width:{isFixed:true,value:70},filter: {type:EnumFilterType.none, datas: null, isEmpty: true},pipe:false,style:{type:EnumStyleType.buttonIcon,datas:{icon: 'delete_forever',tooltip: 'supprimer enregistrement'}}}\n  //   ];\n  \n  confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\n  \n  constructor(\n    private _router: Router,\n    private _store: Store,\n    private _dialog: MatDialog,\n    private _otService: OtService,\n    private _notificationService: NotificationsService\n    ) {\n      this.filterOtSelected = new FilterOtTableSelected();\n      this._store.dispatch(new LoadOtTableFilterSelection(this.filterOtSelected));\n      this._store.dispatch(new SynchronizeOtTableFilterSelected(this.filterOtSelected));\n            \n      this.otTableFilterSelected$.subscribe(selected=>{\n        if(selected?.loader['filter-selected']?.loaded) {\n          this.filterOtSelected = selected.selected;\n        }\n      });\n\n  }\n\n  ngOnInit(): void {\n\n    \n  }\n\n  onRowClick($event) {\n    this._router.navigate(\n      [`/apps/referential/operations/operation-types/${$event.id}`]);\n  }\n\n  applyFilterSelected(selected: FilterOtTableSelected) {\n    this._store.dispatch(new SynchronizeOtTableFilterSelected(selected));\n  }\n\n  applyFilterSelection(selected: FilterOtTableSelected) {\n    this._store.dispatch(new LoadOtTableFilterSelection(selected));\n  }\n\n  delete($event) {\n    this.confirmDialogRef = this._dialog.open(FuseConfirmDialogComponent, {\n          disableClose: false\n        });\n    \n        this.confirmDialogRef.componentInstance.confirmMessage = 'Etes vous sûr de supprimer cette catégorie d\\'opération? Tous les types d\\'opérations associés et les opérations seront supprimés';\n        \n        this.confirmDialogRef.afterClosed().subscribe(result => {\n          if (result)\n            {\n                this._otService.deleteOtDetail($event.id)\n                .subscribe(resp => {\n                  this._store.dispatch(new SynchronizeOtTableFilterSelected(this.filterOtSelected));\n                  this._notificationService.success('Suppression réussi', 'La catégorie d\\'opération est supprimé');\n                }, error => {\n                  this._notificationService.error('Echec suppression', error);\n                })\n            }\n            this.confirmDialogRef = null;\n        });\n  }\n}\n\n\n\n//   @Select(OtTableFilterState.get) otTableFilter$: Observable<FilterInfo<FilterOtTable>>;\n//   @Select(OtTableState.get) otTable$: Observable<Datas<OtTable[]>>;\n  \n//   @ViewChild(MatPaginator) paginator: MatPaginator;\n//   @ViewChild(MatSort) sort: MatSort;\n\n//   dataSource = new MatTableDataSource<OtTable>();\n//   filterOt: FilterOtTable;\n//   idAccountStatement: number;\n//   selectedIndex: number = 0;\n//   displayedColumns = ['id','operationTypeFamily','label','buttonDelete'];\n//   templateFor:string;\n//   confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\n  \n//   filterOtf: ComboSimple<ISelect>=null;\n\n//   constructor(\n//     private _store: Store,\n//     private _dialog: MatDialog,\n//     private _router: Router,\n//     private _otService: OtService,\n//     private _notificationService: NotificationsService\n//   ) {\n\n//       this.filterOt = new FilterOtTable();\n//       this._store.dispatch(new LoadOtTableFilter(this.filterOt));\n\n//       this.otTable$.subscribe(otTable=>{\n//         this.dataSource.data = otTable.datas; \n\n//       });\n\n//    }\n\n//   ngOnInit() {\n//     this.otTableFilter$.subscribe(otTableFilter=>{\n//       if(otTableFilter.loader['filters'].loaded) {\n//         this.filterOt = otTableFilter.filters;\n//         this.filterOtf= {list : otTableFilter.filters.otfs,selected: otTableFilter.filters.selected.otf};\n\n//       }\n//     });\n  \n//   }\n\n//   // ngOnChanges(changes: SimpleChanges) {\n\n//   //   this.headerPanelIsVisible = changes.headerPanelIsVisible.currentValue;;\n//   // }\n  \n//   onPageChangeEvent(event) {\n//     this.filterOt.selected.pagination.currentPage = this.paginator.pageIndex;\n//     this.loadPage();\n//   }\n  \n//   onSortChangeEvent(event): void {\n//     this.filterOt.selected.pagination.currentPage=0;\n//     this.loadPage();\n//   }\n\n//   loadPage() {\n\n//     this.filterOt.selected.pagination.nbItemsPerPage = this.paginator.pageSize;\n//     this.filterOt.selected.pagination.sortColumn = this.sort.active;\n//     this.filterOt.selected.pagination.sortDirection = this.sort.direction;\n\n//     this._store.dispatch(new ChangeOtTableFilter(this.filterOt.selected));\n//   }\n\n//   hasFilterData(filter:string) {\n//     if(!this.filterOt)\n//       return false;\n//     if(filter=='label')\n//       return this.filterOt.selected!=null && this.filterOt.selected.label!=null && this.filterOt.selected.label!='';\n//     if(filter=='operationTypeFamily')\n//       return this.filterOt.selected!=null && this.filterOt.selected.otf!=null;\n//   }\n\n//   delete(data) {\n//     this.confirmDialogRef = this._dialog.open(FuseConfirmDialogComponent, {\n//       disableClose: false\n//     });\n\n//     this.confirmDialogRef.componentInstance.confirmMessage = 'Etes vous sûr de supprimer ce type d\\'opération? \\nToutes les opérations associées seront supprimées';\n\n//     this.confirmDialogRef.afterClosed().subscribe(result => {\n//       if (result)\n//         {\n//             this._otService.deleteOtDetail(data.id)\n//             .subscribe(resp => {\n//               this._store.dispatch(new LoadOtTableDatas(this.filterOt.selected));\n//               this._notificationService.success('Suppression réussi', 'Le type d\\'opération est supprimé');\n//             }, error => {\n//               this._notificationService.error('Echec suppression', error);\n//             })\n//         }\n//         this.confirmDialogRef = null;\n//     });\n//   }\n\n\n//   detail(data) {\n//     this._router.navigate(\n//           [`/apps/referential/operations/operation-types/${data.id}`]);\n//   }\n\n//   applyFilterLabel(data) {\n//     this.filterOt.selected.label = data;\n//     this.applyFilter();\n//   }\n\n//   applyFilterOtf(data) {\n//     this.filterOt.selected.otf = data;\n//     this.applyFilter();\n//   }\n\n//   applyFilter() {\n//     this.filterOt.selected.pagination.currentPage=0;\n//     this._store.dispatch(new LoadOtTableFilter(this.filterOt));\n//   }\n\n// }\n","<mat-table-filter \n    [matTableFilter]=\"matTableFilter\"\n    (onRowClick) = \"onRowClick($event)\"\n    (changeFilterSelected)=\"applyFilterSelected($event)\"\n    (changeFilterSelection)=\"applyFilterSelection($event)\"\n    (clickButtonIcon)=\"delete($event)\">\n</mat-table-filter>\n\n\n<!-- <div class=\"example-container\">\n    \n    <mat-table class=\"mat-table\"\n        #table [dataSource]=\"dataSource\"\n        [@animateStagger]=\"{value:'50'}\"\n        matSort matSortActive=\"id\" matSortDirection=\"asc\" matSortDisableClear \n        (matSortChange)=\"onSortChangeEvent($event)\"\n    >\n\n        <ng-container matColumnDef=\"id\">\n            <mat-header-cell style=\"flex:0 0 70px;\" *matHeaderCellDef mat-sort-header>Id</mat-header-cell>\n            <mat-cell style=\"flex:0 0 70px;\" *matCellDef=\"let data\">\n                <p class=\"text-truncate\">{{data.id}}</p>\n            </mat-cell>\n        </ng-container>\n\n\n        <ng-container matColumnDef=\"operationTypeFamily\" >\n          <mat-header-cell style=\"flex: 0 0 30%;\" *matHeaderCellDef >\n              <div mat-sort-header >Catégorie opération</div>\n      \n              <div (click)=\"templateFor='col2'\" [matMenuTriggerFor]=\"menuOtf\"\n                  fxFlex fxLayoutAlign=\"end start\" style=\"cursor: pointer;\">\n                  <mat-icon color=\"warn\" *ngIf=\"hasFilterData('operationTypeFamily')\">filter_list</mat-icon>\n                  <mat-icon color=\"primary\" *ngIf=\"!hasFilterData('operationTypeFamily')\">filter_list</mat-icon>\n              </div>\n      \n              <mat-menu #menuOtf=\"matMenu\" [overlapTrigger]=\"false\">\n                <filter-movement *ngIf=\"templateFor==='col2' && filterOtf\"\n                    [movement]=\"filterOtf\"\n                    (applyFilterMovement)=\"applyFilterOtf($event)\"\n                >\n                </filter-movement>\n              </mat-menu>\n          </mat-header-cell>\n          <mat-cell style=\"flex: 0 0 30%;\" *matCellDef=\"let data\">\n              <p class=\"text-truncate\">{{data.operationTypeFamily.label}}</p>\n          </mat-cell>\n      </ng-container>\n\n\n        <ng-container matColumnDef=\"label\" >\n            <mat-header-cell style=\"flex: 0 0 30%;\"  *matHeaderCellDef >\n                <div mat-sort-header >Libellé</div>\n                \n                <div (click)=\"templateFor='col3'\" [matMenuTriggerFor]=\"menuLabel\" \n                    style=\"cursor: pointer;\" fxFlex fxLayoutAlign=\"end start\"   >\n                    <mat-icon color=\"warn\" *ngIf=\"hasFilterData('label')\">filter_list</mat-icon>\n                    <mat-icon color=\"primary\" *ngIf=\"!hasFilterData('label')\">filter_list</mat-icon>\n                </div>\n                <mat-menu #menuLabel=\"matMenu\" [overlapTrigger]=\"false\">\n                  <filter-label *ngIf=\"templateFor==='col3' && filterOt\"\n                      [label]=\"filterOt.selected.label\" \n                      (applyLabelFilter)=\"applyFilterLabel($event)\"\n                    ></filter-label>\n                </mat-menu>\n            </mat-header-cell >\n            <mat-cell style=\"flex: 0 0 30%;\" *matCellDef=\"let data\">\n                <p class=\"text-truncate\">{{data.label}}</p>\n            </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"buttonDelete\" >\n            <mat-header-cell style=\"flex:0 0 30%;\"  *matHeaderCellDef ></mat-header-cell>\n            <mat-cell style=\"flex:0 0 30%;justify-content: flex-end\"  *matCellDef=\"let data\">\n                <button *ngIf=\"!data.isMandatory\" matTooltip=\"Supprimer\" mat-icon-button (click)=\"delete(data)\">\n                    <mat-icon>delete</mat-icon>\n                </button>\n                <button *ngIf=\"!data.isMandatory\" matTooltip=\"Détail\" mat-icon-button (click)=\"detail(data)\">\n                        <mat-icon>more_horiz</mat-icon>\n                    </button>\n            </mat-cell>\n        </ng-container> \n\n        <mat-header-row *matHeaderRowDef=\"displayedColumns; sticky:true\"></mat-header-row>\n        \n        <mat-row \n            *cdkRowDef=\"let data; columns: displayedColumns;\"\n            matRipple\n            [@animate]=\"{value:'*',params:{y:'100%'}}\"\n            class=\"element-row\" \n        >\n        </mat-row>\n\n    </mat-table>\n\n    <div *ngIf=\"(otTable$ | async).loader['datas'].loading\"\n        class=\"h-96 w-100-p\"\n        fxLayout=\"column\"\n        fxLayoutAlign=\"center center\">\n        <mat-spinner diameter=\"40\" color=\"accent\" fxLayout=\"row\"></mat-spinner>\n        <div style=\"color:#4285F3\" fxLayout=\"row\">chargement...</div>\n    </div> \n\n    \n    <p class=\"empty-result\" \n        *ngIf=\"(otTable$ | async).loader['datas'].loaded \n            && (otTable$ | async).datas.length==0\"\n    >\n        Aucun résultat\n    </p>\n</div>\n\n<mat-paginator *ngIf=\"(otTableFilter$ | async).loader['filters'].loaded\"\n    (page)=\"onPageChangeEvent($event)\"\n    [length]=\"(otTableFilter$ | async).filters.selected.pagination.totalItems\" \n    [pageSize]=\"(otTableFilter$ | async).filters.selected.pagination.nbItemsPerPage\"\n    [pageSizeOptions]=\"[15, 100, 200]\">\n</mat-paginator> -->\n","import { Injectable } from '@angular/core';\nimport { environment } from 'environments/environment';\nimport { IUserForGroup } from 'app/main/_models/user.model';\nimport { HttpClient } from '@angular/common/http';\nimport { FilterOtTableSelected, FilterOtTableSelection } from 'app/main/_models/filters/operation-type.filter';\nimport { OtTable, OtDetail } from 'app/main/_models/referential/operation-type.model';\n\n@Injectable()\nexport class OtService {\n\n  baseUrl = environment.apiUrl;\n  user = JSON.parse(localStorage.getItem('currentUser'));\n  userForGroup = this.user!=null ? <IUserForGroup> {id:this.user.id,idUserGroup:this.user.idUserGroup} : null;\n\n      constructor(\n          private _http: HttpClient\n      ) { }\n  \n      getOtTable (filter: FilterOtTableSelected) {\n        filter.user =  this.userForGroup;\n        \n        return this._http\n          .post(`${this.baseUrl}referential/operation-types/filter`,filter)\n          .map((response: any) => {\n              return response;\n          });\n      }\n  \n      getOtTableFilter(filter: FilterOtTableSelected) {\n        filter.user =  this.userForGroup;\n          \n        return this._http\n              .post(`${this.baseUrl}referential/operation-types/table-filter`,filter)\n              .map((response: FilterOtTableSelection) => {\n                  return response;\n              });\n      }\n\n      getOtDetail(idOperationType: number) {\n        return this._http\n            .get(`${this.baseUrl}referential/operation-types/${idOperationType}/user-groups/${this.userForGroup.idUserGroup}/detail`)\n            .map(response => <OtDetail>response)\n      }\n\n      saveOtDetail(otDetail: OtDetail) {\n        otDetail.user =  this.userForGroup;\n          \n        return this._http\n              .post(`${this.baseUrl}referential/operation-types/save`,otDetail)\n              .map((response: OtDetail) => {\n                  return response;\n              });\n      }\n\n      deleteOtDetail(idOt: number) {\n          \n        return this._http\n              .delete(`${this.baseUrl}referential/operation-types/${idOt}/delete`)\n              .map((response: boolean) => {\n                  return response;\n              });\n      }\n\n}","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { fuseAnimations } from '@fuse/animations';\nimport { OperationForDetail } from 'app/main/_models/referential/operation.model';\nimport { Observable, Subscription } from 'rxjs';\nimport { FilterSelected } from 'app/main/_models/generics/filter.info.model';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store, Select } from '@ngxs/store';\nimport { NotificationsService } from 'angular2-notifications';\nimport { OperationService } from 'app/main/_services/Referential/operation.service';\nimport { DetailInfo, DataInfo } from 'app/main/_models/generics/detail-info.model';\nimport { OperationDetailState } from 'app/main/_ngxs/referential/operation/operation-detail/operation-detail.state';\nimport { OperationTableFilterSelectedState } from 'app/main/_ngxs/referential/operation/operation-table/operation-table-filter-selected/operation-table-filter-selected.state';\nimport { FilterOperationTableSelected, FilterOperationDetail } from 'app/main/_models/filters/operation.filter';\nimport { LoadOperationDetail, SynchronizeOperationDetail, ClearOperationDetail } from 'app/main/_ngxs/referential/operation/operation-detail/operation-detail.action';\nimport { LoadOperationTable } from 'app/main/_ngxs/referential/operation/operation-table/operation-table.action';\nimport { FilterDetail } from 'app/main/_models/filters/shared/filterDetail.filter';\nimport { OperationDetailFilterState } from 'app/main/_ngxs/referential/operation/operation-detail/operation-detail-filter/operation-detail-filter.state';\nimport { ISelect } from 'app/main/_models/generics/select.model';\n\n@Component({\n  selector: 'operation-detail',\n  templateUrl: './operation-detail.component.html',\n  styleUrls: ['./operation-detail.component.scss'],\n  animations   : fuseAnimations\n})\n\nexport class OperationDetailComponent implements OnInit, OnDestroy {\n  @Select(OperationDetailState.get) detailInfo$: Observable<DetailInfo<OperationForDetail, FilterDetail>>;\n  @Select(OperationDetailFilterState.get) detailFilterInfo$: Observable<DataInfo<FilterOperationDetail>>;\n\n// @Select(OperationDetailState.get) operationDetail$: Observable<Datas<OperationForDetail>>;\n  @Select(OperationTableFilterSelectedState.get) operationTableFilterSelected$: Observable<FilterSelected<FilterOperationTableSelected>>;\n  $DetailInfo$: Subscription;\n\nidOperation: number;\nfilterOperationSelected: FilterOperationTableSelected;\noperationDetail: OperationForDetail;\nfirstLoad: boolean=true;\nformLoaded: boolean;\n\noperationDetailForm: FormGroup;\n\n  constructor(\n    private _activatedRoute: ActivatedRoute,\n    private _store: Store,\n    private _formBuilder: FormBuilder,\n    private _notificationService: NotificationsService,\n    private _operationService: OperationService\n  ) { \n\n    this.operationTableFilterSelected$.subscribe(selected=>{\n      if(selected?.loader['filter-selected']?.loaded) {\n        this.filterOperationSelected = selected.selected;\n      }\n    });\n\n    this.$DetailInfo$ = this.detailInfo$.subscribe(x => {\n    // this.operationDetail$.subscribe(operationDetail=>{\n      if(x?.loader['datas']?.loaded) {\n        console.log('x',x);\n        this.operationDetail = x.datas; //JSON.parse(JSON.stringify(x.datas));\n        if(this.firstLoad) {\n          //creation du formulaire\n          this.createForms();\n          this.firstLoad=false;\n        }\n        // this.formLoaded=true;\n      }\n    });\n\n  }\n\n  ngOnInit() {\n    this._activatedRoute.params.subscribe(routeParams => {\n      this.idOperation = routeParams['idOperation']=='new' ? null : routeParams['idOperation'];\n      this._store.dispatch(new LoadOperationDetail(<FilterDetail>{id:this.idOperation}));\n    });\n  }\n\n  ngOnDestroy() {\n    this.$DetailInfo$.unsubscribe();\n    this._store.dispatch(new ClearOperationDetail());\n  }\n\n  createForms() {\n    \n    this.operationDetailForm = this._formBuilder.group({\n        label: [this.operationDetail.label, [Validators.required]],\n        operationMethod: [this.operationDetail.operationMethod, [Validators.required]],\n        operationType: [this.operationDetail.operationType, [Validators.required]]\n    });\n     \n    this.operationDetailForm.valueChanges.subscribe(val=>{\n        this.operationDetail.label = val.label;\n        this.operationDetail.operationMethod = val.operationMethod;\n        this.operationDetail.operationType = val.operationType;\n\n        this._store.dispatch(new SynchronizeOperationDetail(this.operationDetail));\n      });\n \n  }  \n\n  \n  save() {\n    this._operationService.saveDetail(this.operationDetail)\n      .subscribe(resp=> {\n        if(resp)\n        {\n          this._notificationService.success('Enregistrement effectué', `Opération enregistrée`);\n          this._store.dispatch(new LoadOperationTable(this.filterOperationSelected));\n        }\n        else {\n          this._notificationService.error('Echec de l\\'enregistrement');\n        }\n      });\n  }\n\n  compareObjects(o1: any, o2: any) {\n    if(o1.label == o2.label && o1.id == o2.id )\n    return true;\n    else return false;\n  }\n\n  // displayFn(state:ISelect){\n  //   return state ? state.label : null;\n  // }\n\n}\n","<div \n    *ngIf=\"!firstLoad && (detailFilterInfo$ | async).loader['datas']?.loaded as loaded else tp_progress\"\n    class=\"page-layout carded fullwidth\" fusePerfectScrollbar>\n\n  <!-- TOP BACKGROUND -->\n  <div class=\"top-bg accent\"></div>\n  <!-- / TOP BACKGROUND -->\n\n  <!-- CENTER -->\n  <div class=\"center\">\n\n      <!-- HEADER -->\n      <div class=\"header accent\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n          <!-- APP TITLE -->\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n              <!-- (click)=\"movePrevious()\" -->\n              <button class=\"mr-0 mr-sm-16\" mat-icon-button \n                  [routerLink]=\"['/apps/referential/operations/operations']\">\n                  <mat-icon>arrow_back</mat-icon>\n              </button>\n\n              <div fxLayout=\"column\" fxLayoutAlign=\"start start\"\n                   *fuseIfOnDom [@animate]=\"{value:'*',params:{delay:'100ms',x:'-25px'}}\">\n                  <div class=\"h2\" *ngIf=\"idOperation\" >\n                      {{operationDetail.label}}\n                  </div>\n                  <div class=\"h2\" *ngIf=\"!idOperation\" >\n                          Nouvelle opération\n                  </div>\n                  <div class=\"subtitle secondary-text\">\n                      <span>Détail de l'opération</span>\n                  </div>\n              </div>\n          </div>\n          <!-- / APP TITLE -->\n          <button mat-raised-button\n              class=\"save-product-button mat-white-bg mt-16 mt-sm-0\"\n              [disabled]= \"operationDetailForm.invalid || operationDetailForm.pristine\"\n              (click)=\"save()\"\n          >\n              <span>ENREGISTRER</span>\n          </button>\n      </div>\n      <!-- / HEADER -->\n\n      <!-- CONTENT CARD -->\n      <div class=\"content-card white\">\n\n          <form  \n              name=\"operationDetailForm\" \n              [formGroup]=\"operationDetailForm\" \n              class=\"product w-100-p\" \n              fxLayout=\"column\" fxFlex\n          >\n              <div class=\"example-container tab-content p-24\" >\n\n                  <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100-p\">\n                      <mat-label>Libellé type opération</mat-label>\n                      <input matInput\n                          name=\"label\"\n                          formControlName=\"label\"\n                          placeholder=\"Libellé opération\">\n                  </mat-form-field>\n\n                  <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100-p\" >\n                      <mat-label>Méthode opérations</mat-label>\n                      <mat-select formControlName=\"operationMethod\" placeholder=\"Méthode opérations\" [compareWith]=\"compareObjects\"  >\n                        <!-- <mat-select-trigger>{{operationMethod?.label}}</mat-select-trigger>   -->\n                        <mat-option *ngFor=\"let item of (detailFilterInfo$ | async).datas.operationMethod\" [value]=\"item\" >\n                            {{ item.label }}\n                        </mat-option>\n                      </mat-select>\n                  </mat-form-field>\n\n                  <mat-form-field appearance=\"outline\" floatLabel=\"always\" class=\"w-100-p\" >\n                    <mat-label>Type opérations</mat-label>\n                    <mat-select class=\"mini-select\" \n                      formControlName=\"operationType\" \n                      [compareWith]=\"compareObjects\" \n                      placeholder=\"Type opérations\" >\n                    \n                    <mat-optgroup *ngFor=\"let group of (detailFilterInfo$ | async).datas.operationType\" [label]=\"group.label\">\n                      <mat-option *ngFor=\"let item of group.selects\" [value]=\"item\" >\n                        {{ item.label }}\n                      </mat-option>\n                    </mat-optgroup>\n                  </mat-select>\n\n                </mat-form-field>\n\n              </div>\n\n              </form> \n\n      </div>\n      <!-- / CONTENT CARD -->\n\n  </div>\n  <!-- / CENTER -->\n</div>\n\n<ng-template #tp_progress>\n    <mat-progress-bar\n        color=\"primary\"\n        mode=\"indeterminate\">\n    </mat-progress-bar>\n</ng-template>\n","import { Component, OnInit } from \"@angular/core\";\nimport { fuseAnimations } from \"@fuse/animations\";\nimport { Select, Store } from \"@ngxs/store\";\nimport { OperationTableFilterSelectionState } from \"app/main/_ngxs/referential/operation/operation-table/operation-table-filter-selection/operation-table-filter-slection.action\";\nimport { OperationTableFilterSelectedState } from \"app/main/_ngxs/referential/operation/operation-table/operation-table-filter-selected/operation-table-filter-selected.state\";\nimport { OperationTableState } from \"app/main/_ngxs/referential/operation/operation-table/operation-table.state\";\nimport { Observable } from \"rxjs\";\nimport { FilterSelection, FilterSelected } from \"app/main/_models/generics/filter.info.model\";\nimport { Datas } from \"app/main/_models/generics/detail-info.model\";\nimport { OperationTable } from \"app/main/_models/referential/operation.model\";\nimport { FilterOperationTableSelection, FilterOperationTableSelected } from \"app/main/_models/filters/operation.filter\";\nimport { MatDialogRef, MatDialog } from \"@angular/material/dialog\";\nimport { FuseConfirmDialogComponent } from \"@fuse/components/confirm-dialog/confirm-dialog.component\";\nimport { Router } from \"@angular/router\";\nimport { OperationService } from \"app/main/_services/Referential/operation.service\";\nimport { NotificationsService } from \"angular2-notifications\";\nimport { LoadOperationTableFilterSelection } from \"app/main/_ngxs/referential/operation/operation-table/operation-table-filter-selection/operation-table-filter-selection.state\";\nimport { SynchronizeOperationTableFilterSelected } from \"app/main/_ngxs/referential/operation/operation-table/operation-table-filter-selected/operation-table-filter-selected.action\";\nimport { OPERATION_COLUMNS } from \"app/main/_constants/mat-table-filter-column.const\";\nimport { MatTableFilter } from \"app/main/apps/web-component/mat-table-filter/model/mat-table-filter.model\";\n\n@Component({\n  selector: 'operation-table',\n  templateUrl: './operation-table.component.html',\n  styleUrls: ['./operation-table.component.scss'],\n  animations : fuseAnimations\n})\nexport class OperationTableComponent implements OnInit {\n@Select(OperationTableFilterSelectionState.get) operationTableFilterSelection$: Observable<FilterSelection<FilterOperationTableSelection>>;\n@Select(OperationTableFilterSelectedState.get) operationTableFilterSelected$: Observable<FilterSelected<FilterOperationTableSelected>>;\n@Select(OperationTableState.get) operationTable$: Observable<Datas<OperationTable[]>>;\n\n  filterOperationSelected: FilterOperationTableSelected = new FilterOperationTableSelected();\n  matTableFilter: MatTableFilter = {\n    columns: OPERATION_COLUMNS,\n    filterSelection$: this.operationTableFilterSelection$,\n    filterSelected$: this.operationTableFilterSelected$,\n    table$: this.operationTable$,\n    toolbar: {buttonAdd: {enabled: true,tooltip:'Ajouter une opération' }, buttonDelete:{enabled:true,tooltip:'supprimer opération(s)'}, buttonFullscreen:{enabled:true} }\n  };\n  \n  // columns = OPERATION_COLUMNS;\n  // : Column[]=\n  //   [ \n  //     {index:0, field: 'id',label:'id',isSortable:true,width:{isFixed:true,value:70},filter: {type:EnumFilterType.none, datas: null, isEmpty: true}, pipe: false,style:{type:EnumStyleType.label,datas:null }},\n  //     {index:1, field: 'operationMethod-label',label:'Méthode opération',isSortable:true,width:{isFixed:false,value:-1},filter: {type:EnumFilterType.comboMultiple, datas: null, isEmpty: true}, pipe: false,style:{type:EnumStyleType.label,datas:null}},\n  //     {index:2, field: 'operationType-label',label:'Type opération',isSortable:true,width:{isFixed:false,value:-1},filter: {type:EnumFilterType.comboMultipleGroup, datas: null, isEmpty: true}, pipe: false,style:{type:EnumStyleType.label,datas:null}},\n  //     {index:3, field: 'label',label:'libellé',isSortable:true,width:{isFixed:false,value:-1},filter: {type:EnumFilterType.label, datas: null, isEmpty: true},pipe:false,style:{type:EnumStyleType.label,datas:null}},\n  //     {index:4, field: 'none',label:'',isSortable:false,width:{isFixed:true,value:70},filter: {type:EnumFilterType.none, datas: null, isEmpty: true},pipe:false,style:{type:EnumStyleType.buttonIcon,datas:{icon: 'delete_forever',tooltip: 'supprimer enregistrement'}}}\n  //   ];\n  \n  confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\n  \n  constructor(\n    private _router: Router,\n    private _store: Store,\n    private _dialog: MatDialog,\n    private _operationService: OperationService,\n    private _notificationService: NotificationsService\n    ) {\n      this.filterOperationSelected = new FilterOperationTableSelected();\n      this._store.dispatch(new LoadOperationTableFilterSelection(this.filterOperationSelected));\n      this._store.dispatch(new SynchronizeOperationTableFilterSelected(this.filterOperationSelected));\n            \n      this.operationTableFilterSelected$.subscribe(selected=>{\n        if(selected?.loader['filter-selected']?.loaded) {\n          this.filterOperationSelected = selected.selected;\n        }\n      });\n  }\n\n  ngOnInit(): void {\n    \n  }\n\n  onRowClick($event) {\n    this._router.navigate(\n      [`/apps/referential/operations/operations/${$event.id}`]);\n  }\n\n  applyFilterSelected(selected: FilterOperationTableSelected) {\n    this._store.dispatch(new SynchronizeOperationTableFilterSelected(selected));\n  }\n\n  applyFilterSelection(selected: FilterOperationTableSelected) {\n    this._store.dispatch(new LoadOperationTableFilterSelection(selected));\n  }\n\n  addItem($event) {\n    this._router.navigate(['apps/referential/operations/operations/new']);\n  }\n\n  deleteItems($event) {\n    this._operationService.deleteOperations($event)\n    .subscribe(resp => {\n      this._store.dispatch(new SynchronizeOperationTableFilterSelected(this.filterOperationSelected));\n      this._notificationService.success('Suppression réussie', `${$event.lentgh} opération(s) supprimée(s)`);\n    }, error => {\n      this._notificationService.error('Echec suppression', error);\n    })\n  }\n  // delete($event) {\n  //   this.confirmDialogRef = this._dialog.open(FuseConfirmDialogComponent, {\n  //         disableClose: false\n  //       });\n    \n  //       this.confirmDialogRef.componentInstance.confirmMessage = 'Etes vous sûr de supprimer cette catégorie d\\'opération? Tous les types d\\'opérations associés et les opérations seront supprimés';\n    \n  //       this.confirmDialogRef.afterClosed().subscribe(result => {\n  //         if (result)\n  //           {\n  //               this._operationService.deleteOperationDetail($event.id)\n  //               .subscribe(resp => {\n  //                 this._store.dispatch(new SynchronizeOperationTableFilterSelected(this.filterOperationSelected));\n  //                 this._notificationService.success('Suppression réussie', 'Opération supprimée');\n  //               }, error => {\n  //                 this._notificationService.error('Echec suppression', error);\n  //               })\n  //           }\n  //           this.confirmDialogRef = null;\n  //       });\n  // }\n}\n\n\n\n\n\n// import { Component, OnInit, ViewChild, ViewEncapsulation, Input, SimpleChanges, OnChanges } from '@angular/core';\n// import { LoadOperationTableDatas } from 'app/main/_ngxs/referential/operation/operation-list/operation-list.action';\n// import { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\n// import { ChangeOperationTableFilter, LoadOperationTableFilter } from 'app/main/_ngxs/referential/operation/operation-list-filter/operation-list-filter.action';\n// import { Select, Store } from '@ngxs/store';\n// import { OperationTableFilterState } from 'app/main/_ngxs/referential/operation/operation-list-filter/operation-list-filter.state';\n// import { OperationTableState } from 'app/main/_ngxs/referential/operation/operation-list/operation-list.state';\n// import { Observable } from 'rxjs';\n// import { OperationTable } from 'app/main/_models/referential/operation.model';\n// import { FilterInfo } from 'app/main/_models/generics/filter.info.model';\n// import { FilterOperationTable } from 'app/main/_models/filters/operation.filter';\n// import { MatDialogRef, MatDialog } from '@angular/material/dialog';\n// import { MatPaginator } from '@angular/material/paginator';\n// import { MatSort } from '@angular/material/sort';\n// import { MatTableDataSource } from '@angular/material/table';\n// import { Router } from '@angular/router';\n// import { OperationService } from 'app/main/_services/Referential/operation.service';\n// import { NotificationsService } from 'angular2-notifications';\n// import { FilterComboMultiple, FilterComboMultipleGroup } from 'app/main/_models/filters/mini-filter/combo-multiple.filters';\n// import { fuseAnimations } from '@fuse/animations';\n// import { Datas } from 'app/main/_models/generics/detail-info.model';\n\n\n// @Component({\n//   selector: 'operation-table',\n//   templateUrl: './operation-table.component.html',\n//   styleUrls: ['./operation-table.component.scss'],\n//   animations : fuseAnimations,\n//   encapsulation: ViewEncapsulation.None\n// })\n// export class OperationTableComponent implements OnInit {\n  \n//   @Select(OperationTableFilterState.get) operationTableFilter$: Observable<FilterInfo<FilterOperationTable>>;\n//   @Select(OperationTableState.get) operationTable$: Observable<Datas<OperationTable[]>>;\n  \n//   @ViewChild(MatPaginator) paginator: MatPaginator;\n//   @ViewChild(MatSort) sort: MatSort;\n\n//   dataSource = new MatTableDataSource<OperationTable>();\n//   filterOperation: FilterOperationTable;\n//   selectedIndex: number = 0;\n//   displayedColumns = ['id','operationMethod','operationType','label','buttonDelete'];\n//   templateFor:string;\n//   confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\n\n//   filterOperationMethod: FilterComboMultiple ={ placeholder:'Méthode d\\'opérations',combos:null };\n//   filterOperationType: FilterComboMultipleGroup ={ placeholder:'Type d\\'opérations',combos:null };\n\n\n\n//   constructor(\n//     private _store: Store,\n//     private _dialog: MatDialog,\n//     private _router: Router,\n//     private _operationService: OperationService,\n//     private _notificationService: NotificationsService\n//   ) {\n\n//       this.filterOperation = new FilterOperationTable();\n//       this._store.dispatch(new LoadOperationTableFilter(this.filterOperation));\n\n//       this.operationTable$.subscribe(operationTable=>{\n//         this.dataSource.data = operationTable.datas; \n\n//       });\n\n//    }\n\n//   ngOnInit() {\n//     this.operationTableFilter$.subscribe(operationTableFilter=>{\n//       if(operationTableFilter.loader['filters'].loaded) {\n//         this.filterOperation = operationTableFilter.filters;\n        \n//         this.filterOperationType.combos = {list : operationTableFilter.filters.operationTypes, listSelected: operationTableFilter.filters.selected.operationTypes};\n//         this.filterOperationMethod.combos = {list : operationTableFilter.filters.operationMethods,listSelected: operationTableFilter.filters.selected.operationMethods};\n\n//       }\n//     });\n  \n//   }\n  \n//   // ngOnChanges(changes: SimpleChanges) {\n\n//   //   this.headerPanelIsVisible = changes.headerPanelIsVisible.currentValue;;\n//   // }\n  \n//   onPageChangeEvent(event) {\n//     this.filterOperation.selected.pagination.currentPage = this.paginator.pageIndex;\n//     this.loadPage();\n//   }\n  \n//   onSortChangeEvent(event): void {\n//     this.filterOperation.selected.pagination.currentPage=0;\n//     this.loadPage();\n//   }\n\n//   loadPage() {\n\n//     this.filterOperation.selected.pagination.nbItemsPerPage = this.paginator.pageSize;\n//     this.filterOperation.selected.pagination.sortColumn = this.sort.active;\n//     this.filterOperation.selected.pagination.sortDirection = this.sort.direction;\n\n//     this._store.dispatch(new ChangeOperationTableFilter(this.filterOperation.selected));\n//   }\n\n//   hasFilterData(filter:string) {\n//     if(!this.filterOperation)\n//       return false;\n//     if(filter=='label')\n//       return this.filterOperation.selected!=null && this.filterOperation.selected.label!=null && this.filterOperation.selected.label!='';\n//     if(filter=='operationMethod')\n//       return this.filterOperationMethod.combos!=null && this.filterOperationMethod.combos.listSelected && this.filterOperationMethod.combos.listSelected.length>0;\n//     if(filter=='operationType')\n//       return this.filterOperationType.combos!=null && this.filterOperationType.combos.listSelected && this.filterOperationType.combos.listSelected.length>0;\n//   }\n\n//   delete(data) {\n//     this.confirmDialogRef = this._dialog.open(FuseConfirmDialogComponent, {\n//       disableClose: false\n//     });\n\n//     this.confirmDialogRef.componentInstance.confirmMessage = 'Etes vous sûr de supprimer cette opération?';\n\n//     this.confirmDialogRef.afterClosed().subscribe(result => {\n//       if (result)\n//         {\n//             this._operationService.deleteDetail(data.id)\n//             .subscribe(resp => {\n//               this._store.dispatch(new LoadOperationTableDatas(this.filterOperation.selected));\n//               this._notificationService.success('Suppression réussi', 'L\\'opération est supprimée');\n//             }, error => {\n//               this._notificationService.error('Echec suppression', error);\n//             })\n//         }\n//         this.confirmDialogRef = null;\n//     });\n//   }\n\n\n//   detail(data) {\n//     this._router.navigate(\n//           [`/apps/referential/operations/operations/${data.id}`]);\n//   }\n\n//   applyFilterLabel(data) {\n//     this.filterOperation.selected.label = data;\n//     this.applyFilter();\n//   }\n\n//   applyFilterOperationType(data) {\n//     this.filterOperation.selected.operationTypes = data;\n//     this.applyFilter();\n//   }\n\n//   applyFilterOperationMethod(data) {\n//     this.filterOperation.selected.operationMethods = data;\n//     this.applyFilter();\n//   }\n\n//   applyFilter() {\n//     this.filterOperation.selected.pagination.currentPage=0;\n//     this._store.dispatch(new LoadOperationTableFilter(this.filterOperation));\n//   }\n\n// }\n","<mat-table-filter \n    [matTableFilter]=\"matTableFilter\"\n    (onRowClick)=\"onRowClick($event)\"\n    (changeFilterSelected)=\"applyFilterSelected($event)\"\n    (changeFilterSelection)=\"applyFilterSelection($event)\"\n    (toolbarAddItemEvent)=\"addItem($event)\"\n    (toolbarDeleteItemsEvent)=\"deleteItems($event)\">\n</mat-table-filter>\n\n<!-- <div fxlayout=\"column\">\n    <div fxflex=\"90\">table</div>\n    <div fxflex=\"10\">footer</div>\n</div> -->\n\n\n<!-- <div class=\"example-container\">\n    \n  <mat-table class=\"mat-table\"\n      #table [dataSource]=\"dataSource\"\n      [@animateStagger]=\"{value:'50'}\"\n      matSort matSortActive=\"id\" matSortDirection=\"asc\" matSortDisableClear \n      (matSortChange)=\"onSortChangeEvent($event)\"\n  >\n\n\n      <ng-container matColumnDef=\"id\">\n          <mat-header-cell style=\"flex:0 0 70px;\" *matHeaderCellDef mat-sort-header>Id</mat-header-cell>\n          <mat-cell style=\"flex:0 0 70px;\" *matCellDef=\"let data\">\n              <p class=\"text-truncate\">{{data.id}}</p>\n          </mat-cell>\n      </ng-container>\n\n\n      <ng-container matColumnDef=\"operationMethod\" >\n        <mat-header-cell style=\"flex: 0 0 20%;\" *matHeaderCellDef >\n            <div mat-sort-header >Méthode d'opération</div>\n    \n            <div (click)=\"templateFor='col2'\" [matMenuTriggerFor]=\"menuOperationMethod\"\n                fxFlex fxLayoutAlign=\"end start\" style=\"cursor: pointer;\">\n                <mat-icon color=\"warn\" *ngIf=\"hasFilterData('operationMethod')\">filter_list</mat-icon>\n                <mat-icon color=\"primary\" *ngIf=\"!hasFilterData('operationMethod')\">filter_list</mat-icon>\n            </div>\n    \n            <mat-menu #menuOperationMethod=\"matMenu\" [overlapTrigger]=\"false\">\n              <filter-combo-multiple *ngIf=\"templateFor==='col2' && filterOperationMethod\"\n                  [filterComboMultiple]=\"filterOperationMethod\"\n                  (applyFilterComboMultiple)=\"applyFilterOperationMethod($event)\"\n              >\n              </filter-combo-multiple>\n            </mat-menu>\n        </mat-header-cell>\n        <mat-cell style=\"flex: 0 0 20%;\" *matCellDef=\"let data\">\n            <p class=\"text-truncate\">{{data.operationMethod.label}}</p>\n        </mat-cell>\n    </ng-container>\n\n   \n    <ng-container matColumnDef=\"operationType\" >\n        <mat-header-cell style=\"flex: 0 0 20%;\" *matHeaderCellDef >\n            <div mat-sort-header >Type d'opération</div>\n    \n            <div (click)=\"templateFor='col2'\" [matMenuTriggerFor]=\"menuOperationType\"\n                fxFlex fxLayoutAlign=\"end start\" style=\"cursor: pointer;\">\n                <mat-icon color=\"warn\" *ngIf=\"hasFilterData('operationType')\">filter_list</mat-icon>\n                <mat-icon color=\"primary\" *ngIf=\"!hasFilterData('operationType')\">filter_list</mat-icon>\n            </div>\n    \n            <mat-menu #menuOperationType=\"matMenu\" [overlapTrigger]=\"false\">\n              <filter-combo-multiple-group *ngIf=\"templateFor==='col2' && filterOperationMethod\"\n                  [filterComboMultipleGroup]=\"filterOperationType\"\n                  (applyFilterComboMultipleGroup)=\"applyFilterOperationType($event)\"\n              >\n              </filter-combo-multiple-group>\n            </mat-menu>\n        </mat-header-cell>\n        <mat-cell style=\"flex: 0 0 20%;\" *matCellDef=\"let data\">\n            <p class=\"text-truncate\">{{data.operationType.label}}</p>\n        </mat-cell>\n    </ng-container>\n\n\n \n    <ng-container matColumnDef=\"label\" >\n        <mat-header-cell style=\"flex: 0 0 20%;\"  *matHeaderCellDef >\n            <div mat-sort-header >Libellé</div>\n            \n            <div (click)=\"templateFor='col3'\" [matMenuTriggerFor]=\"menuLabel\" \n                style=\"cursor: pointer;\" fxFlex fxLayoutAlign=\"end start\"   >\n                <mat-icon color=\"warn\" *ngIf=\"hasFilterData('label')\">filter_list</mat-icon>\n                <mat-icon color=\"primary\" *ngIf=\"!hasFilterData('label')\">filter_list</mat-icon>\n            </div>\n            <mat-menu #menuLabel=\"matMenu\" [overlapTrigger]=\"false\">\n              <filter-label *ngIf=\"templateFor==='col3' && filterOperation\"\n                  [label]=\"filterOperation.selected.label\" \n                  (applyLabelFilter)=\"applyFilterLabel($event)\"\n                ></filter-label>\n            </mat-menu>\n        </mat-header-cell >\n        <mat-cell style=\"flex: 0 0 20%;\" *matCellDef=\"let data\">\n            <p class=\"text-truncate\">{{data.label}}</p>\n        </mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"buttonDelete\" >\n        <mat-header-cell style=\"flex:0 0 25%;\"  *matHeaderCellDef ></mat-header-cell>\n        <mat-cell style=\"flex:0 0 30%;justify-content: flex-end\"  *matCellDef=\"let data\">\n            <button *ngIf=\"!data.isMandatory\" matTooltip=\"Supprimer\" mat-icon-button (click)=\"delete(data)\">\n                <mat-icon>delete</mat-icon>\n            </button>\n            <button *ngIf=\"!data.isMandatory\" matTooltip=\"Détail\" mat-icon-button (click)=\"detail(data)\">\n                    <mat-icon>more_horiz</mat-icon>\n                </button>\n        </mat-cell>\n    </ng-container> \n\n    <mat-header-row *matHeaderRowDef=\"displayedColumns; sticky:true\"></mat-header-row>\n    \n    <mat-row \n        *cdkRowDef=\"let data; columns: displayedColumns;\"\n        matRipple\n        [@animate]=\"{value:'*',params:{y:'100%'}}\"\n        class=\"element-row\" \n    >\n    </mat-row>\n\n  </mat-table>\n\n  <div *ngIf=\"(operationTable$ | async).loader['datas'].loading\"\n      class=\"h-96 w-100-p\"\n      fxLayout=\"column\"\n      fxLayoutAlign=\"center center\">\n      <mat-spinner diameter=\"40\" color=\"accent\" fxLayout=\"row\"></mat-spinner>\n      <div style=\"color:#4285F3\" fxLayout=\"row\">chargement...</div>\n  </div> \n\n  \n  <p class=\"empty-result\" \n      *ngIf=\"(operationTable$ | async).loader['datas'].loaded \n          && (operationTable$ | async).datas.length==0\"\n  >\n      Aucun résultat\n  </p>\n</div>\n\n<mat-paginator *ngIf=\"(operationTableFilter$ | async).loader['filters'].loaded\"\n  (page)=\"onPageChangeEvent($event)\"\n  [length]=\"(operationTableFilter$ | async).filters.selected.pagination.totalItems\" \n  [pageSize]=\"(operationTableFilter$ | async).filters.selected.pagination.nbItemsPerPage\"\n  [pageSizeOptions]=\"[15, 100, 200]\">\n</mat-paginator> -->\n","import { Component, OnInit, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { ISelect } from 'app/main/_models/generics/select.model';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'operations-main-tab',\n  templateUrl: './operations-main-tab.component.html',\n  styleUrls: ['./operations-main-tab.component.scss']\n})\nexport class OperationsMainTabComponent implements OnInit {\n  @Input() subject: string;\n\n  operationFields: ISelect[];\n  selectedIndex:number;\n  \n  constructor(\n    private _router: Router\n  ) {\n    \n    this.operationFields = [ {id: 1, label:'Catégorie opération'},{id: 2, label:'Type opération'},{id: 3, label:'Opération'} ];\n\n  }\n\n  ngOnInit() {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if(changes.subject) {\n\n      this.subject = changes.subject.currentValue;\n      switch(this.subject) {\n        case 'operation-type-families':\n          this.selectedIndex = 0;\n          break;\n        case 'operation-types':\n          this.selectedIndex = 1;\n          break;\n        case 'operations':\n          this.selectedIndex = 2;\n          break;\n      }\n    }\n\n   }\n\n   \n  onTabChanged($event) {\n\n    this.selectedIndex=$event.index;\n\n    switch(this.selectedIndex) {\n      case 0:\n        this.subject = 'operation-type-families';\n        break;\n      case 1:\n        this.subject = 'operation-types';\n        break;\n      case 2:\n        this.subject = 'operations';\n        break;\n    }\n\n    this._router.navigate(\n      [`apps/referential/operations/${this.subject}`]);\n  }\n\n}\n","<mat-tab-group id=\"group\"\n    [selectedIndex]=\"selectedIndex\"\n    (selectedTabChange)=\"onTabChanged($event)\">\n    <mat-tab \n        *ngFor=\"let operationField of operationFields;index as i\" \n        [label]=\"operationField.label\">\n      <ng-template mat-tab-label>\n          {{operationField.label}}\n      </ng-template>\n\n      <operation-type-family-table class=\"tab-content-container\" *ngIf=\"selectedIndex == 0 && selectedIndex == i\"></operation-type-family-table>\n      <operation-type-table class=\"tab-content-container\" *ngIf=\"selectedIndex == 1 && selectedIndex == i\"></operation-type-table>\n      <operation-table *ngIf=\"selectedIndex == 2 && selectedIndex == i\"></operation-table>\n    </mat-tab>\n</mat-tab-group>\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { fuseAnimations } from '@fuse/animations';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FuseConfigService } from '@fuse/services/config.service';\n\n@Component({\n  selector: 'operations-main',\n  templateUrl: './operations-main.component.html',\n  styleUrls: ['./operations-main.component.scss'],\n  animations : fuseAnimations\n})\nexport class OperationsMainComponent implements OnInit {\nsubject: string = 'operation-type-families';\nsubjectTitle: string = 'Catégorie d\\'opérations';\n\nheaderPanelIcon: string;\nheaderPanelIsVisible: boolean = false;\nfullscreen: boolean;\n\nconstructor(\n  private _activatedRoute: ActivatedRoute,\n  private _router: Router,\n  private _fuseConfigService: FuseConfigService\n  ) {\n\n  this._activatedRoute.url.subscribe(url=> {\n    this.subject = url[0].path;\n    switch(this.subject) {\n      case 'operation-type-families':\n        this.subjectTitle = 'Catégorie d\\'opérations';\n        break;\n      case 'operation-types':\n        this.subjectTitle = 'Type d\\'opérations';\n        break;\n      case 'operations':\n        this.subjectTitle = 'Opérations';\n        break;\n    }\n  });\n\n  // Subscribe to the config changes\n  this._fuseConfigService.config.subscribe((settings) => {\n    this.fullscreen = settings.layout.toolbar.fullscreen;\n  });\n\n}\n\n  ngOnInit() {\n    // this.onHeaderPanelClick();\n  }\n\n  Add() {\n      this._router.navigate(\n        [`apps/referential/operations/${this.subject}/new`]);\n  }\n\n  // onHeaderPanelClick() {\n  //   this.headerPanelIsVisible = this.headerPanelIsVisible ? false : true;\n  //   this.headerPanelIcon = this.headerPanelIsVisible ? 'keyboard_arrow_up' : 'keyboard_arrow_down';\n  //   this.fuseConfig.layout.toolbar.hidden=!this.headerPanelIsVisible;\n  //   this._fuseConfigService.setConfig(this.fuseConfig);\n\n  // }\n\n  }\n  \n\n\n","<div id=\"products\" class=\"page-layout carded fullwidth inner-scroll\">\n\n  <!-- TOP BACKGROUND -->\n  <div class=\"top-bg accent header calc-background-left\"></div>\n  <!-- / TOP BACKGROUND -->\n    <!-- CENTER -->\n      <div class=\"center\">\n        <!-- HEADER -->\n        <div *ngIf=\"!fullscreen\" \n          class=\"header calc-background-right accent p-12 pb-0 pt-6\"\n          fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayout.gt-xs=\"row\" fxLayoutAlign.gt-xs=\"space-between center\">\n            \n            <div class=\"toolbar w-100-p\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\n            \n              <div class=\"left-side\" fxLayout=\"row\">\n                  <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                      <mat-icon class=\"logo-icon mr-16\" *fuseIfOnDom [@animate]=\"{value:'*',params:{delay:'50ms',scale:'0.2'}}\">history</mat-icon>\n                      <span class=\"logo-text h1\" *fuseIfOnDom [@animate]=\"{value:'*',params:{delay:'100ms',x:'-25px'}}\">Référentiel opération: {{subjectTitle}}</span>\n                  </div>\n              </div>\n\n              <button mat-raised-button\n                  class=\"save-product-button white mt-16 mt-sm-0\"\n                  (click)=\"Add()\">\n                  <span>NOUVEAU</span>\n              </button>\n\n            </div>\n        </div>\n        <!-- / HEADER -->\n        \n        <div class=\"content-card\" mat-white-bg>\n          <div class=\"container-tab\">\n            <operations-main-tab [subject]=\"subject\"></operations-main-tab>\n          </div>\n        </div>\n      </div>\n  </div>\n","import { AuthGuard } from \"app/_guards/auth.guard\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { FuseSharedModule } from \"@fuse/shared.module\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { OtfService } from \"./operation-type-family/operation-type-family.service\";\r\nimport { NgxsModule } from \"@ngxs/store\";\r\nimport { OperationTypeFamilyDetailComponent } from \"./operation-type-family/operation-type-family-detail/operation-type-family-detail.component\";\r\nimport { FuseConfirmDialogModule } from \"@fuse/components\";\r\nimport { OtService } from \"./operation-type/operation-type.service\";\r\nimport { OperationTypeDetailComponent } from \"./operation-type/operation-type-detail/operation-type-detail.component\";\r\nimport { OperationsMainComponent } from \"./operations-main/operations-main.component\";\r\nimport { OperationsMainTabComponent } from \"./operations-main-tab/operations-main-tab.component\";\r\nimport { OperationService } from \"app/main/_services/Referential/operation.service\";\r\nimport { OperationDetailComponent } from \"./operation/operation-detail/operation-detail.component\";\r\n// import { MiniFilterModule } from \"../../web-component/mini-filter/mini-filter.module\";\r\nimport { AngularMaterialModule } from \"app/angular-material.module\";\r\nimport { OtfTableFilterSelectedState } from \"app/main/_ngxs/referential/operation-type-family/otf-table/otf-table-filter-selected/otf-table-filter-selected.state\";\r\nimport { OtfTableFilterSelectionState } from \"app/main/_ngxs/referential/operation-type-family/otf-table/otf-table-filter-selection/otf-table-filter-selection.state\";\r\nimport { OtfTableState } from \"app/main/_ngxs/referential/operation-type-family/otf-table/otf-table.state\";\r\nimport { OperationTypeFamilyTableComponent } from \"./operation-type-family/operation-type-family-table/operation-type-family-table.component\";\r\nimport { MatTableFilterModule } from \"../../web-component/mat-table-filter/mat-table-filter.module\";\r\nimport { OtfDetailState } from \"app/main/_ngxs/referential/operation-type-family/otf-detail/otf-detail.state\";\r\nimport { OperationTypeTableComponent } from \"./operation-type/operation-type-table/operation-type-table.component\";\r\nimport { OtTableFilterSelectedState } from \"app/main/_ngxs/referential/operation-type/ot-table/ot-table-filter-selected/ot-table-filter-selected.state\";\r\nimport { OtTableFilterSelectionState } from \"app/main/_ngxs/referential/operation-type/ot-table/ot-table-filter-selection/ot-table-filter-selection.state\";\r\nimport { OtTableState } from \"app/main/_ngxs/referential/operation-type/ot-table/ot-table.state\";\r\nimport { OtDetailState } from \"app/main/_ngxs/referential/operation-type/ot-detail/ot-detail.state\";\r\nimport { OperationTableComponent } from \"./operation/operation-table/operation-table.component\";\r\nimport { OperationTableFilterSelectedState } from \"app/main/_ngxs/referential/operation/operation-table/operation-table-filter-selected/operation-table-filter-selected.state\";\r\nimport { OperationTableFilterSelectionState } from \"app/main/_ngxs/referential/operation/operation-table/operation-table-filter-selection/operation-table-filter-slection.action\";\r\nimport { OperationTableState } from \"app/main/_ngxs/referential/operation/operation-table/operation-table.state\";\r\nimport { OperationDetailState } from \"app/main/_ngxs/referential/operation/operation-detail/operation-detail.state\";\r\nimport { OperationDetailFilterState } from \"app/main/_ngxs/referential/operation/operation-detail/operation-detail-filter/operation-detail-filter.state\";\r\nimport { ReferentialService } from \"app/main/_services/Referential/referential.service\";\r\n\r\nconst routes = [\r\n  {\r\n    path     : 'operation-type-families',\r\n    component: OperationsMainComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path     : 'operation-type-families/:idOperationTypeFamily',\r\n    component: OperationTypeFamilyDetailComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path     : 'operation-types',\r\n    component: OperationsMainComponent,\r\n    canActivate: [AuthGuard]\r\n  },\r\n  {\r\n    path     : 'operation-types/:idOperationType',\r\n    component: OperationTypeDetailComponent,\r\n    canActivate: [AuthGuard]\r\n  }\r\n  ,\r\n  {\r\n    path     : 'operations',\r\n    component: OperationsMainComponent,\r\n    canActivate: [AuthGuard]\r\n  }\r\n  ,\r\n  {\r\n    path     : 'operations/:idOperation',\r\n    component: OperationDetailComponent,\r\n    canActivate: [AuthGuard]\r\n  }\r\n\r\n    \r\n  ];\r\n  \r\n  @NgModule({\r\n    imports: [\r\n      CommonModule,\r\n      FuseSharedModule,\r\n      AngularMaterialModule,\r\n      FuseConfirmDialogModule,\r\n      RouterModule.forChild(routes),\r\n      MatTableFilterModule,\r\n      NgxsModule.forFeature([\r\n        OtfTableFilterSelectedState,\r\n        OtfTableFilterSelectionState,\r\n        OtfTableState,\r\n        OtfDetailState,\r\n        \r\n        OtTableFilterSelectedState,\r\n        OtTableFilterSelectionState,\r\n        OtTableState,\r\n        OtDetailState,\r\n\r\n        OperationTableFilterSelectedState,\r\n        OperationTableFilterSelectionState,\r\n        OperationTableState,\r\n        OperationDetailState,\r\n        OperationDetailFilterState\r\n    ])\r\n    ],\r\n    declarations: [\r\n        OperationsMainComponent,\r\n        OperationsMainTabComponent,\r\n        OperationTypeFamilyTableComponent,\r\n        OperationTypeFamilyDetailComponent,\r\n        OperationTypeTableComponent,\r\n        OperationTypeDetailComponent,\r\n        OperationTableComponent,\r\n        OperationDetailComponent\r\n        // FilterLabelComponent,\r\n        // FilterMovementComponent,\r\n        // FilterComboMultipleComponent,\r\n        // FilterComboMultipleGroupComponent\r\n\r\n    ],\r\n    providers : [\r\n      OtfService,\r\n      OtService,\r\n      OperationService\r\n    ],\r\n    entryComponents: [\r\n      // FuseConfirmDialogModule\r\n  ]\r\n  })\r\n  export class OperationsModule { }"],"sourceRoot":"webpack:///"}