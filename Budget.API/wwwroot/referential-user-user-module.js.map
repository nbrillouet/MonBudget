{"version":3,"sources":["./node_modules/rxjs-compat/_esm5/add/observable/of.js","./src/app/main/_models/filters/user.filter.ts","./src/app/main/_ngxs/user/user-list-filter/user-list-filter.action.ts","./src/app/main/_ngxs/user/user-list-filter/user-list-filter.state.ts","./src/app/main/_ngxs/user/user-list/user-list.action.ts","./src/app/main/_ngxs/user/user-list/user-list.state.ts","./src/app/main/apps/referential/user/avatar-editor/avatar-editor.component.ts","./src/app/main/apps/referential/user/avatar-editor/avatar-editor.component.html","./src/app/main/apps/referential/user/user-detail/user-detail.component.ts","./src/app/main/apps/referential/user/user-detail/user-detail.component.html","./src/app/main/apps/referential/user/user-detail/user-detail.resolver.ts","./src/app/main/apps/referential/user/user-list/user-list.component.ts","./src/app/main/apps/referential/user/user-list/user-list.component.html","./src/app/main/apps/referential/user/user-list/user-list.resolver.ts","./src/app/main/apps/referential/user/user.module.ts"],"names":[],"mappings":"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","file":"referential-user-user-module.js","sourcesContent":["import { Observable, of as staticOf } from 'rxjs';\nObservable.of = staticOf;\n//# sourceMappingURL=of.js.map","import { Pagination } from \"../pagination.model\";\r\n\r\nexport class FilterUserTableSelected {\r\n    keyword: number;\r\n    pagination: Pagination;\r\n    \r\n    constructor () {\r\n        this.keyword = null;\r\n        this.pagination = new Pagination();\r\n    }\r\n}\r\n\r\nexport class FilterUserTable {\r\n    selected : FilterUserTableSelected;\r\n\r\n    constructor () {\r\n        this.selected = new FilterUserTableSelected();\r\n    }\r\n}","import { FilterUserTable, FilterUserTableSelected } from \"app/main/_models/filters/user.filter\";\r\nimport { Pagination } from \"app/main/_models/pagination.model\";\r\n\r\nexport const USER_TABLE_FILTER_LOAD = 'user-table-filter-load';\r\n// export const USER_TABLE_FILTER_LOAD_SUCCESS = 'user-table-filter-load-success';\r\nexport const USER_TABLE_FILTER_CHANGE = 'user-table-filter-change';\r\nexport const USER_TABLE_FILTER_UPDATE_PAGINATION = 'user-table-filter-update-pagination';\r\n\r\nexport class LoadUserTableFilter {\r\n    static readonly type = USER_TABLE_FILTER_LOAD;\r\n \r\n    constructor(public payload: FilterUserTable) { }\r\n}\r\n\r\n// export class LoadUserTableFilterSuccess {\r\n//     static readonly type = USER_TABLE_FILTER_LOAD_SUCCESS;\r\n \r\n//     constructor(public payload: any) { }\r\n// }\r\n\r\nexport class ChangeUserTableFilter {\r\n    static readonly type = USER_TABLE_FILTER_CHANGE;\r\n \r\n    constructor(public payload: FilterUserTableSelected) { }\r\n}\r\n\r\nexport class UpdatePaginationUserTableFilter {\r\n    static readonly type = USER_TABLE_FILTER_UPDATE_PAGINATION;\r\n \r\n    constructor(public payload: Pagination) { }\r\n}","import { FilterInfo } from \"app/main/_models/generics/filter.info.model\";\r\nimport { FilterUserTable, FilterUserTableSelected } from \"app/main/_models/filters/user.filter\";\r\nimport { UserService } from \"app/main/apps/referential/user/user.service\";\r\nimport { LoadUserTableFilter, ChangeUserTableFilter, UpdatePaginationUserTableFilter } from \"./user-list-filter.action\";\r\nimport { LoadUserTableDatas } from \"../user-list/user-list.action\";\r\nimport { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { LoaderState } from \"../../_base/loader-state\";\r\n\r\n\r\nexport class UserTableFilterStateModel extends FilterInfo<FilterUserTable> {\r\n    constructor () {\r\n        super(FilterUserTable);\r\n    }\r\n}\r\n\r\nlet userTableFilterStateModel = new UserTableFilterStateModel();\r\n\r\n@State<UserTableFilterStateModel>({\r\n    name: 'UserTableFilter',\r\n    defaults : userTableFilterStateModel\r\n})\r\n\r\nexport class UserTableFilterState extends LoaderState {\r\n    reloadFilters: boolean = true;\r\n    hasChangedState: boolean = true;\r\n\r\n    constructor(\r\n        private _userService: UserService,\r\n        private _store: Store\r\n        ) {\r\n            super();\r\n    }\r\n\r\n    @Selector()\r\n    static get(state: UserTableFilterStateModel) {\r\n \r\n        return state;\r\n    }\r\n\r\n    @Action(LoadUserTableFilter)\r\n    loadUserTableFilter(context: StateContext<UserTableFilterStateModel>, action: LoadUserTableFilter) {\r\n        this.loading(context,'filters');\r\n        \r\n        const state = context.getState();\r\n        state.filters = null;\r\n        context.patchState(state);\r\n\r\n        this._userService.getUserTableFilter(action.payload.selected)\r\n            .subscribe(result=> {\r\n                let state = context.getState();\r\n                state.filters = result; // new FilterUserTable();\r\n                context.patchState(state);\r\n                //TODO: a controler\r\n                context.dispatch(new ChangeUserTableFilter(action.payload.selected));\r\n\r\n                this.loaded(context,'filters');\r\n            });\r\n    }\r\n\r\n\r\n    @Action(ChangeUserTableFilter)\r\n    changeFilter(context: StateContext<UserTableFilterStateModel>, action: ChangeUserTableFilter) {\r\n        this._store.dispatch(new LoadUserTableDatas(action.payload));\r\n        \r\n        // const state = context.getState();\r\n\r\n        \r\n        // if(this.ReloadFilters(state.filters,action.payload)) {\r\n        //     context.dispatch(new LoadUserTableFilter(action.payload));\r\n        // }\r\n        // else {\r\n        //     if(this.HasChangedState(state.filters.selected,action.payload.selected)) {\r\n        //         state.filters = action.payload;\r\n        //         context.patchState(state);\r\n\r\n        //         this._store.dispatch(new LoadUserTableDatas(state.filters.selected));\r\n        //     }\r\n        // }\r\n     }\r\n\r\n    @Action(UpdatePaginationUserTableFilter)\r\n    UpdatePaginationUserTableFilter(context: StateContext<UserTableFilterStateModel>, action: UpdatePaginationUserTableFilter) {\r\n        const state = context.getState();\r\n\r\n        state.filters.selected.pagination = action.payload;\r\n        context.patchState(state);\r\n    }\r\n\r\n    // HasChangedState( state: FilterUserTableSelected, payload : FilterUserTableSelected ) {\r\n    //     if (this.hasChangedState)\r\n    //     {\r\n    //         this.hasChangedState = false;\r\n    //         return true;\r\n    //     }\r\n    //     if(payload.keyword == null ) {\r\n    //         return false;\r\n    //     }\r\n    //     if( state.keyword==null && payload.keyword!=null ) {\r\n    //         return true;\r\n    //     };\r\n    //     if(state.keyword!=payload.keyword) {\r\n    //         return true;\r\n    //     }\r\n        \r\n    // }\r\n\r\n    // ReloadFilters(state: FilterUserTable, payload:FilterUserTable ) {\r\n    //     if(this.reloadFilters)\r\n    //     {\r\n    //         this.reloadFilters=false;\r\n    //         return true;\r\n    //     }\r\n\r\n    //     return false;\r\n    // }\r\n}","export const USER_TABLE_LOAD = 'user-table-load';\r\n// export const USER_TABLE_LOAD_SUCCESS = 'user-table-load-success';\r\nexport const USER_TABLE_FILTER_CHANGE = 'user-table-filter-change';\r\nexport const USER_TABLE_CLEAR = 'user-table-clear';\r\n\r\nexport class LoadUserTableDatas {\r\n    static readonly type = USER_TABLE_LOAD;\r\n \r\n    constructor(public payload: any) { }\r\n}\r\n\r\n// export class LoadUserTableDatasSuccess {\r\n//     static readonly type = USER_TABLE_LOAD_SUCCESS;\r\n \r\n//     constructor(public payload: any) { }\r\n// }\r\n\r\nexport class ClearUserTableDatas {\r\n    static readonly type = USER_TABLE_CLEAR;\r\n}","import { UserTable } from \"app/main/_models/user.model\";\r\nimport { UserService } from \"app/main/apps/referential/user/user.service\";\r\nimport { LoadUserTableDatas, ClearUserTableDatas } from \"./user-list.action\";\r\nimport { UpdatePaginationUserTableFilter } from \"../user-list-filter/user-list-filter.action\";\r\nimport { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { LoaderState } from \"../../_base/loader-state\";\r\nimport { Datas } from \"app/main/_models/generics/detail-info.model\";\r\n\r\nexport class UserTableStateModel extends Datas<UserTable[]> {\r\n    constructor () {\r\n        super();\r\n    }\r\n}\r\n\r\nlet tableInfo = new UserTableStateModel();\r\n@State<UserTableStateModel>({\r\n    name: 'UserTable',\r\n    defaults : tableInfo\r\n})\r\n\r\nexport class UserTableState extends LoaderState {\r\n    constructor(\r\n        private _userService: UserService,\r\n        private _store: Store) {\r\n            super();\r\n    }\r\n\r\n    @Selector()\r\n    static get(state: UserTableStateModel) {\r\n        return state;\r\n    }\r\n\r\n    @Action(LoadUserTableDatas)\r\n    loadGrid(context: StateContext<UserTableStateModel>, action: LoadUserTableDatas) {\r\n        this.loading(context,'datas');\r\n        \r\n        const state = context.getState();\r\n        state.datas = null;\r\n        context.patchState(state);\r\n\r\n        this._userService.getUserTable(action.payload)\r\n            .subscribe(result=> {\r\n                let state = context.getState();\r\n                state.datas = result.datas;\r\n                context.patchState(state);\r\n                //TODO a controler\r\n                this._store.dispatch(new UpdatePaginationUserTableFilter(action.payload.pagination));\r\n\r\n                this.loaded(context,'datas');\r\n            });\r\n    }\r\n\r\n    // @Action(LoadUserTableDatasSuccess)\r\n    // loadSuccess(context: StateContext<UserTableStateModel>, action: LoadUserTableDatasSuccess) {\r\n    //     let state = context.getState();\r\n    //     state.datas = action.payload.datas;\r\n\r\n    //     context.patchState(state);\r\n    //     this._store.dispatch(new UpdatePaginationUserTableFilter(action.payload.pagination));\r\n    // }\r\n\r\n    @Action(ClearUserTableDatas)\r\n    clear(context: StateContext<UserTableStateModel>) {\r\n        return context.setState(new UserTableStateModel());\r\n    }\r\n}","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FileUploader } from 'ng2-file-upload';\nimport { NotificationsService } from 'angular2-notifications';\nimport { fuseAnimations } from '@fuse/animations';\nimport { IUser } from 'app/main/_models/user.model';\nimport { environment } from 'environments/environment';\nimport { AuthService } from 'app/main/_services/auth.service';\nimport { Select, Store } from '@ngxs/store';\nimport { UserDetailState } from 'app/main/_ngxs/user/user-detail/user-detail.state';\nimport { Observable } from 'rxjs';\nimport { LoadUserDetail } from 'app/main/_ngxs/user/user-detail/user-detail.action';\n\n@Component({\n  selector: 'avatar-editor',\n  templateUrl: './avatar-editor.component.html',\n  styleUrls: ['./avatar-editor.component.scss'],\n  animations   : fuseAnimations\n})\n\nexport class AvatarEditorComponent implements OnInit {\n  @Select(UserDetailState.getUser) user$: Observable<IUser>;\n  \n  @Output() getUserAvatarChange = new EventEmitter<string>();\n  \n  uploader: FileUploader = new FileUploader({});\n  hasBaseDropZoneOver: boolean = false;\n  baseUrl = environment.apiUrl;\n  user: IUser;\n\n  constructor(\n    private authService: AuthService,\n    private notificationService: NotificationsService,\n    private _store: Store\n  ) { }\n\n  ngOnInit() {\n    this.user$.subscribe((user:IUser) => {\n      if(user) {\n          this.user = user;\n      }\n    });\n\n    this.initializeUploader();\n  }\n\n  public fileOverBase(e: any): void {\n    this.hasBaseDropZoneOver = e;\n  }\n\n  initializeUploader() {\n\n    let currentUser = JSON.parse(localStorage.getItem('currentUser'));\n    this.uploader = new FileUploader({\n      url: `${this.baseUrl}users/${this.user.id}/avatar`,\n      authToken: `Bearer ${currentUser.token}`,\n      isHTML5: true,\n      allowedFileType: ['image'],\n      removeAfterUpload: true,\n      autoUpload: false,\n      maxFileSize: 10*1024*1024\n    });\n\n    this.uploader.onSuccessItem = (item, response, status, headers) => {\n      if (response) {\n        const res: IUser = JSON.parse(response);\n        this.user.avatarUrl = res.avatarUrl;\n\n\n        // this.authService.changeAvatar(res.avatarUrl);\n\n        //pour fonctionnement meme quand refresh du navigateur:\n        // this.authService.currentUser.avatarUrl = res.avatarUrl;\n        // localStorage.setItem('user',JSON.stringify(this.authService.currentUser));\n        this._store.dispatch(new LoadUserDetail(this.user))\n        this.notificationService.success('Enregistrement réussi', 'Votre avatar est modifié');\n\n      }\n      \n    }\n\n    this.uploader.onErrorItem = ((item, response, status, headers):any => {\n\n      // var error = this.handleError(response);\n      this.notificationService.error('Erreur', 'Erreur');\n      });\n\n\n  }\n\n  // private handleError(error: any)\n  // {\n  //     const serverError = JSON.parse(error);\n  //     let modelStateErrors = '';\n  //     if(serverError) {\n  //         for(const key in serverError)\n  //         {\n  //             if(serverError[key]){\n  //                 modelStateErrors += serverError[key] + '\\n';\n  //             }\n  //         }\n  //     }\n\n  //     return modelStateErrors;\n\n  // }\n}\n","<!-- <div class=\"row\">\n    <div class=\"file-uploader\" *ngIf=\"uploader.queue.length==0\">\n        <input hidden type=\"file\"\n            ng2FileSelect\n            [uploader]=\"uploader\"\n            #fileInput/> \n    \n        <button \n            mat-fab\n            class=\"add-file-button mat-warn\"\n            (click)=\"fileInput.click()\"\n            aria-label=\"Add file\"\n            *fuseIfOnDom [@animate]=\"{value:'*', params:{delay:'300ms',scale:'0.2'}}\">\n            <mat-icon>add</mat-icon>\n        </button>\n    </div>\n\n    <div class=\"col-md-3\">\n        <h3>Modifier votre avatar:</h3>\n        <button \n            ng2FileDrop \n            [ngClass]=\"{'nv-file-over': hasBaseDropZoneOver}\"\n            (fileOver)=\"fileOverBase($event)\"\n            [uploader]=\"uploader\"\n            class=\"well drop-zone\">\n            Drop Zone\n        </button>\n    </div>\n\n    <div class=\"col-md-9\" style=\"margin-bottom: 40px\">\n        <p>Queue length: {{ uploader?.queue?.length }}</p>\n        <table class=\"table\">\n            <thead>\n            <tr>\n                <th width=\"50%\">Name</th>\n                <th>Size</th>\n                <th>Progress</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let item of uploader.queue\">\n                <td><strong>{{ item?.file?.name }}</strong></td>\n                <td nowrap>{{ item?.file?.size/1024/1024 | number:'.2' }} MB</td>\n                <td >\n                    <mat-progress-bar mode=\"determinate\" [value]=\"item.progress\"></mat-progress-bar>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n        <div>\n            <div>\n                Queue progress:\n                <mat-progress-bar mode=\"determinate\" [value]=\"uploader.progress\"></mat-progress-bar>\n            </div>\n            <button type=\"button\" class=\"btn btn-success btn-s\"\n                    (click)=\"uploader.uploadAll()\" [disabled]=\"!uploader.getNotUploadedItems().length\">\n                <span class=\"glyphicon glyphicon-upload\"></span> Upload\n            </button>\n            <button type=\"button\" class=\"btn btn-warning btn-s\"\n                    (click)=\"uploader.cancelAll()\" [disabled]=\"!uploader.isUploading\">\n                <span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel\n            </button>\n            <button type=\"button\" class=\"btn btn-danger btn-s\"\n                    (click)=\"uploader.clearQueue()\" [disabled]=\"!uploader.queue.length\">\n                <span class=\"glyphicon glyphicon-trash\"></span> Remove\n            </button>\n        </div>\n    </div>\n</div> -->\n\n<div class=\"header-upload\">\n        <!-- ADD FILE BUTTON -->\n        <div class=\"file-uploader\" *ngIf=\"uploader.queue.length==0\">\n            <input hidden type=\"file\"\n                ng2FileSelect\n                [uploader]=\"uploader\"\n                #fileInput/> \n     \n            <button \n                mat-fab\n                class=\"add-file-button mat-warn\"\n                (click)=\"fileInput.click()\"\n                aria-label=\"Add file\"\n                *fuseIfOnDom [@animate]=\"{value:'*', params:{delay:'300ms',scale:'0.2'}}\">\n                <mat-icon  style=\"color:white;\">add</mat-icon>\n            </button>\n        </div>\n        \n        <!-- ADD DROP ZONE -->\n        <div *ngIf=\"uploader.queue.length==0\">\n            <button mat-button \n                ng2FileDrop\n                [ngClass]=\"{'nv-file-over': hasBaseDropZoneOver}\"\n                (fileOver)=\"fileOverBase($event)\"\n                [uploader]=\"uploader\"\n                class=\"well drop-zone\"\n                [@animate]=\"{value:'*',params:{delay:'50ms',scale:'0.2'}}\">\n                <div class=\"parachute_32\" style=\"padding-left:35px;\">Déposer le fichier ici</div>\n              \n            </button>\n        </div>\n        \n        <!-- ADD FILE UPLOAD INFO -->\n        <table *ngIf=\"uploader.queue.length>0\" class=\"file-upload-info\">\n            <tbody>\n            <tr *ngFor=\"let item of uploader.queue\">\n                <td style=\"text-align: right;\">Nom fichier: {{ item?.file?.name }}</td>\n                <td style=\"text-align: right;\" nowrap> Taille: {{ item?.file?.size/1024/1024 | number:'.2' }} MB</td>\n            </tr>\n            <tr>\n                <td colspan=\"2\">\n                    <div *ngIf=\"uploader.progress>0\">\n                        <mat-progress-bar mode=\"determinate\" [value]=\"uploader.progress\"></mat-progress-bar>\n                    </div>\n                    <div style=\"text-align: right\" *ngIf=\"uploader.progress==0\">\n                        <button mat-raised-button color=\"warn\"\n                            (click)=\"uploader.clearQueue()\" [disabled]=\"!uploader.queue.length\">\n                        <span class=\"glyphicon glyphicon-trash\"></span> Remove\n                        </button>\n                        <button mat-raised-button color=\"primary\"\n                                (click)=\"uploader.uploadAll()\" [disabled]=\"!uploader.getNotUploadedItems().length\">\n                            <span class=\"glyphicon glyphicon-upload\"></span> Upload\n                        </button>\n                    </div>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>","import { Component, OnInit } from '@angular/core';\n// import { fuseAnimations } from '../../../../../../core/animations';\n// import { IUser } from '../../../../../_models/user.model';\nimport { UserService } from '../user.service';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SimpleNotificationsModule } from 'angular2-notifications';\nimport { NotificationsService } from 'angular2-notifications';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\n// import { FuseUtils } from '../../../../../../core/fuseUtils';\n// import { AuthService } from '../../../../../_services/auth.service';\n// import { IGMapSearchInfo } from '../../../../../_models/g-map.model.';\nimport { DatePipe } from '@angular/common';\nimport { Moment } from 'moment';\nimport {MAT_MOMENT_DATE_FORMATS, MomentDateAdapter} from '@angular/material-moment-adapter';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { fuseAnimations } from '@fuse/animations';\nimport { IUser } from 'app/main/_models/user.model';\nimport { IGMapSearchInfo } from 'app/main/_models/g-map.model.';\nimport { AuthService } from 'app/main/_services/auth.service';\nimport { Select } from '@ngxs/store';\nimport { UserDetailState } from 'app/main/_ngxs/user/user-detail/user-detail.state';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-user-detail',\n  templateUrl: './user-detail.component.html',\n  styleUrls: ['./user-detail.component.scss'],\n  animations   : fuseAnimations,\n  providers: [\n    {provide: MAT_DATE_LOCALE, useValue: 'fr'},\n    {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\n    {provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS},\n  ]\n})\n\nexport class UserDetailComponent implements OnInit {\n  @Select(UserDetailState.getUser) user$: Observable<IUser>;\n\n  user : IUser;\n  onUserChanged: Subscription;\n  pageType: string;\n  userForm: FormGroup;\n  avatarUrl: string;\n  gMapSearchInfo: IGMapSearchInfo;\n  checkboxes: number[]=[];\n  hasSelectedAccounts: boolean;\n\n  constructor(\n    private userService: UserService,\n    private notificationService: NotificationsService,\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private datePipe: DatePipe,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n  ) { }\n\n  ngOnInit() {\n    \n    this.pageType = 'edit';\n    \n    this.user$.subscribe((user:IUser) => {\n      if(user) {\n          this.user = user;\n\n          this.gMapSearchInfo = <IGMapSearchInfo> { \n              idGMapAddress: this.user.idGMapAddress,\n              operationPositionSearch:\"\",\n              operationPlaceSearch: \"\"\n              };\n\n          this.userForm=this.createUserForm();\n      }\n    });\n    // this.activatedRoute.data.subscribe(data => {\n    //   this.user = data['user'];\n   \n    //   this.gMapSearchInfo = <IGMapSearchInfo> { \n    //     idGMapAddress: this.user.idGMapAddress,\n    //     operationPositionSearch:\"\",\n    //     operationPlaceSearch: \"\"\n    //     }\n\n    //   this.userForm=this.createUserForm();\n      \n    //   this.authService.currentAvatarUrl\n    //     .subscribe(avatarUrl=> this.avatarUrl = avatarUrl);\n    // })\n\n    \n\n\n  }\n\n  createUserForm()\n  {\n      return this.formBuilder.group({\n          id              : [this.user.id],\n          userName        : [this.user.userName,[Validators.required]],\n          lastName        : [this.user.lastName,[Validators.required]],\n          firstName       : [this.user.firstName,[Validators.required]],\n          idGMapAddress   : [this.user.idGMapAddress],\n          dateOfBirth     : [this.user.dateOfBirth],\n          age             : [{value:this.user.age,disabled:true}],\n          dateCreated     : [{value:this.datePipe.transform(this.user.dateCreated,\"dd/MM/yyyy\"),disabled:true}],\n          dateLastActive  : [{value:this.datePipe.transform(this.user.dateLastActive,\"dd/MM/yyyy\"),disabled:true}]\n      });\n  }\n\n  \n  updateUser({ value, valid }: { value: IUser, valid: boolean }) {\n    this.user.id=value.id;\n    this.user.userName=value.userName;\n    this.user.lastName=value.lastName;\n    this.user.firstName=value.firstName;\n    this.user.idGMapAddress=value.idGMapAddress;\n    \n    var mt:Moment = <Moment>this.userForm.value.dateOfBirth;\n\n    var dt = mt.toDate();\n    dt.setMinutes(dt.getMinutes() - dt.getTimezoneOffset());\n    this.user.dateOfBirth = dt;\n\n    this.userService.updateUser(this.authService.decodedToken.nameid, this.user)\n      .subscribe(next => {\n        this.userForm.reset(this.user);\n        this.notificationService.success('Sauvegarde réussi', 'Utilisateur enregistré');\n      }, error => {\n        this.notificationService.error('Echec sauvegarde', error);\n      })\n  }\n \n  updateUserAvatar(avatarUrl)\n  {\n\n    this.user.avatarUrl=avatarUrl;\n  }\n\n  onChangeGMapAddress($event) {\n    if (this.user.idGMapAddress!=$event.id)\n    {\n      this.user.idGMapAddress = $event.id;\n\n    }\n    \n  }\n\n  onSelectedChange($event,idAccount:number)\n  {\n    if($event.checked) {\n      this.checkboxes.push(idAccount);\n    }\n    else\n    {\n      let index = this.checkboxes.indexOf(idAccount);\n      if (index > -1) {\n        this.checkboxes.splice(index, 1);\n      }\n    }\n    this.hasSelectedAccounts = this.checkboxes.length>0;\n\n  }\n\n  navigate() {\n    this.router.navigate([`apps/users`]);\n\n  }\n  \n}","<div id=\"user\" class=\"page-layout carded fullwidth inner-scroll\" >\n\n    <!-- TOP BACKGROUND -->\n    <div class=\"top-bg accent\"></div>\n    <!-- / TOP BACKGROUND -->\n  \n    <!-- CENTER -->\n    <div class=\"center\">\n        <!-- <div *ngIf='userForm'> -->\n          <!-- HEADER -->\n        <div class=\"header accent\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n  \n            <!-- APP TITLE -->\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n  \n                <button class=\"mr-0 mr-sm-16\" mat-icon-button\n                  [routerLink]=\"'/apps/referential/users'\"\n                   >\n                    <mat-icon>arrow_back</mat-icon>\n                </button>\n  \n                <div class=\"product-image mr-8 mr-sm-16\"  [@animate]=\"{value:'*',params:{delay:'50ms',scale:'0.2'}}\">\n                    <img *ngIf=\"user.avatarUrl\" [src]=\"user.avatarUrl\">\n                    <img *ngIf=\"!user.avatarUrl\" [src]=\"'assets/images/avatars/profile.jpg'\">\n                </div>\n  \n                <div fxLayout=\"column\" fxLayoutAlign=\"start start\"\n                      [@animate]=\"{value:'*',params:{delay:'100ms',x:'-25px'}}\">\n                    <div class=\"h2\" *ngIf=\"pageType ==='edit'\">\n                        {{user.userName}}\n                    </div>\n                    <div class=\"h2\" *ngIf=\"pageType ==='new'\">\n                        Nouveau Utilisateur\n                    </div>\n                    <div class=\"subtitle secondary-text\">\n                        <span>Details Utilisateur</span>\n                    </div>\n                </div>\n            </div>\n            <!-- / APP TITLE -->\n  \n            <!-- <button mat-raised-button\n                    class=\"save-product-button mat-white-bg mt-16 mt-sm-0\"\n                    [disabled]=\"productForm.invalid\"\n                    *ngIf=\"pageType ==='new'\" (click)=\"addProduct()\">\n                <span>ADD</span>\n            </button> -->\n  \n            <!-- (click)=\"updateUser()\" -->\n            <button mat-raised-button\n                    class=\"save-product-button white mt-16 mt-sm-0\"\n                    [disabled]=\"userForm.invalid || userForm.pristine\"\n                    *ngIf=\"pageType ==='edit'\" (click)=\"updateUser(userForm)\">\n                <span>SAVE</span>\n            </button>\n        </div>\n        <!-- / HEADER -->\n  \n        <!-- CONTENT CARD -->\n        <div class=\"content-card\">\n  \n            <!-- CONTENT -->\n            <div class=\"content\">\n                <form name=\"userForm\" [formGroup]=\"userForm\" class=\"product w-100-p\" fxLayout=\"column\" fxFlex>\n                  \n                  \n                      <mat-tab-group>\n  \n                        <mat-tab label=\"Généralité\">\n                            <div class=\"tab-content p-24\" fusePerfectScrollbar>\n                                      \n                              <div class=\"mb-24\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                                  <mat-icon class=\"mr-12 mt-12\">account_circle</mat-icon>\n                                  <mat-form-field class=\"w-100-p\">\n                                      <input matInput\n                                              name=\"userName\"\n                                              formControlName=\"userName\"\n                                              placeholder=\"Pseudonyme\"\n                                              required>\n                                  </mat-form-field>\n                              </div>\n                              \n                              <div class=\"mb-24\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                                  <mat-icon class=\"mr-12 mt-12\">account_circle</mat-icon>\n                                  <mat-form-field class=\"w-100-p\">\n                                      <input matInput\n                                              name=\"firstName\"\n                                              formControlName=\"firstName\"\n                                              placeholder=\"Nom\"\n                                              required>\n                                  </mat-form-field>\n                              </div>\n                              \n                              <div class=\"mb-24\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                                  <mat-icon class=\"mr-12 mt-12\">account_circle</mat-icon>\n                                  <mat-form-field class=\"w-100-p\">\n                                      <input matInput\n                                              name=\"lastName\"\n                                              formControlName=\"lastName\"\n                                              placeholder=\"Prénom\"\n                                              required>\n                                  </mat-form-field>\n                              </div>\n  \n                              <div class=\"mb-24\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                                  <mat-icon class=\"mr-12 mt-12\">cake</mat-icon>\n                                  <mat-form-field class=\"w-100-p\">\n                                      <input class=\"mini-input\" matInput [matDatepicker]=\"dateOfBirth\" formControlName=\"dateOfBirth\" placeholder=\"Date de naissance\"> \n                                      <mat-datepicker-toggle matSuffix [for]=\"dateOfBirth\"></mat-datepicker-toggle>\n                                      <mat-datepicker #dateOfBirth></mat-datepicker>\n                                  </mat-form-field>\n                                  \n                                  <div style=\"width:10%\"></div>\n  \n                                  <mat-icon class=\"mr-12 mt-12\">cake</mat-icon>\n                                  <mat-form-field class=\"w-100-p\">\n                                      <input matInput\n                                              name=\"age\"\n                                              formControlName=\"age\"\n                                              placeholder=\"Age\">\n                                  </mat-form-field>\n                              </div>\n  \n                              <div class=\"mb-24\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                                  <mat-icon class=\"mr-12 mt-12\">calendar_today</mat-icon>\n                                  <mat-form-field class=\"w-100-p\">\n                                      <input matInput\n                                              name=\"dateCreated\"\n                                              formControlName=\"dateCreated\"\n                                              placeholder=\"Date de création\"\n                                              required>\n                                  </mat-form-field>\n  \n                                  <div style=\"width:10%\"></div>\n  \n                                  <mat-icon class=\"mr-12 mt-12\" >calendar_today</mat-icon>\n                                  <mat-form-field class=\"w-100-p\" >\n                                      <input matInput\n                                              name=\"dateLastActive\"\n                                              formControlName=\"dateLastActive\"\n                                              placeholder=\"Date de dernière activité\"\n                                              required>\n                                  </mat-form-field>\n                              </div>\n  \n                              <div class=\"mb-24\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                                  <!-- <mat-icon class=\"mr-12 mt-12\">cake</mat-icon> -->\n                                  \n                              </div>\n                            </div>\n                        </mat-tab>\n  \n                        <mat-tab label=\"Adresse\">\n                          <div class=\"tab-content p-24\" fusePerfectScrollbar>\n                              <g-map-search *ngIf=\"gMapSearchInfo\" [gMapSearchInfo]=\"gMapSearchInfo\" (changeGMapAddress)=\"onChangeGMapAddress($event)\"></g-map-search>\n                          \n                              <mat-form-field class=\"w-0-p\" [hidden]=true>\n                                  <input matInput\n                                          name=\"idGMapAddress\"\n                                          formControlName=\"idGMapAddress\"\n                                          placeholder=\"idGMapAddress\"\n                                          \n                                          >\n                              </mat-form-field>\n                          </div>\n                      </mat-tab>\n  \n                        <mat-tab label=\"Avatar\">\n                              <!-- <div fxLayout='row' fxLayoutAlign=\"center center\" fxLayoutWrap >     -->\n                          <mat-card class=\"example-card\">\n                                      <mat-card-header>\n                                          <avatar-editor (getUserAvatarChange)=\"updateUserAvatar($event)\"></avatar-editor>\n           \n                                      </mat-card-header>\n                                      \n                                      <mat-card-content>\n                                          <img class=\"avatar\" [src]=\"user.avatarUrl\" alt=\"{{user.userName}}\">\n                                      </mat-card-content>\n                              </mat-card>\n                         <!-- </div> -->\n                              <!-- <div class=\"avatar-card\">\n                                  <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\n                                      <div fxFlex=\"50\">\n                                          <avatar-editor [user]=\"user\" (getUserAvatarChange)=\"updateUserAvatar($event)\"></avatar-editor>\n                                      </div>\n                                      <div class=\"avatar-image\" fxFlex=\"50\">\n                                          <img mat-card-image *ngIf=\"avatarUrl\" src=\"{{avatarUrl}}\" alt=\"{{user.userName}}\">\n                                      </div>\n                                      \n                                  </div> \n                              </div> -->\n                     \n                        </mat-tab>\n  \n                        <mat-tab label=\"Comptes associés\">\n                            <div class=\"px-24 py-8\"  style=\"background-color:#039BE5; \">\n                                <div class=\"mail-selection\" fxFlex=\"row\" fxLayoutAlign=\"start center\">\n                                    <button mat-icon-button matTooltip=\"Ajouter un compte\" >\n                                        <mat-icon style=\"color:white;\">add</mat-icon>\n                                    </button>\n                                    <button mat-icon-button matTooltip=\"Supprimer le(s) compte(s) sélectionné(s)\" *ngIf=\"hasSelectedAccounts\">\n                                        <mat-icon style=\"color:white;\">delete</mat-icon>\n                                    </button>\n                                </div>\n                            </div> \n                          \n                          \n                          \n                          \n                          \n                          \n                          \n                          <div fxLayout='column' fxLayoutWrap class=\"cards\">\n                              <div fxFlex=\"20\" class=\"example-card\" *ngFor=\"let bankAgency of user.bankAgencies\">\n                              <mat-card class=\"example-card\">\n                              <mat-card-header>\n                                      \n                                      <!-- mat-card-avatar -->\n                                <img mat-card-avatar src=\"{{bankAgency.logoClassName}}\"   alt=\"bank agency logo\">\n                                <!-- <div mat-card-avatar class=\"example-header-image\"></div> -->\n                                <mat-card-title>{{bankAgency.labelLong}}</mat-card-title>\n                                <mat-card-subtitle>{{bankAgency.labelShort}}</mat-card-subtitle>\n                              </mat-card-header>\n                              \n                              <mat-card-content>\n                                  <div fxLayout='column' fxLayoutWrap class=\"cards\">\n                                      <div style=\"background-color: #EDEEEF;color: #1F1F1F;height:30px;\" fxFlex=\"20\" fxLayout='row'> \n                                          <div style=\"width:10%;\"></div>\n                                          <div [hidden]=\"true\" style=\"width:10%;\"></div>\n                                          <div style=\"width:20%;margin-top:7px;\">Numéro de compte</div>\n                                          <div style=\"width:20%;margin-top:7px;\">Nom du compte</div>\n                                      </div>\n                                      <div fxFlex=\"20\" fxLayout='row' *ngFor=\"let account of bankAgency.accounts\">\n                                          <!-- <mat-divider></mat-divider> -->\n                                          <!-- [(ngModel)]=\"checkboxes[account.id]\"  -->\n                                          <!-- (ngModelChange)=\"onSelectedChange(account.id)\" -->\n                                          <mat-checkbox style=\"width:10%;margin-top: 10px;\"\n                                              (change)=\"onSelectedChange($event,account.id)\"\n                                              (click)=\"$event.stopPropagation()\">\n                                          </mat-checkbox>\n                                          <div [hidden]=\"true\" style=\"width:10%;margin-top: 10px;\">{{account.id}}</div>\n                                          <div style=\"width:20%;margin-top: 12px;\">{{account.number}}</div>\n                                          <div style=\"width:20%;margin-top: 12px;\">{{account.label}}</div>\n                                      </div>\n                                  </div>\n                              </mat-card-content>\n                              <!-- </mat-card-content>\n                                <p>\n                                  The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\n                                  A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\n                                  bred for hunting.\n                                </p>\n                              </mat-card-content> -->\n                              <!-- </div> -->\n                              <!-- <mat-card-actions>\n                                <button mat-button>LIKE</button>\n                                <button mat-button>SHARE</button>\n                              </mat-card-actions> -->\n                            </mat-card>\n                            </div>\n                          </div>\n                        </mat-tab>\n  \n  \n                    </mat-tab-group>\n                </form>\n  \n            </div>\n            <!-- / CONTENT -->\n  \n        </div>\n        <!-- / CONTENT CARD -->\n        </div>\n      \n    </div>\n  \n    <!-- / CENTER -->\n  <!-- </div> -->","\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Resolve, Router, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { SimpleNotificationsModule } from 'angular2-notifications';\r\nimport { NotificationsService } from 'angular2-notifications';\r\n// import { IUser } from '../../../../../_models/user.model';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/observable/of';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { UserService } from '../user.service';\r\nimport { IUser } from 'app/main/_models/user.model';\r\n\r\n@Injectable()\r\nexport class UserDetailResolver implements Resolve<IUser> {\r\n    \r\n    constructor(\r\n        private userService: UserService,\r\n        private router: Router,\r\n        private notificationService: NotificationsService\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot): Observable<IUser> {\r\n        \r\n        return this.userService.getUser(route.params['idUser'])\r\n            .catch(error => {\r\n                this.notificationService.error('Erreur de retour de données', error);\r\n                this.router.navigate(['/users']);\r\n                return Observable.of(null);\r\n            })\r\n    }\r\n}","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\nimport { DataSource } from '@angular/cdk/table';\nimport { Observable } from 'rxjs/Observable';\nimport { CollectionViewer } from '@angular/cdk/collections';\nimport { fuseAnimations } from '@fuse/animations';\nimport { UserTable } from 'app/main/_models/user.model';\nimport { UserTableFilterState } from 'app/main/_ngxs/user/user-list-filter/user-list-filter.state';\nimport { Select, Store } from '@ngxs/store';\nimport { UserTableState } from 'app/main/_ngxs/user/user-list/user-list.state';\nimport { FilterInfo } from 'app/main/_models/generics/filter.info.model';\nimport { FilterUserTable, FilterUserTableSelected } from 'app/main/_models/filters/user.filter';\nimport { ChangeUserTableFilter, LoadUserTableFilter } from 'app/main/_ngxs/user/user-list-filter/user-list-filter.action';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { Datas } from 'app/main/_models/generics/detail-info.model';\nimport { Column, EnumFilterType, EnumStyleType } from 'app/main/apps/web-component/mat-table-filter/model/mat-table-filter.model';\nimport { Router } from '@angular/router';\n// import { DataInfo } from 'app/main/_models/generics/detail-info.model';\n\n@Component({\n  selector: 'app-userList',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.scss'],\n  animations : fuseAnimations\n})\nexport class UserListComponent implements OnInit {\n  @Select(UserTableFilterState.get) userTableFilter$: Observable<FilterInfo<FilterUserTable>>;\n  @Select(UserTableState.get) userTable$: Observable<Datas<UserTable[]>>;\n\n  filterUser: FilterUserTable = new FilterUserTable();\n  columns : Column[]=\n     [ \n        {index:0, field: 'id',label:'id',isSortable:true,width:{isFixed:true,value:70},filter: {type:EnumFilterType.none, datas: null, isEmpty: true}, pipe: false,style:{type:EnumStyleType.label,datas:null }},\n        {index:1, field: 'avatarUrl',label:'avatar',isSortable:false,width:{isFixed:true,value:70},filter: {type:EnumFilterType.none, datas: null, isEmpty: true}, pipe: false,style:{type: EnumStyleType.image,datas:null}},\n        {index:2, field: 'lastName',label:'nom',isSortable:true,width:{isFixed:false,value:-1},filter: {type:EnumFilterType.none, datas: null, isEmpty: true}, pipe: false,style:{type:EnumStyleType.label,datas:null}},\n        {index:3, field: 'firstName',label:'prénom',isSortable:true,width:{isFixed:false,value:-1},filter: {type:EnumFilterType.none, datas: null, isEmpty: true},pipe:false,style:{type:EnumStyleType.label,datas:null}},\n        {index:4, field: 'userName',label:'pseudonyme',isSortable:true,width:{isFixed:false,value:-1},filter: {type:EnumFilterType.none, datas: null, isEmpty: true},pipe:false,style:{type:EnumStyleType.label,datas:null}}\n    ];\n    \n  constructor(\n    private _router: Router,\n    private _store: Store\n    ) {\n\n      this.userTableFilter$.subscribe(userTableFilter=>{\n        if(userTableFilter.loader['filters'] && userTableFilter.loader['filters'].loaded) {\n          this.filterUser = userTableFilter.filters;\n        }\n      });\n\n    }\n  ngOnInit(){\n    this._store.dispatch(new LoadUserTableFilter(this.filterUser));\n  }\n\n  onRowClick($event) {\n    this._router.navigate([`apps/referential/users/${$event.id}/detail`]);\n  }\n\n  applyFilter(selected: FilterUserTableSelected) {\n    this._store.dispatch(new ChangeUserTableFilter(selected));\n  }\n}\n\n//   @Select(UserTableFilterState.get) userTableFilter$: Observable<FilterInfo<FilterUserTable>>;\n//   @Select(UserTableState.get) userTable$: Observable<Datas<UserTable[]>>;\n  \n//   @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n//   @ViewChild(MatSort, { static: false }) sort: MatSort;\n\n//   dataSource : UserDataSource;\n//   filterUser: FilterUserTable;\n//   displayedColumns = ['id','avatar','lastName','firstName','userName','button'];\n  \n//   formSearch: FormGroup;\n\n  \n//   constructor(\n//     private _formBuilder: FormBuilder,\n//     private _store: Store\n//   ) {\n//       this.formSearch = this._formBuilder.group({\n//         keyword: [null, []]\n//       });\n\n//       this.formSearch.get('keyword').valueChanges\n//         .subscribe(val => {\n  \n//             this.filterUser.selected.keyword=val;\n//             this.dataSource.load(this.filterUser);\n  \n//         });\n\n//       this.filterUser = new FilterUserTable();\n//       this.dataSource = new UserDataSource(this._store);\n//       this.dataSource.load(this.filterUser);\n\n//   }\n\n//   ngOnInit() {\n//     this.userTableFilter$.subscribe(userTableFilter=>{\n//       this.filterUser = JSON.parse(JSON.stringify(userTableFilter.filters));\n//     });\n\n//   }\n\n//   onPageChangeEvent($event) {\n//     this.filterUser.selected.pagination.currentPage = this.paginator.pageIndex;\n//     this.loadPage();\n//   }\n  \n//   onSortChangeEvent($event): void {\n\n//     this.filterUser.selected.pagination.currentPage=0;\n//     this.loadPage();\n//   }\n\n//   loadPage() {\n//     this.filterUser.selected.pagination.nbItemsPerPage = this.paginator.pageSize;\n//     this.filterUser.selected.pagination.sortColumn = this.sort.active;\n//     this.filterUser.selected.pagination.sortDirection = this.sort.direction;\n\n//     this.dataSource.load(this.filterUser);\n//   }\n \n// }\n\n// export class UserDataSource extends DataSource<Datas<UserTable>> {\n//   @Select(UserTableState.get) asifTable$: Observable<Datas<UserTable[]>>;\n\n//   constructor (\n//     private _store: Store\n//     ) {\n//     super();\n//   }\n\n//   connect(collectionViewer: CollectionViewer): Observable<any[]> {\n//     return this.asifTable$.map(x=>x.datas);\n//   }\n\n//   disconnect(collectionViewer: CollectionViewer): void {\n//   }\n  \n//   clear()\n//   {\n//   }\n\n//   load(filter: FilterUserTable) {\n//     this._store.dispatch(new ChangeUserTableFilter(filter));\n//     }\n//   }\n\n","<div id=\"users\" class=\"page-layout carded fullwidth inner-scroll\" >\n\n  <!-- TOP BACKGROUND -->\n  <div class=\"top-bg accent\"></div>\n  <!-- / TOP BACKGROUND -->\n\n    <!-- CENTER -->\n    <div class=\"center\">\n\n        <!-- HEADER -->\n        <div class=\"header accent\"\n            fxLayout=\"column\" fxLayoutAlign=\"center center\"\n            fxLayout.gt-xs=\"row\" fxLayoutAlign.gt-xs=\"space-between center\">\n\n            <!-- APP TITLE -->\n            <div class=\"logo my-12 m-sm-0\"\n                fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                <mat-icon class=\"logo-icon mr-16\" *fuseIfOnDom [@animate]=\"{value:'*',params:{delay:'50ms',scale:'0.2'}}\">account_box</mat-icon>\n                <span class=\"logo-text h1\" *fuseIfOnDom [@animate]=\"{value:'*',params:{delay:'100ms',x:'-25px'}}\">Utilisateurs</span>\n            </div>\n            <!-- / APP TITLE -->\n\n            <!-- SEARCH -->\n            <!-- <div class=\"search-input-wrapper mx-12 m-md-0\" [formGroup]=\"formSearch\"\n                fxFlex=\"0 0 80px\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n                <label for=\"search\" class=\"mr-8\">\n                    <mat-icon class=\"secondary-text\">search</mat-icon>\n                </label>\n                <mat-form-field floatPlaceholder=\"never\" >\n                    <input id=\"search\" matInput placeholder=\"Recherche\"\n                        formControlName=\"keyword\"\n                    >\n                </mat-form-field>\n            </div> -->\n            <!-- / SEARCH -->\n\n            <!-- <button mat-raised-button\n                    [routerLink]=\"'/apps/e-commerce/products/new'\"\n                    class=\"add-product-button mat-white-bg my-12 mt-sm-0\">\n                <span>ADD NEW PRODUCT</span>\n            </button> -->\n\n        </div>\n        \n        <!-- / HEADER -->\n\n        <!-- CONTENT CARD -->\n        <div class=\"content-card mat-white-bg\">\n            <div class=\"example-container\">\n                <mat-table-filter \n                    [observableFilter] = \"userTableFilter$\"\n                    [observableTable] = \"userTable$\"\n                    [columns] = \"columns\"\n                    (onRowClick) = \"onRowClick($event)\"\n                    (changeFilter)=\"applyFilter($event)\">\n                </mat-table-filter>\n            \n            <!-- \n              <mat-table class=\"users-table\"\n                #table [dataSource]=\"dataSource\"\n                [@animateStagger]=\"{value:'50'}\"\n                matSort matSortActive=\"id\" matSortDirection=\"asc\" matSortDisableClear\n                fusePerfectScrollbar>\n\n\n                <ng-container matColumnDef=\"id\" >\n                    <mat-header-cell *matHeaderCellDef mat-sort-header style=\"flex:0 0 80px;\">ID</mat-header-cell>\n                    <mat-cell *matCellDef=\"let user\" style=\"flex:0 0 80px;\">\n                        <p class=\"text-truncate\">{{user.id}}</p>\n                    </mat-cell>\n                </ng-container>\n                    \n\n             \n                <ng-container cdkColumnDef=\"avatar\" >\n                    <mat-header-cell *cdkHeaderCellDef mat-sort-header style=\"flex:0 0 80px;\">avatar</mat-header-cell>\n                    <mat-cell *cdkCellDef=\"let user\" style=\"flex:0 0 80px;\">\n                        <img class=\"avatar\" *ngIf=\"user.avatarUrl\" [src]=\"user.avatarUrl\">\n                        <img class=\"avatar\" *ngIf=\"!user.avatarUrl\" [src]=\"'assets/images/avatars/profile.jpg'\">\n                    </mat-cell>\n                </ng-container>\n\n     \n                <ng-container matColumnDef=\"lastName\" >\n                    <mat-header-cell *matHeaderCellDef mat-sort-header>Prénom</mat-header-cell>\n                    <mat-cell *matCellDef=\"let user\">\n                        <p class=\"text-truncate\">{{user.lastName}}</p>\n                    </mat-cell>\n                </ng-container>\n\n\n                <ng-container matColumnDef=\"firstName\" >\n                    <mat-header-cell *matHeaderCellDef mat-sort-header>Nom</mat-header-cell>\n                    <mat-cell *matCellDef=\"let user\">\n                        <p class=\"text-truncate\">{{user.firstName}}</p>\n                    </mat-cell>\n                </ng-container>\n\n   \n                <ng-container matColumnDef=\"userName\" >\n                    <mat-header-cell *matHeaderCellDef mat-sort-header>Pseudonyme</mat-header-cell>\n                    <mat-cell *matCellDef=\"let user\">\n                        <p class=\"text-truncate\">{{user.userName}}</p>\n                    </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"button\" >\n                    <mat-header-cell style=\"flex:0 0 30px;\"  *matHeaderCellDef ></mat-header-cell>\n                    <mat-cell style=\"flex:0 0 30px;\" *matCellDef=\"let user\">\n                            <button \n                                matTooltip=\"Détail\" \n                                mat-icon-button \n                                [routerLink]=\"['/apps/referential/users/', user.id]\"\n                            >\n                                <mat-icon>more_horiz</mat-icon>\n                            </button>\n                    </mat-cell>\n                </ng-container> \n\n                <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                    \n                <mat-row *cdkRowDef=\"let user; columns: displayedColumns;\"\n                    class=\"user\"\n                    matRipple\n                >\n                </mat-row>\n            </mat-table>\n            <div *ngIf=\"(userTable$ | async).loader['datas'].loading\"\n                class=\"h-96 w-100-p\"\n                fxLayout=\"column\"\n                fxLayoutAlign=\"center center\">\n                <mat-spinner diameter=\"40\" color=\"accent\" fxLayout=\"row\"></mat-spinner>\n                <div style=\"color:#4285F3\" fxLayout=\"row\">chargement...</div>\n            </div> \n\n            <mat-paginator *ngIf=\"(userTableFilter$ | async).filters && (userTableFilter$ | async).filters.selected.pagination; let pagination\"\n                (page)=\"onPageChangeEvent($event)\"\n                [length]=\"pagination.totalItems\" \n                [pageSize]=\"pagination.nbItemsPerPage\"\n                [pageSizeOptions]=\"[15, 100, 200]\">\n            </mat-paginator>\n-->\n\n        </div> \n\n\n\n        </div> \n        <!-- / CONTENT CARD -->\n    </div>\n    <!-- / CENTER -->\n</div>\n","\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Resolve, Router, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { SimpleNotificationsModule } from 'angular2-notifications';\r\nimport { NotificationsService } from 'angular2-notifications';\r\n// import { IUser } from '../../../../../_models/user.model';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/observable/of';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { UserService } from '../user.service';\r\nimport { IUser } from 'app/main/_models/user.model';\r\n\r\n@Injectable()\r\nexport class UserListResolver implements Resolve<IUser[]> {\r\npageSize = 5;\r\npageNumber = 1;\r\n\r\n    constructor(\r\n        private userService: UserService,\r\n        private router: Router,\r\n        private notificationService: NotificationsService\r\n    ) {}\r\n    \r\n    resolve(route: ActivatedRouteSnapshot): Observable<IUser[]> {\r\n        return null;\r\n        // return this.userService.getUsers(this.pageNumber, this.pageSize)\r\n        //     .catch(error => {\r\n        //         this.notificationService.error('Erreur de retour de données', error);\r\n        //         this.router.navigate(['']);\r\n\r\n        //         return Observable.of(null);\r\n        // })\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { UserDetailComponent } from './user-detail/user-detail.component';\nimport { UserListComponent } from './user-list/user-list.component';\nimport { RouterModule } from '@angular/router';\nimport { UserService } from './user.service';\nimport { UserDetailResolver } from './user-detail/user-detail.resolver';\nimport { UserListResolver } from './user-list/user-list.resolver';\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { AvatarEditorComponent } from './avatar-editor/avatar-editor.component';\nimport { GMapModule } from '../../g-map/g-map.module';\nimport { AuthGuard } from 'app/_guards/auth.guard';\nimport { FuseSharedModule } from '@fuse/shared.module';\nimport { PreventUnsavedChanges } from 'app/_guards/prevent-unsaved-changes.guard';\nimport { NgxsModule } from '@ngxs/store';\nimport { UserTableState } from 'app/main/_ngxs/user/user-list/user-list.state';\nimport { UserTableFilterState } from 'app/main/_ngxs/user/user-list-filter/user-list-filter.state';\nimport { AngularMaterialModule } from 'app/angular-material.module';\nimport { MatTableFilterModule } from '../../web-component/mat-table-filter/mat-table-filter.module';\n\nconst routes = [\n  {\n      path     : '',\n      component: UserListComponent,\n      // resolve  : { users: UserListResolver },\n      canActivate: [AuthGuard]\n  },\n  {\n      path     : ':idUser/detail',\n      component: UserDetailComponent,\n      resolve  : { user: UserDetailResolver },\n      canActivate: [AuthGuard]\n      // canDeactivate: [PreventUnsavedChanges]\n  }\n  // ,\n  // {\n  //     path      : '**',\n  //     redirectTo: ''\n  // }\n];\n\n@NgModule({\n  imports: [\n    FuseSharedModule,\n    AngularMaterialModule,\n    FileUploadModule,\n    GMapModule,\n    MatTableFilterModule,\n    NgxsModule.forFeature([\n      UserTableState,\n      UserTableFilterState\n    ]),\n    RouterModule.forChild(routes)\n  ],\n  declarations: [\n    UserListComponent,\n    UserDetailComponent,\n    AvatarEditorComponent\n  ],\n  providers : [\n    UserService,\n    UserDetailResolver,\n    UserListResolver,\n    PreventUnsavedChanges\n  ]\n})\nexport class UserModule { }"],"sourceRoot":"webpack:///"}