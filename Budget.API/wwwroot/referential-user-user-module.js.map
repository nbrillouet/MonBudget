{"version":3,"sources":["./node_modules/rxjs-compat/_esm5/add/observable/of.js","./src/app/main/_models/filters/user.filter.ts","./src/app/main/_ngxs/user/user-table/user-table-filter-selected/user-table-filter-selected.action.ts","./src/app/main/_ngxs/user/user-table/user-table-filter-selected/user-table-filter-selected.state.ts","./src/app/main/_ngxs/user/user-table/user-table-filter-selection/user-table-filter-selection.action.ts","./src/app/main/_ngxs/user/user-table/user-table-filter-selection/user-table-filter-selection.state.ts","./src/app/main/_ngxs/user/user-table/user-table.action.ts","./src/app/main/_ngxs/user/user-table/user-table.state.ts","./src/app/main/apps/referential/user/avatar-editor/avatar-editor.component.ts","./src/app/main/apps/referential/user/avatar-editor/avatar-editor.component.html","./src/app/main/apps/referential/user/user-detail/user-detail.component.ts","./src/app/main/apps/referential/user/user-detail/user-detail.component.html","./src/app/main/apps/referential/user/user-detail/user-detail.resolver.ts","./src/app/main/apps/referential/user/user-table/user-table.component.ts","./src/app/main/apps/referential/user/user-table/user-table.component.html","./src/app/main/apps/referential/user/user.module.ts"],"names":[],"mappings":"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","file":"referential-user-user-module.js","sourcesContent":["import { Observable, of as staticOf } from 'rxjs';\nObservable.of = staticOf;\n//# sourceMappingURL=of.js.map","import { Pagination } from \"../pagination.model\";\r\n\r\nexport class FilterUserTableSelected {\r\n    keyword: number;\r\n    pagination: Pagination;\r\n    \r\n    constructor () {\r\n        this.keyword = null;\r\n        this.pagination = new Pagination();\r\n    }\r\n}\r\n\r\nexport class FilterUserTableSelection {\r\n    // selected : FilterUserTableSelected;\r\n\r\n    constructor () {\r\n        // this.selected = new FilterUserTableSelected();\r\n    }\r\n}","import { Pagination } from \"app/main/_models/pagination.model\";\r\nimport { FilterUserTableSelected } from \"app/main/_models/filters/user.filter\";\r\n\r\nexport const USER_TABLE_FILTER_SELECTED_UPDATE_PAGINATION = 'user-table-filter-selected-update-pagination';\r\nexport const USER_TABLE_FILTER_SELECTED_CHANGE = 'user-table-filter-selected-change';\r\n\r\nexport class UpdatePaginationUserTableFilterSelected {\r\n    static readonly type = USER_TABLE_FILTER_SELECTED_UPDATE_PAGINATION;\r\n \r\n    constructor(public payload: Pagination) { }\r\n}\r\n\r\nexport class SynchronizeUserTableFilterSelected {\r\n    static readonly type = USER_TABLE_FILTER_SELECTED_CHANGE;\r\n \r\n    constructor(public payload: FilterUserTableSelected) { }\r\n}\r\n\r\n\r\n// import { FilterUserTable, FilterUserTableSelected } from \"app/main/_models/filters/user.filter\";\r\n// import { Pagination } from \"app/main/_models/pagination.model\";\r\n\r\n// export const USER_TABLE_FILTER_LOAD = 'user-table-filter-load';\r\n// export const USER_TABLE_FILTER_CHANGE = 'user-table-filter-change';\r\n// export const USER_TABLE_FILTER_UPDATE_PAGINATION = 'user-table-filter-update-pagination';\r\n\r\n// export class LoadUserTableFilter {\r\n//     static readonly type = USER_TABLE_FILTER_LOAD;\r\n \r\n//     constructor(public payload: FilterUserTable) { }\r\n// }\r\n\r\n// export class ChangeUserTableFilter {\r\n//     static readonly type = USER_TABLE_FILTER_CHANGE;\r\n \r\n//     constructor(public payload: FilterUserTableSelected) { }\r\n// }\r\n\r\n// export class UpdatePaginationUserTableFilter {\r\n//     static readonly type = USER_TABLE_FILTER_UPDATE_PAGINATION;\r\n \r\n//     constructor(public payload: Pagination) { }\r\n// }","import { Injectable } from \"@angular/core\";\r\nimport { FilterUserTableSelected } from \"app/main/_models/filters/user.filter\";\r\nimport { FilterSelected } from \"app/main/_models/generics/filter.info.model\";\r\nimport { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { SynchronizeUserTableFilterSelected, UpdatePaginationUserTableFilterSelected } from \"./user-table-filter-selected.action\";\r\nimport { LoadUserTable } from \"../user-table.action\";\r\n\r\nexport class UserTableFilterSelectedStateModel extends FilterSelected<FilterUserTableSelected> {\r\n    constructor () {\r\n        super(FilterUserTableSelected);\r\n    }\r\n}\r\n\r\nlet userTableFilterSelectedStateModel = new UserTableFilterSelectedStateModel();\r\n\r\n@State<UserTableFilterSelectedStateModel>({\r\n    name: 'UserTableFilterSelected',\r\n    defaults : userTableFilterSelectedStateModel\r\n})\r\n\r\n@Injectable()\r\nexport class UserTableFilterSelectedState extends LoaderState {\r\n    constructor(\r\n        private _store: Store\r\n        ) {\r\n            super();\r\n    }\r\n\r\n    // async delay(ms: number) {\r\n    //     await new Promise(resolve => setTimeout(()=>resolve(), ms)).then(()=>console.log(\"fired\"));\r\n    //   }\r\n\r\n    @Selector()\r\n    static get(state: UserTableFilterSelectedStateModel) {\r\n        return state;\r\n    }\r\n       \r\n\r\n    @Action(UpdatePaginationUserTableFilterSelected)\r\n    UpdatePaginationUserTableFilterSelected(context: StateContext<UserTableFilterSelectedStateModel>, action: UpdatePaginationUserTableFilterSelected) {\r\n        this.loading(context,'filter-selected');\r\n\r\n        let state = context.getState();\r\n        state.selected.pagination = action.payload;\r\n        context.patchState(state);\r\n\r\n        this.loaded(context,'filter-selected');\r\n    }\r\n\r\n    @Action(SynchronizeUserTableFilterSelected)\r\n    SynchronizeUserTableFilterSelected(context: StateContext<UserTableFilterSelectedStateModel>, action: SynchronizeUserTableFilterSelected) {\r\n        this.loading(context,'filter-selected');\r\n        let state = context.getState();\r\n        state.selected = action.payload;\r\n        context.patchState(state);\r\n        this.loaded(context,'filter-selected');\r\n\r\n        this._store.dispatch(new LoadUserTable(action.payload));\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n// import { FilterInfo } from \"app/main/_models/generics/filter.info.model\";\r\n// import { FilterUserTable, FilterUserTableSelected } from \"app/main/_models/filters/user.filter\";\r\n// import { UserService } from \"app/main/apps/referential/user/user.service\";\r\n// import { LoadUserTableFilter, ChangeUserTableFilter, UpdatePaginationUserTableFilter } from \"./user-list-filter.action\";\r\n// import { LoadUserTableDatas } from \"../user-list/user-list.action\";\r\n// import { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\n// import { LoaderState } from \"../../_base/loader-state\";\r\n\r\n\r\n// export class UserTableFilterStateModel extends FilterInfo<FilterUserTable> {\r\n//     constructor () {\r\n//         super(FilterUserTable);\r\n//     }\r\n// }\r\n\r\n// let userTableFilterStateModel = new UserTableFilterStateModel();\r\n\r\n// @State<UserTableFilterStateModel>({\r\n//     name: 'UserTableFilter',\r\n//     defaults : userTableFilterStateModel\r\n// })\r\n\r\n// export class UserTableFilterState extends LoaderState {\r\n//     reloadFilters: boolean = true;\r\n//     hasChangedState: boolean = true;\r\n\r\n//     constructor(\r\n//         private _userService: UserService,\r\n//         private _store: Store\r\n//         ) {\r\n//             super();\r\n//     }\r\n\r\n//     @Selector()\r\n//     static get(state: UserTableFilterStateModel) {\r\n \r\n//         return state;\r\n//     }\r\n\r\n//     @Action(LoadUserTableFilter)\r\n//     loadUserTableFilter(context: StateContext<UserTableFilterStateModel>, action: LoadUserTableFilter) {\r\n//         this.loading(context,'filters');\r\n        \r\n//         const state = context.getState();\r\n//         state.filters = null;\r\n//         context.patchState(state);\r\n\r\n//         this._userService.getUserTableFilter(action.payload.selected)\r\n//             .subscribe(result=> {\r\n//                 let state = context.getState();\r\n//                 state.filters = result; // new FilterUserTable();\r\n//                 context.patchState(state);\r\n//                 //TODO: a controler\r\n//                 context.dispatch(new ChangeUserTableFilter(action.payload.selected));\r\n\r\n//                 this.loaded(context,'filters');\r\n//             });\r\n//     }\r\n\r\n\r\n//     @Action(ChangeUserTableFilter)\r\n//     changeFilter(context: StateContext<UserTableFilterStateModel>, action: ChangeUserTableFilter) {\r\n//         this._store.dispatch(new LoadUserTableDatas(action.payload));\r\n        \r\n//         // const state = context.getState();\r\n\r\n        \r\n//         // if(this.ReloadFilters(state.filters,action.payload)) {\r\n//         //     context.dispatch(new LoadUserTableFilter(action.payload));\r\n//         // }\r\n//         // else {\r\n//         //     if(this.HasChangedState(state.filters.selected,action.payload.selected)) {\r\n//         //         state.filters = action.payload;\r\n//         //         context.patchState(state);\r\n\r\n//         //         this._store.dispatch(new LoadUserTableDatas(state.filters.selected));\r\n//         //     }\r\n//         // }\r\n//      }\r\n\r\n//     @Action(UpdatePaginationUserTableFilter)\r\n//     UpdatePaginationUserTableFilter(context: StateContext<UserTableFilterStateModel>, action: UpdatePaginationUserTableFilter) {\r\n//         const state = context.getState();\r\n\r\n//         state.filters.selected.pagination = action.payload;\r\n//         context.patchState(state);\r\n//     }\r\n\r\n//     // HasChangedState( state: FilterUserTableSelected, payload : FilterUserTableSelected ) {\r\n//     //     if (this.hasChangedState)\r\n//     //     {\r\n//     //         this.hasChangedState = false;\r\n//     //         return true;\r\n//     //     }\r\n//     //     if(payload.keyword == null ) {\r\n//     //         return false;\r\n//     //     }\r\n//     //     if( state.keyword==null && payload.keyword!=null ) {\r\n//     //         return true;\r\n//     //     };\r\n//     //     if(state.keyword!=payload.keyword) {\r\n//     //         return true;\r\n//     //     }\r\n        \r\n//     // }\r\n\r\n//     // ReloadFilters(state: FilterUserTable, payload:FilterUserTable ) {\r\n//     //     if(this.reloadFilters)\r\n//     //     {\r\n//     //         this.reloadFilters=false;\r\n//     //         return true;\r\n//     //     }\r\n\r\n//     //     return false;\r\n//     // }\r\n// }","import { FilterUserTableSelected } from \"app/main/_models/filters/user.filter\";\r\n\r\nexport const USER_TABLE_FILTER_SELECTION_LOAD = 'user-table-filter-selection-load';\r\n\r\nexport class LoadUserTableFilterSelection {\r\n    static readonly type = USER_TABLE_FILTER_SELECTION_LOAD;\r\n \r\n    constructor(public payload: FilterUserTableSelected) { }\r\n}","import { FilterSelection } from \"app/main/_models/generics/filter.info.model\";\r\nimport { FilterUserTableSelection } from \"app/main/_models/filters/user.filter\";\r\nimport { State, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { LoaderState } from \"app/main/_ngxs/_base/loader-state\";\r\nimport { UserService } from \"app/main/apps/referential/user/user.service\";\r\nimport { LoadUserTableFilterSelection } from \"./user-table-filter-selection.action\";\r\n\r\nexport class UserTableFilterSelectionStateModel extends FilterSelection<FilterUserTableSelection> {\r\n    constructor () {\r\n        super(FilterUserTableSelection);\r\n    }\r\n}\r\n\r\nlet userTableFilterSelectionStateModel = new UserTableFilterSelectionStateModel();\r\n\r\n@State<UserTableFilterSelectionStateModel>({\r\n    name: 'UserTableFilterSelection',\r\n    defaults : userTableFilterSelectionStateModel\r\n})\r\n\r\n@Injectable()\r\nexport class UserTableFilterSelectionState extends LoaderState {\r\n\r\n    constructor(\r\n        private _userService: UserService\r\n        ) {\r\n            super();\r\n    }\r\n\r\n    // async delay(ms: number) {\r\n    //     await new Promise(resolve => setTimeout(()=>resolve(), ms)).then(()=>console.log(\"fired\"));\r\n    // }\r\n\r\n    @Selector()\r\n    static get(state: UserTableFilterSelectionStateModel) {\r\n        return state;\r\n    }\r\n\r\n    @Action(LoadUserTableFilterSelection)\r\n    LoadUserTableFilterSelection(context: StateContext<UserTableFilterSelectionStateModel>, action: LoadUserTableFilterSelection) {\r\n        this.loading(context,'filter-selection');\r\n        \r\n        const state = context.getState();\r\n        state.selection = null;\r\n        context.patchState(state);\r\n\r\n        this._userService.getUserTableFilter(action.payload)\r\n            .subscribe(result=> {\r\n                let state = context.getState();\r\n                state.selection = result;\r\n                context.patchState(state);\r\n\r\n                this.loaded(context,'filter-selection');\r\n            });\r\n\r\n    }\r\n\r\n}","export const USER_TABLE_LOAD = 'user-table-load';\r\nexport const USER_TABLE_CLEAR = 'user-table-clear';\r\n\r\nexport class LoadUserTable {\r\n    static readonly type = USER_TABLE_LOAD;\r\n \r\n    constructor(public payload: any) { }\r\n}\r\n\r\nexport class ClearUserTable {\r\n    static readonly type = USER_TABLE_CLEAR;\r\n}","import { UserTable } from \"app/main/_models/user.model\";\r\nimport { UserService } from \"app/main/apps/referential/user/user.service\";\r\nimport { State, Store, Selector, Action, StateContext } from \"@ngxs/store\";\r\nimport { LoaderState } from \"../../_base/loader-state\";\r\nimport { Datas } from \"app/main/_models/generics/detail-info.model\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { UpdatePaginationUserTableFilterSelected } from \"./user-table-filter-selected/user-table-filter-selected.action\";\r\nimport { LoadUserTable, ClearUserTable } from \"./user-table.action\";\r\n\r\nexport class UserTableStateModel extends Datas<UserTable[]> {\r\n    constructor () {\r\n        super();\r\n    }\r\n}\r\n\r\nlet tableInfo = new UserTableStateModel();\r\n@State<UserTableStateModel>({\r\n    name: 'UserTable',\r\n    defaults : tableInfo\r\n})\r\n\r\n@Injectable()\r\nexport class UserTableState extends LoaderState {\r\n    constructor(\r\n        private _userService: UserService,\r\n        private _store: Store) {\r\n            super();\r\n    }\r\n\r\n    @Selector()\r\n    static get(state: UserTableStateModel) {\r\n        return state;\r\n    }\r\n\r\n    @Action(LoadUserTable)\r\n    loadGrid(context: StateContext<UserTableStateModel>, action: LoadUserTable) {\r\n        this.loading(context,'datas');\r\n        \r\n        const state = context.getState();\r\n        state.datas = null;\r\n        context.patchState(state);\r\n\r\n        this._userService.getUserTable(action.payload)\r\n            .subscribe(result=> {\r\n                let state = context.getState();\r\n                state.datas = result.datas;\r\n                context.patchState(state);\r\n\r\n                this._store.dispatch(new UpdatePaginationUserTableFilterSelected(result.pagination));\r\n\r\n                this.loaded(context,'datas');\r\n            });\r\n    }\r\n\r\n    @Action(ClearUserTable)\r\n    clear(context: StateContext<UserTableStateModel>) {\r\n        return context.setState(new UserTableStateModel());\r\n    }\r\n}","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FileUploader } from 'ng2-file-upload';\nimport { NotificationsService } from 'angular2-notifications';\nimport { fuseAnimations } from '@fuse/animations';\nimport { IUser } from 'app/main/_models/user.model';\nimport { environment } from 'environments/environment';\nimport { AuthService } from 'app/main/_services/auth.service';\nimport { Select, Store } from '@ngxs/store';\nimport { UserDetailState } from 'app/main/_ngxs/user/user-detail/user-detail.state';\nimport { Observable } from 'rxjs';\nimport { LoadUserDetail } from 'app/main/_ngxs/user/user-detail/user-detail.action';\n\n@Component({\n  selector: 'avatar-editor',\n  templateUrl: './avatar-editor.component.html',\n  styleUrls: ['./avatar-editor.component.scss'],\n  animations   : fuseAnimations\n})\n\nexport class AvatarEditorComponent implements OnInit {\n  @Select(UserDetailState.getUser) user$: Observable<IUser>;\n  \n  @Output() getUserAvatarChange = new EventEmitter<string>();\n  \n  uploader: FileUploader = new FileUploader({});\n  hasBaseDropZoneOver: boolean = false;\n  baseUrl = environment.apiUrl;\n  user: IUser;\n\n  constructor(\n    private authService: AuthService,\n    private notificationService: NotificationsService,\n    private _store: Store\n  ) { }\n\n  ngOnInit() {\n    this.user$.subscribe((user:IUser) => {\n      if(user) {\n          this.user = user;\n      }\n    });\n\n    this.initializeUploader();\n  }\n\n  public fileOverBase(e: any): void {\n    this.hasBaseDropZoneOver = e;\n  }\n\n  initializeUploader() {\n\n    let currentUser = JSON.parse(localStorage.getItem('currentUser'));\n    this.uploader = new FileUploader({\n      url: `${this.baseUrl}users/${this.user.id}/avatar`,\n      authToken: `Bearer ${currentUser.token}`,\n      isHTML5: true,\n      allowedFileType: ['image'],\n      removeAfterUpload: true,\n      autoUpload: false,\n      maxFileSize: 10*1024*1024\n    });\n\n    this.uploader.onSuccessItem = (item, response, status, headers) => {\n      if (response) {\n        const res: IUser = JSON.parse(response);\n        this.user.avatarUrl = res.avatarUrl;\n\n\n        // this.authService.changeAvatar(res.avatarUrl);\n\n        //pour fonctionnement meme quand refresh du navigateur:\n        // this.authService.currentUser.avatarUrl = res.avatarUrl;\n        // localStorage.setItem('user',JSON.stringify(this.authService.currentUser));\n        this._store.dispatch(new LoadUserDetail(this.user))\n        this.notificationService.success('Enregistrement réussi', 'Votre avatar est modifié');\n\n      }\n      \n    }\n\n    this.uploader.onErrorItem = ((item, response, status, headers):any => {\n\n      // var error = this.handleError(response);\n      this.notificationService.error('Erreur', 'Erreur');\n      });\n\n\n  }\n\n  // private handleError(error: any)\n  // {\n  //     const serverError = JSON.parse(error);\n  //     let modelStateErrors = '';\n  //     if(serverError) {\n  //         for(const key in serverError)\n  //         {\n  //             if(serverError[key]){\n  //                 modelStateErrors += serverError[key] + '\\n';\n  //             }\n  //         }\n  //     }\n\n  //     return modelStateErrors;\n\n  // }\n}\n","<!-- <div class=\"row\">\n    <div class=\"file-uploader\" *ngIf=\"uploader.queue.length==0\">\n        <input hidden type=\"file\"\n            ng2FileSelect\n            [uploader]=\"uploader\"\n            #fileInput/> \n    \n        <button \n            mat-fab\n            class=\"add-file-button mat-warn\"\n            (click)=\"fileInput.click()\"\n            aria-label=\"Add file\"\n            *fuseIfOnDom [@animate]=\"{value:'*', params:{delay:'300ms',scale:'0.2'}}\">\n            <mat-icon>add</mat-icon>\n        </button>\n    </div>\n\n    <div class=\"col-md-3\">\n        <h3>Modifier votre avatar:</h3>\n        <button \n            ng2FileDrop \n            [ngClass]=\"{'nv-file-over': hasBaseDropZoneOver}\"\n            (fileOver)=\"fileOverBase($event)\"\n            [uploader]=\"uploader\"\n            class=\"well drop-zone\">\n            Drop Zone\n        </button>\n    </div>\n\n    <div class=\"col-md-9\" style=\"margin-bottom: 40px\">\n        <p>Queue length: {{ uploader?.queue?.length }}</p>\n        <table class=\"table\">\n            <thead>\n            <tr>\n                <th width=\"50%\">Name</th>\n                <th>Size</th>\n                <th>Progress</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let item of uploader.queue\">\n                <td><strong>{{ item?.file?.name }}</strong></td>\n                <td nowrap>{{ item?.file?.size/1024/1024 | number:'.2' }} MB</td>\n                <td >\n                    <mat-progress-bar mode=\"determinate\" [value]=\"item.progress\"></mat-progress-bar>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n        <div>\n            <div>\n                Queue progress:\n                <mat-progress-bar mode=\"determinate\" [value]=\"uploader.progress\"></mat-progress-bar>\n            </div>\n            <button type=\"button\" class=\"btn btn-success btn-s\"\n                    (click)=\"uploader.uploadAll()\" [disabled]=\"!uploader.getNotUploadedItems().length\">\n                <span class=\"glyphicon glyphicon-upload\"></span> Upload\n            </button>\n            <button type=\"button\" class=\"btn btn-warning btn-s\"\n                    (click)=\"uploader.cancelAll()\" [disabled]=\"!uploader.isUploading\">\n                <span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel\n            </button>\n            <button type=\"button\" class=\"btn btn-danger btn-s\"\n                    (click)=\"uploader.clearQueue()\" [disabled]=\"!uploader.queue.length\">\n                <span class=\"glyphicon glyphicon-trash\"></span> Remove\n            </button>\n        </div>\n    </div>\n</div> -->\n\n<div class=\"header-upload\">\n        <!-- ADD FILE BUTTON -->\n        <div class=\"file-uploader\" *ngIf=\"uploader.queue.length==0\">\n            <input hidden type=\"file\"\n                ng2FileSelect\n                [uploader]=\"uploader\"\n                #fileInput/> \n     \n            <button \n                mat-fab\n                class=\"add-file-button mat-warn\"\n                (click)=\"fileInput.click()\"\n                aria-label=\"Add file\"\n                *fuseIfOnDom [@animate]=\"{value:'*', params:{delay:'300ms',scale:'0.2'}}\">\n                <mat-icon  style=\"color:white;\">add</mat-icon>\n            </button>\n        </div>\n        \n        <!-- ADD DROP ZONE -->\n        <div *ngIf=\"uploader.queue.length==0\">\n            <button mat-button \n                ng2FileDrop\n                [ngClass]=\"{'nv-file-over': hasBaseDropZoneOver}\"\n                (fileOver)=\"fileOverBase($event)\"\n                [uploader]=\"uploader\"\n                class=\"well drop-zone\"\n                [@animate]=\"{value:'*',params:{delay:'50ms',scale:'0.2'}}\">\n                <div class=\"parachute_32\" style=\"padding-left:35px;\">Déposer le fichier ici</div>\n              \n            </button>\n        </div>\n        \n        <!-- ADD FILE UPLOAD INFO -->\n        <table *ngIf=\"uploader.queue.length>0\" class=\"file-upload-info\">\n            <tbody>\n            <tr *ngFor=\"let item of uploader.queue\">\n                <td style=\"text-align: right;\">Nom fichier: {{ item?.file?.name }}</td>\n                <td style=\"text-align: right;\" nowrap> Taille: {{ item?.file?.size/1024/1024 | number:'.2' }} MB</td>\n            </tr>\n            <tr>\n                <td colspan=\"2\">\n                    <div *ngIf=\"uploader.progress>0\">\n                        <mat-progress-bar mode=\"determinate\" [value]=\"uploader.progress\"></mat-progress-bar>\n                    </div>\n                    <div style=\"text-align: right\" *ngIf=\"uploader.progress==0\">\n                        <button mat-raised-button color=\"warn\"\n                            (click)=\"uploader.clearQueue()\" [disabled]=\"!uploader.queue.length\">\n                        <span class=\"glyphicon glyphicon-trash\"></span> Remove\n                        </button>\n                        <button mat-raised-button color=\"primary\"\n                                (click)=\"uploader.uploadAll()\" [disabled]=\"!uploader.getNotUploadedItems().length\">\n                            <span class=\"glyphicon glyphicon-upload\"></span> Upload\n                        </button>\n                    </div>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../user.service';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SimpleNotificationsModule } from 'angular2-notifications';\nimport { NotificationsService } from 'angular2-notifications';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { DatePipe } from '@angular/common';\nimport { Moment } from 'moment';\nimport {MAT_MOMENT_DATE_FORMATS, MomentDateAdapter} from '@angular/material-moment-adapter';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { fuseAnimations } from '@fuse/animations';\nimport { IUser } from 'app/main/_models/user.model';\nimport { IGMapSearchInfo } from 'app/main/_models/g-map.model.';\nimport { AuthService } from 'app/main/_services/auth.service';\nimport { Select } from '@ngxs/store';\nimport { UserDetailState } from 'app/main/_ngxs/user/user-detail/user-detail.state';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'user-detail',\n  templateUrl: './user-detail.component.html',\n  styleUrls: ['./user-detail.component.scss'],\n  animations   : fuseAnimations,\n  providers: [\n    {provide: MAT_DATE_LOCALE, useValue: 'fr'},\n    {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\n    {provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS},\n  ]\n})\n\nexport class UserDetailComponent implements OnInit {\n  @Select(UserDetailState.getUser) user$: Observable<IUser>;\n\n  user : IUser;\n  onUserChanged: Subscription;\n  pageType: string;\n  userForm: FormGroup;\n  avatarUrl: string;\n  gMapSearchInfo: IGMapSearchInfo;\n  checkboxes: number[]=[];\n  hasSelectedAccounts: boolean;\n\n  constructor(\n    private userService: UserService,\n    private notificationService: NotificationsService,\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private datePipe: DatePipe,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n  ) { }\n\n  ngOnInit() {\n    \n    this.pageType = 'edit';\n    \n    this.user$.subscribe((user:IUser) => {\n      if(user) {\n          this.user = user;\n\n          this.gMapSearchInfo = <IGMapSearchInfo> { \n              idGMapAddress: this.user.idGMapAddress,\n              operationPositionSearch:\"\",\n              operationPlaceSearch: \"\"\n              };\n\n          this.userForm=this.createUserForm();\n      }\n    });\n    // this.activatedRoute.data.subscribe(data => {\n    //   this.user = data['user'];\n   \n    //   this.gMapSearchInfo = <IGMapSearchInfo> { \n    //     idGMapAddress: this.user.idGMapAddress,\n    //     operationPositionSearch:\"\",\n    //     operationPlaceSearch: \"\"\n    //     }\n\n    //   this.userForm=this.createUserForm();\n      \n    //   this.authService.currentAvatarUrl\n    //     .subscribe(avatarUrl=> this.avatarUrl = avatarUrl);\n    // })\n\n    \n\n\n  }\n\n  createUserForm()\n  {\n      return this.formBuilder.group({\n          id              : [this.user.id],\n          userName        : [this.user.userName,[Validators.required]],\n          lastName        : [this.user.lastName,[Validators.required]],\n          firstName       : [this.user.firstName,[Validators.required]],\n          idGMapAddress   : [this.user.idGMapAddress],\n          dateOfBirth     : [this.user.dateOfBirth],\n          age             : [{value:this.user.age,disabled:true}],\n          dateCreated     : [{value:this.datePipe.transform(this.user.dateCreated,\"dd/MM/yyyy\"),disabled:true}],\n          dateLastActive  : [{value:this.datePipe.transform(this.user.dateLastActive,\"dd/MM/yyyy\"),disabled:true}]\n      });\n  }\n\n  \n  updateUser({ value, valid }: { value: IUser, valid: boolean }) {\n    this.user.id=value.id;\n    this.user.userName=value.userName;\n    this.user.lastName=value.lastName;\n    this.user.firstName=value.firstName;\n    this.user.idGMapAddress=value.idGMapAddress;\n    \n    var mt:Moment = <Moment>this.userForm.value.dateOfBirth;\n\n    var dt = mt.toDate();\n    dt.setMinutes(dt.getMinutes() - dt.getTimezoneOffset());\n    this.user.dateOfBirth = dt;\n\n    this.userService.updateUser(this.authService.decodedToken.nameid, this.user)\n      .subscribe(next => {\n        this.userForm.reset(this.user);\n        this.notificationService.success('Sauvegarde réussi', 'Utilisateur enregistré');\n      }, error => {\n        this.notificationService.error('Echec sauvegarde', error);\n      })\n  }\n \n  updateUserAvatar(avatarUrl)\n  {\n\n    this.user.avatarUrl=avatarUrl;\n  }\n\n  onChangeGMapAddress($event) {\n    if (this.user.idGMapAddress!=$event.id)\n    {\n      this.user.idGMapAddress = $event.id;\n\n    }\n    \n  }\n\n  onSelectedChange($event,idAccount:number)\n  {\n    if($event.checked) {\n      this.checkboxes.push(idAccount);\n    }\n    else\n    {\n      let index = this.checkboxes.indexOf(idAccount);\n      if (index > -1) {\n        this.checkboxes.splice(index, 1);\n      }\n    }\n    this.hasSelectedAccounts = this.checkboxes.length>0;\n\n  }\n\n  navigate() {\n    this.router.navigate([`apps/users`]);\n\n  }\n  \n}","<div id=\"user\" class=\"page-layout carded fullwidth inner-scroll\" >\n\n    <!-- TOP BACKGROUND -->\n    <div class=\"top-bg accent\"></div>\n    <!-- / TOP BACKGROUND -->\n  \n    <!-- CENTER -->\n    <div class=\"center\">\n        <!-- <div *ngIf='userForm'> -->\n          <!-- HEADER -->\n        <div class=\"header accent\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n  \n            <!-- APP TITLE -->\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n  \n                <button class=\"mr-0 mr-sm-16\" mat-icon-button\n                  [routerLink]=\"'/apps/referential/users'\"\n                   >\n                    <mat-icon>arrow_back</mat-icon>\n                </button>\n  \n                <div class=\"product-image mr-8 mr-sm-16\"  [@animate]=\"{value:'*',params:{delay:'50ms',scale:'0.2'}}\">\n                    <img *ngIf=\"user.avatarUrl\" [src]=\"user.avatarUrl\">\n                    <img *ngIf=\"!user.avatarUrl\" [src]=\"'assets/images/avatars/profile.jpg'\">\n                </div>\n  \n                <div fxLayout=\"column\" fxLayoutAlign=\"start start\"\n                      [@animate]=\"{value:'*',params:{delay:'100ms',x:'-25px'}}\">\n                    <div class=\"h2\" *ngIf=\"pageType ==='edit'\">\n                        {{user.userName}}\n                    </div>\n                    <div class=\"h2\" *ngIf=\"pageType ==='new'\">\n                        Nouveau Utilisateur\n                    </div>\n                    <div class=\"subtitle secondary-text\">\n                        <span>Details Utilisateur</span>\n                    </div>\n                </div>\n            </div>\n            <!-- / APP TITLE -->\n  \n            <!-- <button mat-raised-button\n                    class=\"save-product-button mat-white-bg mt-16 mt-sm-0\"\n                    [disabled]=\"productForm.invalid\"\n                    *ngIf=\"pageType ==='new'\" (click)=\"addProduct()\">\n                <span>ADD</span>\n            </button> -->\n  \n            <!-- (click)=\"updateUser()\" -->\n            <button mat-raised-button\n                    class=\"save-product-button white mt-16 mt-sm-0\"\n                    [disabled]=\"userForm.invalid || userForm.pristine\"\n                    *ngIf=\"pageType ==='edit'\" (click)=\"updateUser(userForm)\">\n                <span>SAVE</span>\n            </button>\n        </div>\n        <!-- / HEADER -->\n  \n        <!-- CONTENT CARD -->\n        <div class=\"content-card\">\n  \n            <!-- CONTENT -->\n            <div class=\"content\">\n                <form name=\"userForm\" [formGroup]=\"userForm\" class=\"product w-100-p\" fxLayout=\"column\" fxFlex>\n                  \n                  \n                      <mat-tab-group>\n  \n                        <mat-tab label=\"Généralité\">\n                            <div class=\"tab-content p-24\" fusePerfectScrollbar>\n                                      \n                              <div class=\"mb-24\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                                  <mat-icon class=\"mr-12 mt-12\">account_circle</mat-icon>\n                                  <mat-form-field class=\"w-100-p\">\n                                      <input matInput\n                                              name=\"userName\"\n                                              formControlName=\"userName\"\n                                              placeholder=\"Pseudonyme\"\n                                              required>\n                                  </mat-form-field>\n                              </div>\n                              \n                              <div class=\"mb-24\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                                  <mat-icon class=\"mr-12 mt-12\">account_circle</mat-icon>\n                                  <mat-form-field class=\"w-100-p\">\n                                      <input matInput\n                                              name=\"firstName\"\n                                              formControlName=\"firstName\"\n                                              placeholder=\"Nom\"\n                                              required>\n                                  </mat-form-field>\n                              </div>\n                              \n                              <div class=\"mb-24\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                                  <mat-icon class=\"mr-12 mt-12\">account_circle</mat-icon>\n                                  <mat-form-field class=\"w-100-p\">\n                                      <input matInput\n                                              name=\"lastName\"\n                                              formControlName=\"lastName\"\n                                              placeholder=\"Prénom\"\n                                              required>\n                                  </mat-form-field>\n                              </div>\n  \n                              <div class=\"mb-24\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                                  <mat-icon class=\"mr-12 mt-12\">cake</mat-icon>\n                                  <mat-form-field class=\"w-100-p\">\n                                      <input class=\"mini-input\" matInput [matDatepicker]=\"dateOfBirth\" formControlName=\"dateOfBirth\" placeholder=\"Date de naissance\"> \n                                      <mat-datepicker-toggle matSuffix [for]=\"dateOfBirth\"></mat-datepicker-toggle>\n                                      <mat-datepicker #dateOfBirth></mat-datepicker>\n                                  </mat-form-field>\n                                  \n                                  <div style=\"width:10%\"></div>\n  \n                                  <mat-icon class=\"mr-12 mt-12\">cake</mat-icon>\n                                  <mat-form-field class=\"w-100-p\">\n                                      <input matInput\n                                              name=\"age\"\n                                              formControlName=\"age\"\n                                              placeholder=\"Age\">\n                                  </mat-form-field>\n                              </div>\n  \n                              <div class=\"mb-24\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                                  <mat-icon class=\"mr-12 mt-12\">calendar_today</mat-icon>\n                                  <mat-form-field class=\"w-100-p\">\n                                      <input matInput\n                                              name=\"dateCreated\"\n                                              formControlName=\"dateCreated\"\n                                              placeholder=\"Date de création\"\n                                              required>\n                                  </mat-form-field>\n  \n                                  <div style=\"width:10%\"></div>\n  \n                                  <mat-icon class=\"mr-12 mt-12\" >calendar_today</mat-icon>\n                                  <mat-form-field class=\"w-100-p\" >\n                                      <input matInput\n                                              name=\"dateLastActive\"\n                                              formControlName=\"dateLastActive\"\n                                              placeholder=\"Date de dernière activité\"\n                                              required>\n                                  </mat-form-field>\n                              </div>\n  \n                              <div class=\"mb-24\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\n                                  <!-- <mat-icon class=\"mr-12 mt-12\">cake</mat-icon> -->\n                                  \n                              </div>\n                            </div>\n                        </mat-tab>\n  \n                        <mat-tab label=\"Adresse\">\n                          <div class=\"tab-content p-24\" fusePerfectScrollbar>\n                              <g-map-search *ngIf=\"gMapSearchInfo\" [gMapSearchInfo]=\"gMapSearchInfo\" (changeGMapAddress)=\"onChangeGMapAddress($event)\"></g-map-search>\n                          \n                              <mat-form-field class=\"w-0-p\" [hidden]=true>\n                                  <input matInput\n                                          name=\"idGMapAddress\"\n                                          formControlName=\"idGMapAddress\"\n                                          placeholder=\"idGMapAddress\"\n                                          \n                                          >\n                              </mat-form-field>\n                          </div>\n                      </mat-tab>\n  \n                        <mat-tab label=\"Avatar\">\n                              <!-- <div fxLayout='row' fxLayoutAlign=\"center center\" fxLayoutWrap >     -->\n                          <mat-card class=\"example-card\">\n                                      <mat-card-header>\n                                          <avatar-editor (getUserAvatarChange)=\"updateUserAvatar($event)\"></avatar-editor>\n           \n                                      </mat-card-header>\n                                      \n                                      <mat-card-content>\n                                          <img class=\"avatar\" [src]=\"user.avatarUrl\" alt=\"{{user.userName}}\">\n                                      </mat-card-content>\n                              </mat-card>\n                         <!-- </div> -->\n                              <!-- <div class=\"avatar-card\">\n                                  <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\n                                      <div fxFlex=\"50\">\n                                          <avatar-editor [user]=\"user\" (getUserAvatarChange)=\"updateUserAvatar($event)\"></avatar-editor>\n                                      </div>\n                                      <div class=\"avatar-image\" fxFlex=\"50\">\n                                          <img mat-card-image *ngIf=\"avatarUrl\" src=\"{{avatarUrl}}\" alt=\"{{user.userName}}\">\n                                      </div>\n                                      \n                                  </div> \n                              </div> -->\n                     \n                        </mat-tab>\n  \n                        <mat-tab label=\"Comptes associés\">\n                            <div class=\"px-24 py-8\"  style=\"background-color:#039BE5; \">\n                                <div class=\"mail-selection\" fxFlex=\"row\" fxLayoutAlign=\"start center\">\n                                    <button mat-icon-button matTooltip=\"Ajouter un compte\" >\n                                        <mat-icon style=\"color:white;\">add</mat-icon>\n                                    </button>\n                                    <button mat-icon-button matTooltip=\"Supprimer le(s) compte(s) sélectionné(s)\" *ngIf=\"hasSelectedAccounts\">\n                                        <mat-icon style=\"color:white;\">delete</mat-icon>\n                                    </button>\n                                </div>\n                            </div> \n                          \n                          \n                          \n                          \n                          \n                          \n                          \n                          <div fxLayout='column' fxLayoutWrap class=\"cards\">\n                              <div fxFlex=\"20\" class=\"example-card\" *ngFor=\"let bankAgency of user.bankAgencies\">\n                              <mat-card class=\"example-card\">\n                              <mat-card-header>\n                                      \n                                      <!-- mat-card-avatar -->\n                                <img mat-card-avatar src=\"{{bankAgency.logoClassName}}\"   alt=\"bank agency logo\">\n                                <!-- <div mat-card-avatar class=\"example-header-image\"></div> -->\n                                <mat-card-title>{{bankAgency.labelLong}}</mat-card-title>\n                                <mat-card-subtitle>{{bankAgency.labelShort}}</mat-card-subtitle>\n                              </mat-card-header>\n                              \n                              <mat-card-content>\n                                  <div fxLayout='column' fxLayoutWrap class=\"cards\">\n                                      <div style=\"background-color: #EDEEEF;color: #1F1F1F;height:30px;\" fxFlex=\"20\" fxLayout='row'> \n                                          <div style=\"width:10%;\"></div>\n                                          <div [hidden]=\"true\" style=\"width:10%;\"></div>\n                                          <div style=\"width:20%;margin-top:7px;\">Numéro de compte</div>\n                                          <div style=\"width:20%;margin-top:7px;\">Nom du compte</div>\n                                      </div>\n                                      <div fxFlex=\"20\" fxLayout='row' *ngFor=\"let account of bankAgency.accounts\">\n                                          <!-- <mat-divider></mat-divider> -->\n                                          <!-- [(ngModel)]=\"checkboxes[account.id]\"  -->\n                                          <!-- (ngModelChange)=\"onSelectedChange(account.id)\" -->\n                                          <mat-checkbox style=\"width:10%;margin-top: 10px;\"\n                                              (change)=\"onSelectedChange($event,account.id)\"\n                                              (click)=\"$event.stopPropagation()\">\n                                          </mat-checkbox>\n                                          <div [hidden]=\"true\" style=\"width:10%;margin-top: 10px;\">{{account.id}}</div>\n                                          <div style=\"width:20%;margin-top: 12px;\">{{account.number}}</div>\n                                          <div style=\"width:20%;margin-top: 12px;\">{{account.label}}</div>\n                                      </div>\n                                  </div>\n                              </mat-card-content>\n                              <!-- </mat-card-content>\n                                <p>\n                                  The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\n                                  A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\n                                  bred for hunting.\n                                </p>\n                              </mat-card-content> -->\n                              <!-- </div> -->\n                              <!-- <mat-card-actions>\n                                <button mat-button>LIKE</button>\n                                <button mat-button>SHARE</button>\n                              </mat-card-actions> -->\n                            </mat-card>\n                            </div>\n                          </div>\n                        </mat-tab>\n  \n  \n                    </mat-tab-group>\n                </form>\n  \n            </div>\n            <!-- / CONTENT -->\n  \n        </div>\n        <!-- / CONTENT CARD -->\n        </div>\n      \n    </div>\n  \n    <!-- / CENTER -->\n  <!-- </div> -->","\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Resolve, Router, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { SimpleNotificationsModule } from 'angular2-notifications';\r\nimport { NotificationsService } from 'angular2-notifications';\r\n// import { IUser } from '../../../../../_models/user.model';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/observable/of';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { UserService } from '../user.service';\r\nimport { IUser } from 'app/main/_models/user.model';\r\n\r\n@Injectable()\r\nexport class UserDetailResolver implements Resolve<IUser> {\r\n    \r\n    constructor(\r\n        private userService: UserService,\r\n        private router: Router,\r\n        private notificationService: NotificationsService\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot): Observable<IUser> {\r\n        \r\n        return this.userService.getUser(route.params['idUser'])\r\n            .catch(error => {\r\n                this.notificationService.error('Erreur de retour de données', error);\r\n                this.router.navigate(['/users']);\r\n                return Observable.of(null);\r\n            })\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { fuseAnimations } from '@fuse/animations';\nimport { UserTable } from 'app/main/_models/user.model';\nimport { Select, Store } from '@ngxs/store';\nimport { FilterSelection, FilterSelected } from 'app/main/_models/generics/filter.info.model';\nimport { FilterUserTableSelected, FilterUserTableSelection } from 'app/main/_models/filters/user.filter';\nimport { Datas } from 'app/main/_models/generics/detail-info.model';\nimport { Column, MatTableFilter } from 'app/main/apps/web-component/mat-table-filter/model/mat-table-filter.model';\nimport { Router } from '@angular/router';\nimport { UserTableFilterSelectionState } from 'app/main/_ngxs/user/user-table/user-table-filter-selection/user-table-filter-selection.state';\nimport { UserTableFilterSelectedState } from 'app/main/_ngxs/user/user-table/user-table-filter-selected/user-table-filter-selected.state';\nimport { UserTableState } from 'app/main/_ngxs/user/user-table/user-table.state';\nimport { LoadUserTable } from 'app/main/_ngxs/user/user-table/user-table.action';\nimport { SynchronizeUserTableFilterSelected } from 'app/main/_ngxs/user/user-table/user-table-filter-selected/user-table-filter-selected.action';\nimport { LoadUserTableFilterSelection } from 'app/main/_ngxs/user/user-table/user-table-filter-selection/user-table-filter-selection.action';\nimport { USER_COLUMNS } from 'app/main/_constants/mat-table-filter-column.const';\n\n@Component({\n  selector: 'user-table',\n  templateUrl: './user-table.component.html',\n  styleUrls: ['./user-table.component.scss'],\n  animations : fuseAnimations\n})\nexport class UserTableComponent implements OnInit {\n  @Select(UserTableFilterSelectionState.get) userTableFilterSelection$: Observable<FilterSelection<FilterUserTableSelection>>;\n  @Select(UserTableFilterSelectedState.get) userTableFilterSelected$: Observable<FilterSelected<FilterUserTableSelected>>;\n  @Select(UserTableState.get) userTable$: Observable<Datas<UserTable[]>>;\n\n  filterUserSelected: FilterUserTableSelected = new FilterUserTableSelected();\n  matTableFilter: MatTableFilter = {\n    columns: USER_COLUMNS,\n    filterSelection$: this.userTableFilterSelection$,\n    filterSelected$: this.userTableFilterSelected$,\n    table$: this.userTable$,\n    toolbar: {buttonAdd: {enabled:true}, buttonDelete:{enabled:true}}\n  };\n  \n  constructor(\n    private _router: Router,\n    private _store: Store\n    ) {\n      this._store.dispatch(new SynchronizeUserTableFilterSelected(new FilterUserTableSelected()));\n      this._store.dispatch(new LoadUserTableFilterSelection(new FilterUserTableSelected()));\n      \n      this.userTableFilterSelected$.subscribe(selected=>{\n        if(selected?.loader['filter-selected']?.loaded) {\n          this.filterUserSelected = selected.selected;\n        }\n      });\n\n    }\n  ngOnInit(){\n\n  }\n\n  onRowClick($event) {\n    this._router.navigate([`apps/referential/users/${$event.id}/detail`]);\n  }\n\n  applyFilterSelected(selected: FilterUserTableSelected) {\n    this._store.dispatch(new LoadUserTable(selected));\n  }\n\n  applyFilterSelection(selection: FilterUserTableSelection) { \n\n  }\n\n}","<div id=\"users\" class=\"page-layout carded fullwidth inner-scroll\" >\n\n  <!-- TOP BACKGROUND -->\n  <div class=\"top-bg accent\"></div>\n  <!-- / TOP BACKGROUND -->\n\n    <!-- CENTER -->\n    <div class=\"center\">\n\n        <!-- HEADER -->\n        <div class=\"header accent\"\n            fxLayout=\"column\" fxLayoutAlign=\"center center\"\n            fxLayout.gt-xs=\"row\" fxLayoutAlign.gt-xs=\"space-between center\">\n\n            <!-- APP TITLE -->\n            <div class=\"logo my-12 m-sm-0\"\n                fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                <mat-icon class=\"logo-icon mr-16\" *fuseIfOnDom [@animate]=\"{value:'*',params:{delay:'50ms',scale:'0.2'}}\">account_box</mat-icon>\n                <span class=\"logo-text h1\" *fuseIfOnDom [@animate]=\"{value:'*',params:{delay:'100ms',x:'-25px'}}\">Utilisateurs</span>\n            </div>\n            <!-- / APP TITLE -->\n\n            <!-- SEARCH -->\n            <!-- <div class=\"search-input-wrapper mx-12 m-md-0\" [formGroup]=\"formSearch\"\n                fxFlex=\"0 0 80px\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n                <label for=\"search\" class=\"mr-8\">\n                    <mat-icon class=\"secondary-text\">search</mat-icon>\n                </label>\n                <mat-form-field floatPlaceholder=\"never\" >\n                    <input id=\"search\" matInput placeholder=\"Recherche\"\n                        formControlName=\"keyword\"\n                    >\n                </mat-form-field>\n            </div> -->\n            <!-- / SEARCH -->\n\n            <!-- <button mat-raised-button\n                    [routerLink]=\"'/apps/e-commerce/products/new'\"\n                    class=\"add-product-button mat-white-bg my-12 mt-sm-0\">\n                <span>ADD NEW PRODUCT</span>\n            </button> -->\n\n        </div>\n        \n        <!-- / HEADER -->\n\n        <!-- CONTENT CARD -->\n        <div class=\"content-card mat-white-bg\">\n            <div class=\"example-container\">\n                <mat-table-filter \n                    [matTableFilter]=\"matTableFilter\"\n                    (onRowClick)=\"onRowClick($event)\"\n                    (changeFilterSelected)=\"applyFilterSelected($event)\"\n                    (changeFilterSelection)=\"applyFilterSelection($event)\">\n                </mat-table-filter>\n            \n            <!-- \n              <mat-table class=\"users-table\"\n                #table [dataSource]=\"dataSource\"\n                [@animateStagger]=\"{value:'50'}\"\n                matSort matSortActive=\"id\" matSortDirection=\"asc\" matSortDisableClear\n                fusePerfectScrollbar>\n\n\n                <ng-container matColumnDef=\"id\" >\n                    <mat-header-cell *matHeaderCellDef mat-sort-header style=\"flex:0 0 80px;\">ID</mat-header-cell>\n                    <mat-cell *matCellDef=\"let user\" style=\"flex:0 0 80px;\">\n                        <p class=\"text-truncate\">{{user.id}}</p>\n                    </mat-cell>\n                </ng-container>\n                    \n\n             \n                <ng-container cdkColumnDef=\"avatar\" >\n                    <mat-header-cell *cdkHeaderCellDef mat-sort-header style=\"flex:0 0 80px;\">avatar</mat-header-cell>\n                    <mat-cell *cdkCellDef=\"let user\" style=\"flex:0 0 80px;\">\n                        <img class=\"avatar\" *ngIf=\"user.avatarUrl\" [src]=\"user.avatarUrl\">\n                        <img class=\"avatar\" *ngIf=\"!user.avatarUrl\" [src]=\"'assets/images/avatars/profile.jpg'\">\n                    </mat-cell>\n                </ng-container>\n\n     \n                <ng-container matColumnDef=\"lastName\" >\n                    <mat-header-cell *matHeaderCellDef mat-sort-header>Prénom</mat-header-cell>\n                    <mat-cell *matCellDef=\"let user\">\n                        <p class=\"text-truncate\">{{user.lastName}}</p>\n                    </mat-cell>\n                </ng-container>\n\n\n                <ng-container matColumnDef=\"firstName\" >\n                    <mat-header-cell *matHeaderCellDef mat-sort-header>Nom</mat-header-cell>\n                    <mat-cell *matCellDef=\"let user\">\n                        <p class=\"text-truncate\">{{user.firstName}}</p>\n                    </mat-cell>\n                </ng-container>\n\n   \n                <ng-container matColumnDef=\"userName\" >\n                    <mat-header-cell *matHeaderCellDef mat-sort-header>Pseudonyme</mat-header-cell>\n                    <mat-cell *matCellDef=\"let user\">\n                        <p class=\"text-truncate\">{{user.userName}}</p>\n                    </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"button\" >\n                    <mat-header-cell style=\"flex:0 0 30px;\"  *matHeaderCellDef ></mat-header-cell>\n                    <mat-cell style=\"flex:0 0 30px;\" *matCellDef=\"let user\">\n                            <button \n                                matTooltip=\"Détail\" \n                                mat-icon-button \n                                [routerLink]=\"['/apps/referential/users/', user.id]\"\n                            >\n                                <mat-icon>more_horiz</mat-icon>\n                            </button>\n                    </mat-cell>\n                </ng-container> \n\n                <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                    \n                <mat-row *cdkRowDef=\"let user; columns: displayedColumns;\"\n                    class=\"user\"\n                    matRipple\n                >\n                </mat-row>\n            </mat-table>\n            <div *ngIf=\"(userTable$ | async).loader['datas'].loading\"\n                class=\"h-96 w-100-p\"\n                fxLayout=\"column\"\n                fxLayoutAlign=\"center center\">\n                <mat-spinner diameter=\"40\" color=\"accent\" fxLayout=\"row\"></mat-spinner>\n                <div style=\"color:#4285F3\" fxLayout=\"row\">chargement...</div>\n            </div> \n\n            <mat-paginator *ngIf=\"(userTableFilter$ | async).filters && (userTableFilter$ | async).filters.selected.pagination; let pagination\"\n                (page)=\"onPageChangeEvent($event)\"\n                [length]=\"pagination.totalItems\" \n                [pageSize]=\"pagination.nbItemsPerPage\"\n                [pageSizeOptions]=\"[15, 100, 200]\">\n            </mat-paginator>\n-->\n\n        </div> \n\n\n\n        </div> \n        <!-- / CONTENT CARD -->\n    </div>\n    <!-- / CENTER -->\n</div>\n","import { NgModule } from '@angular/core';\nimport { UserDetailComponent } from './user-detail/user-detail.component';\nimport { RouterModule } from '@angular/router';\nimport { UserService } from './user.service';\nimport { UserDetailResolver } from './user-detail/user-detail.resolver';\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { AvatarEditorComponent } from './avatar-editor/avatar-editor.component';\nimport { GMapModule } from '../../g-map/g-map.module';\nimport { AuthGuard } from 'app/_guards/auth.guard';\nimport { FuseSharedModule } from '@fuse/shared.module';\nimport { PreventUnsavedChanges } from 'app/_guards/prevent-unsaved-changes.guard';\nimport { NgxsModule } from '@ngxs/store';\nimport { AngularMaterialModule } from 'app/angular-material.module';\nimport { MatTableFilterModule } from '../../web-component/mat-table-filter/mat-table-filter.module';\nimport { UserTableFilterSelectedState } from 'app/main/_ngxs/user/user-table/user-table-filter-selected/user-table-filter-selected.state';\nimport { UserTableFilterSelectionState } from 'app/main/_ngxs/user/user-table/user-table-filter-selection/user-table-filter-selection.state';\nimport { UserTableState } from 'app/main/_ngxs/user/user-table/user-table.state';\nimport { DatePipe } from '@angular/common';\nimport { UserTableComponent } from './user-table/user-table.component';\n\nconst routes = [\n  {\n      path     : '',\n      component: UserTableComponent,\n      // resolve  : { users: UserListResolver },\n      canActivate: [AuthGuard]\n  },\n  {\n      path     : ':idUser/detail',\n      component: UserDetailComponent,\n      resolve  : { user: UserDetailResolver },\n      canActivate: [AuthGuard]\n      // canDeactivate: [PreventUnsavedChanges]\n  }\n  // ,\n  // {\n  //     path      : '**',\n  //     redirectTo: ''\n  // }\n];\n\n@NgModule({\n  imports: [\n    FuseSharedModule,\n    AngularMaterialModule,\n    FileUploadModule,\n    GMapModule,\n    MatTableFilterModule,\n    NgxsModule.forFeature([\n      UserTableFilterSelectedState,\n      UserTableFilterSelectionState,\n      UserTableState\n    ]),\n    RouterModule.forChild(routes)\n  ],\n  declarations: [\n    UserTableComponent,\n    UserDetailComponent,\n    AvatarEditorComponent\n  ],\n  providers : [\n    UserService,\n    UserDetailResolver,\n    PreventUnsavedChanges,\n    DatePipe\n  ]\n})\nexport class UserModule { }"],"sourceRoot":"webpack:///"}